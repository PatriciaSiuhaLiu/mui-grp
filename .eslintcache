[{"C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\index.js":"1","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\App.js":"2","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\serviceWorker.js":"3","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\LoadingSpinner.jsx":"4","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\OnboardAccount.js":"5","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\AddAccount.js":"6","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\OnboardAccountPA.js":"7","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SubscribeToMaintenanceSchedule.js":"8","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\Home.js":"9","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\AAForm\\OnboardAccountAA.js":"10","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ThanksPage.jsx":"11","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\WorkspaceTrack.jsx":"12","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\IBM2Kyndryl.jsx":"13","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\NoAccess.jsx":"14","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\EventStreams.jsx":"15","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ApiKeys.jsx":"16","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\AccountSettings.jsx":"17","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SuperAdminHome.jsx":"18","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\commandRegistration\\AddCommandRegistration.jsx":"19","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SAWorkspace\\SAWorkspaceMain.jsx":"20","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SAAddWorkspace\\SAAddWorkspace.jsx":"21","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\commandRegistration\\CommandRegistration.jsx":"22","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\teams\\ExtractTeamIds.jsx":"23","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\followUpApproval\\FollowUpApproval.jsx":"24","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\addUserForm.jsx":"25","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SACommands\\CommandsMain.jsx":"26","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SACommands\\AddCommands\\AddCommand.jsx":"27","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\DailyReport\\DRHome.jsx":"28","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ServiceKeys\\Services.jsx":"29","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ServiceKeys\\Add-Service.jsx":"30","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ServiceKeys\\Service-keys.jsx":"31","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ServiceKeys\\Add-Key.jsx":"32","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\Webhooks\\WebhookMain.jsx":"33","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\groups\\GroupDetails.jsx":"34","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\Webhooks\\AddWebhook.jsx":"35","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\groups\\GroupsHome.jsx":"36","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\groups\\CreateGroup.jsx":"37","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ServiceManager\\ServiceManagerHome.jsx":"38","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ServiceManager\\CreateSMRules.jsx":"39","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ServiceManager\\IncidentParamSettings.jsx":"40","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ServiceManager\\EditSMRules.jsx":"41","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Assistants\\SAAssistants\\SAAssistatnsMain.jsx":"42","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\common\\header\\header.jsx":"43","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\EventStreams\\SAEventStreams\\SAEventStreamsMain.jsx":"44","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\EventStreams\\AddEventStreams\\AddEventStreams.jsx":"45","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\GlobalAssignment\\SAGlobalAssignments\\SAGlobalAssignmentsMain.jsx":"46","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\IndexChannel\\SAIndexChannel\\SAIndexChannelMain.jsx":"47","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Assistants\\AddAssistants\\AddAssistants.jsx":"48","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\IndexChannel\\AddIndexChannel\\AddIndexChannel.jsx":"49","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\GlobalAssignment\\AddGlobalAssignments\\AddGlobalAssignments.jsx":"50","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Features\\SAFeatures\\SAFeatureMain.jsx":"51","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Features\\PAFeatures\\PAFeatureMain.jsx":"52","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\AnsibleInstance\\SAAnsibleInstances\\SAAnsibleInstancesMain.jsx":"53","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Features\\AddFeature\\AddFeature.jsx":"54","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\AnsibleInstance\\AddAnsibleInstances\\AddAnsibleInstances.jsx":"55","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ISTogether\\Admin\\AdminMain.jsx":"56","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ISTogether\\Volunteer\\VolunteerMain.jsx":"57","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ISTogether\\Requester\\RequesterMain.jsx":"58","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\Icon.js":"59","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\addAccount.jsx":"60","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\subscribeToMaintenanceSchedule.jsx":"61","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\common\\table\\TablePA.jsx":"62","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\common\\table\\table.jsx":"63","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\AAForm\\GeneralInfo.jsx":"64","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\AAForm\\configInfoForm.jsx":"65","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\AAForm\\MainForm.jsx":"66","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\AAForm\\additionalInfoForm.jsx":"67","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\validation\\validate.js":"68","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\AAForm\\AddWorkspace.jsx":"69","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\AAForm\\AddRulesModal.jsx":"70","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ISTogether\\Requester\\ReqBreadCrump.jsx":"71","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ISTogether\\Requester\\Requester.jsx":"72","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ISTogether\\Volunteer\\VolunteerBreadCrump.jsx":"73","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ISTogether\\Volunteer\\Volunteer.jsx":"74","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ISTogether\\Admin\\AdminBreadCrump.jsx":"75","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\AAForm\\AdditionalProp.jsx":"76","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ISTogether\\Admin\\Admin.jsx":"77","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SALandingSidebar.jsx":"78","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\AnsibleInstance\\AddAnsibleInstances\\AddAnsibleInstancesBreadcrump.jsx":"79","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Features\\AddFeature\\AddFeatureBreadcrump.jsx":"80","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\AnsibleInstance\\SAAnsibleInstances\\SAAnsibleInstancesList.jsx":"81","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\AnsibleInstance\\SAAnsibleInstances\\SAAnsibleInstancesBreadcrump.jsx":"82","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Features\\SAFeatures\\SAFeatureList.jsx":"83","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Features\\SAFeatures\\SAFeatureBreadcrump.jsx":"84","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\GlobalAssignment\\AddGlobalAssignments\\AddGlobalAssignmentsBreadcrump.jsx":"85","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\IndexChannel\\AddIndexChannel\\AddIndexChannelBreadcrump.jsx":"86","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Assistants\\AddAssistants\\AddAssistantsBreadcrump.jsx":"87","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\IndexChannel\\SAIndexChannel\\SAIndexChannelList.jsx":"88","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\IndexChannel\\SAIndexChannel\\SAIndexChannelBreadcrump.jsx":"89","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\GlobalAssignment\\SAGlobalAssignments\\SAGlobalAssignmentsList.jsx":"90","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\GlobalAssignment\\SAGlobalAssignments\\SAGlobalAssignmentsBreadcrump.jsx":"91","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\EventStreams\\AddEventStreams\\AddEventStreamsBreadcrum.jsx":"92","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\EventStreams\\SAEventStreams\\SAEventStreamsBreadcrump.jsx":"93","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\groups\\ChatopsGroupUtil.js":"94","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\EventStreams\\SAEventStreams\\SAEventStreamsList.jsx":"95","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Assistants\\SAAssistants\\SAAssistantsList.jsx":"96","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Assistants\\SAAssistants\\SAAssistatnsBreadcrump.jsx":"97","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SACommands\\CommandsBreadCrumb.jsx":"98","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ServiceManager\\DeleteRuleModal.jsx":"99","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\groups\\modals\\DeleteModal.jsx":"100","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\groups\\modals\\CreateUserModal.jsx":"101","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\groups\\UserList.jsx":"102","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\Webhooks\\WebhookBreadCrump.jsx":"103","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\Webhooks\\Webhooks.jsx":"104","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\DailyReport\\DRBreadCrumb.jsx":"105","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\DailyReport\\DRForm.jsx":"106","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SACommands\\AddCommands\\AddCommandForm.jsx":"107","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SACommands\\CommandList.jsx":"108","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\followUpApproval\\TabularData.jsx":"109","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SAAddWorkspace\\AddWorkspaceTeams.jsx":"110","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SAAddWorkspace\\SAAddWorkspaceBreadCrump.jsx":"111","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SAHome.jsx":"112","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\EventStreamApiKey.jsx":"113","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SABreadCrump.jsx":"114","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SAWorkspace\\SAWorkspaceBreadcrump.jsx":"115","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SAWorkspace\\SAWorkspaceList.jsx":"116","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ApiKeyForm.jsx":"117","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ButtonSettings.jsx":"118","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\Key.jsx":"119"},{"size":365,"mtime":1639644016230,"results":"120","hashOfConfig":"121"},{"size":12878,"mtime":1656396520158,"results":"122","hashOfConfig":"121"},{"size":5221,"mtime":1639644016231,"results":"123","hashOfConfig":"121"},{"size":398,"mtime":1639644016166,"results":"124","hashOfConfig":"121"},{"size":1042,"mtime":1639644016167,"results":"125","hashOfConfig":"121"},{"size":1376,"mtime":1639644016150,"results":"126","hashOfConfig":"121"},{"size":1306,"mtime":1639644016167,"results":"127","hashOfConfig":"121"},{"size":1601,"mtime":1656396520179,"results":"128","hashOfConfig":"121"},{"size":3931,"mtime":1656396520165,"results":"129","hashOfConfig":"121"},{"size":3199,"mtime":1639644016217,"results":"130","hashOfConfig":"121"},{"size":733,"mtime":1639644016205,"results":"131","hashOfConfig":"121"},{"size":12821,"mtime":1656396520192,"results":"132","hashOfConfig":"121"},{"size":1688,"mtime":1642065175806,"results":"133","hashOfConfig":"121"},{"size":1330,"mtime":1642065175810,"results":"134","hashOfConfig":"121"},{"size":3938,"mtime":1639644016156,"results":"135","hashOfConfig":"121"},{"size":6708,"mtime":1656396520161,"results":"136","hashOfConfig":"121"},{"size":4977,"mtime":1656396520159,"results":"137","hashOfConfig":"121"},{"size":1091,"mtime":1639644016205,"results":"138","hashOfConfig":"121"},{"size":15452,"mtime":1656396520193,"results":"139","hashOfConfig":"121"},{"size":1335,"mtime":1639644016205,"results":"140","hashOfConfig":"121"},{"size":16633,"mtime":1656396520188,"results":"141","hashOfConfig":"121"},{"size":10600,"mtime":1642065175824,"results":"142","hashOfConfig":"121"},{"size":5482,"mtime":1656648207728,"results":"143","hashOfConfig":"121"},{"size":7973,"mtime":1656396520195,"results":"144","hashOfConfig":"121"},{"size":8115,"mtime":1659414873053,"results":"145","hashOfConfig":"121"},{"size":1129,"mtime":1639644016202,"results":"146","hashOfConfig":"121"},{"size":1200,"mtime":1639644016200,"results":"147","hashOfConfig":"121"},{"size":665,"mtime":1639644016154,"results":"148","hashOfConfig":"121"},{"size":7174,"mtime":1656396520173,"results":"149","hashOfConfig":"121"},{"size":21006,"mtime":1659328227936,"results":"150","hashOfConfig":"121"},{"size":12669,"mtime":1659414873049,"results":"151","hashOfConfig":"121"},{"size":12548,"mtime":1658862488927,"results":"152","hashOfConfig":"121"},{"size":927,"mtime":1656396520191,"results":"153","hashOfConfig":"121"},{"size":13632,"mtime":1656396520210,"results":"154","hashOfConfig":"121"},{"size":19038,"mtime":1658862488934,"results":"155","hashOfConfig":"121"},{"size":6704,"mtime":1656396520211,"results":"156","hashOfConfig":"121"},{"size":12172,"mtime":1656396520209,"results":"157","hashOfConfig":"121"},{"size":8778,"mtime":1656396520178,"results":"158","hashOfConfig":"121"},{"size":38346,"mtime":1658862488931,"results":"159","hashOfConfig":"121"},{"size":10276,"mtime":1656396520177,"results":"160","hashOfConfig":"121"},{"size":39777,"mtime":1660044429032,"results":"161","hashOfConfig":"121"},{"size":1331,"mtime":1639644016177,"results":"162","hashOfConfig":"121"},{"size":5002,"mtime":1639644016210,"results":"163","hashOfConfig":"121"},{"size":1362,"mtime":1639644016182,"results":"164","hashOfConfig":"121"},{"size":7839,"mtime":1656396520183,"results":"165","hashOfConfig":"121"},{"size":1371,"mtime":1639644016192,"results":"166","hashOfConfig":"121"},{"size":1359,"mtime":1639644016197,"results":"167","hashOfConfig":"121"},{"size":9645,"mtime":1656396520182,"results":"168","hashOfConfig":"121"},{"size":33835,"mtime":1656396520186,"results":"169","hashOfConfig":"121"},{"size":28287,"mtime":1656396520185,"results":"170","hashOfConfig":"121"},{"size":1301,"mtime":1639644016187,"results":"171","hashOfConfig":"121"},{"size":2679,"mtime":1639644016185,"results":"172","hashOfConfig":"121"},{"size":1363,"mtime":1639644016173,"results":"173","hashOfConfig":"121"},{"size":17738,"mtime":1656396520184,"results":"174","hashOfConfig":"121"},{"size":16228,"mtime":1656396520180,"results":"175","hashOfConfig":"121"},{"size":657,"mtime":1639644016160,"results":"176","hashOfConfig":"121"},{"size":683,"mtime":1639644016164,"results":"177","hashOfConfig":"121"},{"size":641,"mtime":1639644016162,"results":"178","hashOfConfig":"121"},{"size":284,"mtime":1639644016165,"results":"179","hashOfConfig":"121"},{"size":28803,"mtime":1656396520205,"results":"180","hashOfConfig":"121"},{"size":34617,"mtime":1660634554312,"results":"181","hashOfConfig":"121"},{"size":12741,"mtime":1646681256941,"results":"182","hashOfConfig":"121"},{"size":8574,"mtime":1656396520194,"results":"183","hashOfConfig":"121"},{"size":17117,"mtime":1656396520199,"results":"184","hashOfConfig":"121"},{"size":68947,"mtime":1657177146561,"results":"185","hashOfConfig":"121"},{"size":39198,"mtime":1657177146560,"results":"186","hashOfConfig":"121"},{"size":89014,"mtime":1656396520202,"results":"187","hashOfConfig":"121"},{"size":6637,"mtime":1659414873054,"results":"188","hashOfConfig":"121"},{"size":5562,"mtime":1639644016215,"results":"189","hashOfConfig":"121"},{"size":19447,"mtime":1656396520197,"results":"190","hashOfConfig":"121"},{"size":1691,"mtime":1639644016161,"results":"191","hashOfConfig":"121"},{"size":50175,"mtime":1656396520167,"results":"192","hashOfConfig":"121"},{"size":1703,"mtime":1639644016164,"results":"193","hashOfConfig":"121"},{"size":39480,"mtime":1656396520168,"results":"194","hashOfConfig":"121"},{"size":1691,"mtime":1639644016160,"results":"195","hashOfConfig":"121"},{"size":5165,"mtime":1656396520198,"results":"196","hashOfConfig":"121"},{"size":6344,"mtime":1642065175807,"results":"197","hashOfConfig":"121"},{"size":5523,"mtime":1639644016203,"results":"198","hashOfConfig":"121"},{"size":1123,"mtime":1639644016171,"results":"199","hashOfConfig":"121"},{"size":1052,"mtime":1639644016185,"results":"200","hashOfConfig":"121"},{"size":3987,"mtime":1656396520181,"results":"201","hashOfConfig":"121"},{"size":970,"mtime":1639644016172,"results":"202","hashOfConfig":"121"},{"size":9128,"mtime":1639644016187,"results":"203","hashOfConfig":"121"},{"size":917,"mtime":1639644016186,"results":"204","hashOfConfig":"121"},{"size":1117,"mtime":1639644016189,"results":"205","hashOfConfig":"121"},{"size":1089,"mtime":1639644016194,"results":"206","hashOfConfig":"121"},{"size":1063,"mtime":1639644016175,"results":"207","hashOfConfig":"121"},{"size":11290,"mtime":1659414873051,"results":"208","hashOfConfig":"121"},{"size":942,"mtime":1639644016196,"results":"209","hashOfConfig":"121"},{"size":9262,"mtime":1642065175818,"results":"210","hashOfConfig":"121"},{"size":966,"mtime":1639644016190,"results":"211","hashOfConfig":"121"},{"size":1083,"mtime":1642065175815,"results":"212","hashOfConfig":"121"},{"size":945,"mtime":1639644016180,"results":"213","hashOfConfig":"121"},{"size":977,"mtime":1656396520208,"results":"214","hashOfConfig":"121"},{"size":8430,"mtime":1639644016180,"results":"215","hashOfConfig":"121"},{"size":8671,"mtime":1639644016176,"results":"216","hashOfConfig":"121"},{"size":929,"mtime":1639644016176,"results":"217","hashOfConfig":"121"},{"size":985,"mtime":1639644016202,"results":"218","hashOfConfig":"121"},{"size":973,"mtime":1656396520175,"results":"219","hashOfConfig":"121"},{"size":986,"mtime":1639644016226,"results":"220","hashOfConfig":"121"},{"size":7666,"mtime":1656648207727,"results":"221","hashOfConfig":"121"},{"size":3929,"mtime":1642065175839,"results":"222","hashOfConfig":"121"},{"size":1051,"mtime":1656396520190,"results":"223","hashOfConfig":"121"},{"size":7230,"mtime":1656396520191,"results":"224","hashOfConfig":"121"},{"size":1621,"mtime":1639644016153,"results":"225","hashOfConfig":"121"},{"size":58187,"mtime":1660044429030,"results":"226","hashOfConfig":"121"},{"size":10875,"mtime":1656396520188,"results":"227","hashOfConfig":"121"},{"size":4062,"mtime":1642065175819,"results":"228","hashOfConfig":"121"},{"size":839,"mtime":1656396520196,"results":"229","hashOfConfig":"121"},{"size":2116,"mtime":1656396520187,"results":"230","hashOfConfig":"121"},{"size":1065,"mtime":1639644016198,"results":"231","hashOfConfig":"121"},{"size":1409,"mtime":1639644016203,"results":"232","hashOfConfig":"121"},{"size":8963,"mtime":1656396520164,"results":"233","hashOfConfig":"121"},{"size":763,"mtime":1639644016199,"results":"234","hashOfConfig":"121"},{"size":930,"mtime":1639644016204,"results":"235","hashOfConfig":"121"},{"size":8524,"mtime":1639644016204,"results":"236","hashOfConfig":"121"},{"size":10503,"mtime":1656396520161,"results":"237","hashOfConfig":"121"},{"size":12242,"mtime":1656396520162,"results":"238","hashOfConfig":"121"},{"size":7590,"mtime":1659414873047,"results":"239","hashOfConfig":"121"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16p2t9b",{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277"},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289"},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"334"},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360"},{"filePath":"361","messages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366"},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392"},{"filePath":"393","messages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395"},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398"},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404"},{"filePath":"405","messages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412"},{"filePath":"413","messages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415"},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418"},{"filePath":"419","messages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":51,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421"},{"filePath":"422","messages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":88,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424"},{"filePath":"425","messages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":133,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427"},{"filePath":"428","messages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430"},{"filePath":"431","messages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433"},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436"},{"filePath":"437","messages":"438","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":63,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442"},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":58,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448"},{"filePath":"449","messages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456"},{"filePath":"457","messages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459"},{"filePath":"460","messages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462"},{"filePath":"463","messages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465"},{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468"},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"471"},{"filePath":"472","messages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474"},{"filePath":"475","messages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"477"},{"filePath":"478","messages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480"},{"filePath":"481","messages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483"},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486"},{"filePath":"487","messages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489"},{"filePath":"490","messages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492"},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495"},{"filePath":"496","messages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498"},{"filePath":"499","messages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501"},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504"},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"507"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510"},{"filePath":"511","messages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513"},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516"},{"filePath":"517","messages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519"},{"filePath":"520","messages":"521","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522"},{"filePath":"523","messages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"525"},{"filePath":"526","messages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528"},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"531"},{"filePath":"532","messages":"533","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"534","messages":"535","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"536"},{"filePath":"537","messages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"539"},{"filePath":"540","messages":"541","errorCount":0,"fatalErrorCount":0,"warningCount":62,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542"},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"545"},{"filePath":"546","messages":"547","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"548","messages":"549","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"550","messages":"551","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"552","messages":"553","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"554"},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"557"},{"filePath":"558","messages":"559","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"560"},{"filePath":"561","messages":"562","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"563"},{"filePath":"564","messages":"565","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"566"},{"filePath":"567","messages":"568","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569"},{"filePath":"570","messages":"571","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"572"},{"filePath":"573","messages":"574","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"575"},{"filePath":"576","messages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"578"},"C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\index.js",[],"C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\App.js",["579"],"import React from 'react';\r\nimport './App.scss';\r\nimport { BrowserRouter, Switch, Route, withRouter } from 'react-router-dom';\r\nimport { Loading } from \"carbon-components-react\";\r\n// import Home from './components/Home';\r\nimport OnboardAccount from './components/OnboardAccount';\r\nimport AddAccount from './components/AddAccount';\r\nimport WorkspaceTrack from './components/WorkspaceTrack';\r\nimport ThanksPage from './components/ThanksPage';\r\nimport NoAccess from './components/NoAccess';\r\nimport IBM2Kyndryl from './components/IBM2Kyndryl';\r\nimport SuperAdminHome from './components/SuperAdmin/SuperAdminHome';\r\nimport OnboardAccountPA from './components/OnboardAccountPA';\r\nimport OnboardAccountAA from './components/forms/AAForm/OnboardAccountAA';\r\nimport UIHeader from './components/common/header/header';\r\nimport CommandRegistration from './components/commandRegistration/CommandRegistration';\r\nimport AddCommandRegistration from './components/commandRegistration/AddCommandRegistration';\r\nimport SuperAdminWorkspace from './components/SuperAdmin/SAWorkspace/SAWorkspaceMain';\r\nimport SuperAdminAddWorkspace from './components/SuperAdmin/SAAddWorkspace/SAAddWorkspace';\r\nimport SuperAdminEventStreams from './components/SuperAdmin/EventStreams/SAEventStreams/SAEventStreamsMain';\r\nimport SAAddEventStreams from './components/SuperAdmin/EventStreams/AddEventStreams/AddEventStreams';\r\nimport SuperAdminAssistants from './components/SuperAdmin/Assistants/SAAssistants/SAAssistatnsMain';\r\nimport SAAddAssistants from './components/SuperAdmin/Assistants/AddAssistants/AddAssistants';\r\nimport SuperAdminIndexChannel from './components/SuperAdmin/IndexChannel/SAIndexChannel/SAIndexChannelMain';\r\nimport SAAddIndexChannel from './components/SuperAdmin/IndexChannel/AddIndexChannel/AddIndexChannel';  \r\nimport SAGlobalAssignments from './components/SuperAdmin/GlobalAssignment/SAGlobalAssignments/SAGlobalAssignmentsMain';\r\nimport SAAddGlobalAssignments from './components/SuperAdmin/GlobalAssignment/AddGlobalAssignments/AddGlobalAssignments';  \r\nimport APIKeys from './components/ApiKeys';\r\nimport AccountSettings from './components/AccountSettings';\r\nimport FollowUpApproval from './components/followUpApproval/FollowUpApproval';\r\nimport ExtractTeamIds from './components/teams/ExtractTeamIds';\r\nimport EventStreams from './components/EventStreams';\r\nimport AddUserForm from './components/forms/addUserForm';\r\nimport SuperAdminCommands from './components/SuperAdmin/SACommands/CommandsMain';\r\nimport AddCommands from './components/SuperAdmin/SACommands/AddCommands/AddCommand';\r\nimport SAFeatureMain from './components/SuperAdmin/Features/SAFeatures/SAFeatureMain';\r\nimport PAFeatureMain from './components/SuperAdmin/Features/PAFeatures/PAFeatureMain';\r\nimport SAAddFeature from './components/SuperAdmin/Features/AddFeature/AddFeature';\r\nimport DRHome from './components/DailyReport/DRHome';\r\nimport Services from './components/ServiceKeys/Services';\r\nimport ServiceKeys from './components/ServiceKeys/Service-keys';\r\nimport AddService from './components/ServiceKeys/Add-Service';\r\nimport AddKey from './components/ServiceKeys/Add-Key';\r\nimport MaintenanceSchedule from './components/SubscribeToMaintenanceSchedule';\r\n\r\nimport SAAnsibleInstances from './components/SuperAdmin/AnsibleInstance/SAAnsibleInstances/SAAnsibleInstancesMain';\r\nimport SAAddAnsibleInstances from './components/SuperAdmin/AnsibleInstance/AddAnsibleInstances/AddAnsibleInstances';  \r\n\r\n// import ReqHome from './components/ISTogether/Requester/RequesterMain';\r\n// import VolunteerHome from './components/ISTogether/Volunteer/VolunteerMain';\r\n// import AdminHome from './components/ISTogether/Admin/AdminMain';\r\nimport WebhooksHome from './components/Webhooks/WebhookMain';\r\nimport WebhookForm from './components/Webhooks/AddWebhook';\r\n// import ReqHome from './components/ISTogether/Requester/RequesterMain';\r\n// import VolunteerHome from './components/ISTogether/Volunteer/VolunteerMain';\r\n// import AdminHome from './components/ISTogether/Admin/AdminMain';\r\nimport GroupsHome from './components/groups/GroupsHome';\r\nimport GroupDetails from './components/groups/GroupDetails';\r\nimport CreateGroup from './components/groups/CreateGroup';\r\nimport ServiceManagerHome from './components/ServiceManager/ServiceManagerHome';\r\nimport CreateSMRules from './components/ServiceManager/CreateSMRules';\r\nimport IncidentParamSettings from './components/ServiceManager/IncidentParamSettings';\r\nimport EditSMRules from './components/ServiceManager/EditSMRules';\r\nconst Home = React.lazy(() => import('./components/Home'));\r\nconst  ReqHome= React.lazy(() => import('./components/ISTogether/Requester/RequesterMain'));\r\nconst  VolunteerHome= React.lazy(() => import('./components/ISTogether/Volunteer/VolunteerMain'));\r\nconst  AdminHome= React.lazy(() => import('./components/ISTogether/Admin/AdminMain'));\r\nfunction App() {\r\n    return (\r\n      <div>\r\n        <React.Suspense fallback={<span><Loading withOverlay={true} description=\"loading...\" /></span>}>\r\n        <BrowserRouter>\r\n            <UIHeader />\r\n            <Switch>\r\n                {/* Home page */}\r\n                <Route path=\"/mui/home\" render={() => <Home/>} />\r\n                {/* Requester Form page */}\r\n                <Route path=\"/mui/teamit/requester\" render={() => <ReqHome/>} /> \r\n                 <Route path=\"/mui/teamit/editReqDetails\" render={() => <ReqHome/>} />\r\n                 {/* Volunteer Form page */}  \r\n                 <Route path=\"/mui/teamit/volunteer\" render={() => <VolunteerHome/>} />\r\n                 {/* Admin page */}\r\n                 <Route path=\"/mui/teamit/admin\" render={() => <AdminHome/>} />\r\n                {/* Account list page for AA with Datatable*/}\r\n                <Route path='/mui/onboardAccount' component={()=><OnboardAccount/>} />\r\n                {/* Account list page for PA with Datatable*/}\r\n                <Route path='/mui/addAccount' component={AddAccount} /> \r\n                {/* SA landing page */} \r\n                <Route path='/mui/superAdmin'  component={SuperAdminHome} /> \r\n                {/* Add account form page for PA */}\r\n                <Route path='/mui/addAccountDetails' component={()=><OnboardAccountPA/>}  />\r\n                {/* Subscribe to maintenance schedule*/}\r\n                <Route path='/mui/subscribeToMaintenanceSchedule' component={()=><MaintenanceSchedule/>}  />\r\n                {/* edit account form page for PA */}\r\n                <Route path='/mui/editAccountDetails' component={()=><OnboardAccountPA/>} />\r\n                {/* Onboard Account form page */}\r\n                <Route path='/mui/onboardAccountDetails' component={()=><OnboardAccountAA/>}  />\r\n                {/* Command Registraion page */}\r\n                <Route path='/mui/commandRegistraton' component={()=><CommandRegistration/>}  />\r\n                {/* Add Command Registraion page */}\r\n                <Route path='/mui/addCommandRegistraton' component={()=><AddCommandRegistration/>}  />\r\n                {/* Generate API Key */}\r\n                <Route path='/mui/api-keys/:id' component={APIKeys} />\r\n                {/* Account Settings */}\r\n                <Route path='/mui/account-settings/:id' component={AccountSettings} />\r\n                {/*New pge for Account based event streams*/}\r\n                <Route path='/mui/event-streams/:id' component={()=><EventStreams/>} />\r\n                {/* SA Workspace page */}\r\n                <Route path='/mui/workspaces'  component={()=><SuperAdminWorkspace/>}  />\r\n                {/* SA Add Workspace page */}\r\n                <Route path='/mui/addWorkspaces'  component={()=><SuperAdminAddWorkspace/>}  />\r\n                {/* SA EventStreams page */}\r\n                <Route path='/mui/eventStreams'  component={()=><SuperAdminEventStreams/>}  />\r\n                {/* SA Add EventStreams page */}\r\n                <Route path='/mui/addEventStreams'  component={()=><SAAddEventStreams/>}  />\r\n                {/* SA Assistants page */}\r\n                <Route path='/mui/assistants'  component={()=><SuperAdminAssistants/>}  />\r\n                {/* SA Add Assistant page */}\r\n                <Route path='/mui/addAssistants'  component={()=><SAAddAssistants/>}  />\r\n                {/* AddUserForm page */}\r\n                <Route path='/mui/register' component={()=><AddUserForm/>} />\r\n                <Route path='/mui/workspace-exception-registration' component={WorkspaceTrack} />                          \r\n                <Route path='/mui/thankyou' component={ThanksPage} />     \r\n                <Route path='/mui/notAuthorized' component={NoAccess} />     \r\n                {/* SA Commands page */}        \r\n                <Route path='/mui/commands' component={SuperAdminCommands} />\r\n                {/* SA Add Commands page */}\r\n                <Route path='/mui/add-command' component={AddCommands} />\r\n                {/* IBM2Kyndryl transition page */} \r\n                <Route path='/mui/IBMToKyndryl' component={IBM2Kyndryl} />    \r\n                {/* SA Index Channel page */}\r\n                <Route path='/mui/indexChannels'  component={()=><SuperAdminIndexChannel/>}  />\r\n                {/* SA Add Index Channel page */}\r\n                <Route path='/mui/addIndexChannel'  component={()=><SAAddIndexChannel/>}  />         \r\n                {/* SA Global Assignments page */}\r\n                <Route path='/mui/globalAssignments'  component={()=><SAGlobalAssignments/>}  />\r\n                {/* SA Add Global Assignments page */}\r\n                <Route path='/mui/addGlobalAssignments'  component={()=><SAAddGlobalAssignments/>}  />         \r\n                {/* SA Feature page */}\r\n                <Route path='/mui/features'  component={()=><SAFeatureMain/>}  />\r\n                {/* SA Feature page */}\r\n                <Route path='/mui/paFeatures'  component={PAFeatureMain} exact  />\r\n                {/* SA Add Feature page */}\r\n                <Route path='/mui/addFeature'  component={()=><SAAddFeature/>}  />      \r\n                {/* Daily Reports Home page */}\r\n                <Route path='/mui/dailyReporting'  component={()=><DRHome/>}  />     \r\n                <Route path='/mui/addFeature'  component={()=><SAAddFeature/>}  />  \r\n                 {/* Service Key Page */}\r\n                <Route path='/mui/services' component={Services} />  \r\n                {/* Service Key Page */}           \r\n                <Route path='/mui/service-keys' component={ServiceKeys} /> \r\n                {/* Add Services Page */}            \r\n                <Route path='/mui/add-service' component={AddService} />   \r\n                 {/* Add Key Page */}            \r\n                <Route path='/mui/add-serviceKey' component={AddKey} />\r\n                <Route path='/mui/cr-approval-followup' component={FollowUpApproval} /> \r\n                <Route path='/mui/extract-team-ids' component={ExtractTeamIds} /> \r\n                \r\n                <Route path='/mui/groups' component={GroupsHome} exact />       \r\n                 {/* Groups Detail Page */}            \r\n                 <Route path='/mui/groups/groupdetails/:id' component={GroupDetails}/>       \r\n                 {/* Add Group Page */}            \r\n                 <Route path='/mui/groups/create' component={CreateGroup}/> \r\n                <Route path='/mui/ansibleInstance'  component={()=><SAAnsibleInstances/>}  />   \r\n                <Route path='/mui/addAnsibleIntances'  component={()=><SAAddAnsibleInstances/>}  />         \r\n                <Route path='/mui/servicemanager'  component={()=><ServiceManagerHome/>}  exact/>         \r\n                <Route path='/mui/servicemanager/create/:accountId'  component={CreateSMRules}  />         \r\n                <Route path='/mui/servicemanager/editRule/:accountId'  component={EditSMRules}  />         \r\n                <Route path='/mui/servicemanager/incidentParamSettings/:accountId'  component={IncidentParamSettings}  />         \r\n\r\n                 {/* Requester Form page */}\r\n                 {/* <Route path='/mui/teamit/requester'  component={()=><ReqHome/>}  />  */}\r\n                 {/* <Route path='/mui/teamit/editReqDetails' component={()=><ReqHome/>} />    */}\r\n                 {/* Volunteer Form page */}\r\n                 {/* <Route path='/mui/teamit/volunteer'  component={()=><VolunteerHome/>}  />     */}\r\n                 {/* Admin page */}\r\n                 <Route path='/mui/teamit/admin'  component={()=><AdminHome/>}  />    \r\n                  <Route path='/mui/webhooks/:id' component={()=><WebhooksHome/>} /> \r\n                  <Route path='/mui/addWebhook/:id' component={()=><WebhookForm/>} /> \r\n                 {/* <Route path='/mui/teamit/admin'  component={()=><AdminHome/>}  />     */}\r\n            </Switch>\r\n       </BrowserRouter>\r\n       </React.Suspense>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default App;\r\n  ","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\serviceWorker.js",[],"C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\LoadingSpinner.jsx",[],"C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\OnboardAccount.js",["580"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport DataTable from './common/table/table';\r\nimport { Breadcrumb, BreadcrumbItem } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass OnboardAccount extends React.Component {\r\n    \r\n  render() {\r\n    return (\r\n        <div className=\"divContainer\">\r\n            <div className=\"headerDiv sectionMargin  mainMargin\">\r\n                <Breadcrumb>\r\n                    <BreadcrumbItem>\r\n                        <Link to=\"/mui/home\">Home</Link>\r\n                    </BreadcrumbItem>\r\n                    <BreadcrumbItem isCurrentPage>\r\n                        <Link to=\"/mui/onboardAccount\">Accounts</Link>\r\n                    </BreadcrumbItem>\r\n                </Breadcrumb>\r\n                <h2 className=\"headerText\">Accounts</h2>\r\n            </div>\r\n            <section className=\"sectionMargin mainMargin\">\r\n                <DataTable />\r\n            </section>\r\n            \r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default OnboardAccount;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\AddAccount.js",["581","582"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport DataTablePA from './common/table/TablePA';\r\nimport { Breadcrumb, BreadcrumbItem, Button } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass OnboardAccount extends React.Component {\r\n    \r\n  render() {\r\n    return (\r\n        <div className=\"divContainer\">\r\n            <div className=\"headerDiv sectionMargin  mainMargin\">\r\n                <div>\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem>\r\n                            <Link to=\"/mui/home\">Home</Link>\r\n                        </BreadcrumbItem>\r\n                        <BreadcrumbItem isCurrentPage>\r\n                            <Link to=\"/mui/addAccount\">Accounts</Link>\r\n                        </BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                </div>\r\n                <h2 className=\"headerText\">Accounts</h2>\r\n            </div>\r\n            <section className=\"sectionMargin mainMargin paddingCostom\">\r\n                <div className=\"addBtnPADiv\">\r\n                {/* <Button href=\"/mui/OnboardAccountPA\" className=\"addAccBtn\" style={{float: \"right\"}} href=\"/mui/addAccountDetails\">Add Account</Button> */}\r\n                </div>\r\n                <DataTablePA />\r\n            </section>\r\n            \r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default OnboardAccount;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\OnboardAccountPA.js",["583"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport AddAccountForm from './forms/addAccount';\r\nimport { Breadcrumb, BreadcrumbItem } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass AddAccount extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"divContainer\">\r\n                <div className=\"headerDiv sectionMargin  mainMargin\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem>\r\n                            <Link to=\"/mui/home\">Home</Link>\r\n                        </BreadcrumbItem>\r\n                        <BreadcrumbItem>\r\n                            <Link to=\"/mui/addAccount\">Accounts</Link>\r\n                        </BreadcrumbItem>\r\n                        <BreadcrumbItem isCurrentPage>\r\n                            <Link to=\"/mui/addAccountDetails\">Add Accounts</Link>\r\n                        </BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <h2 className=\"headerText\">Add Accounts Details</h2>\r\n                </div>\r\n                <section className=\"sectionMargin mainMargin paddingCostom\">\r\n                    <AddAccountForm />\r\n                </section>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default AddAccount;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SubscribeToMaintenanceSchedule.js",[],"C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\Home.js",["584","585"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport MySVG from './Icon';\r\nclass Landing extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n      }\r\n  render() {\r\n    return (\r\n        <div className=\"divContainer\">\r\n            {/* <UIHeader /> */}\r\n            <section className=\"sectionBanner\">\r\n                <div className=\"bannerDiv\">\r\n                    <h1 className=\"bannerTitleMain\">Welcome to ChatOps Management</h1>\r\n                    <p className=\"bannerTitlePara\">Get started with ChatOps to connect account systems and collaborate account teams to improve service management process and efficiency</p>\r\n                </div>\r\n            </section>\r\n            <section className=\"benefitSection sectionMargin\">\r\n                <div className=\"benefitMain\">\r\n                    <div className=\"benefitEachMain\"><h3>Benefits</h3></div>\r\n                    <div className=\"benefitEachMain1\">\r\n                        <div className=\"benifitDiv\">\r\n                            <div className=\"benefitEach\">\r\n                                <img src={MySVG.benefit1} alt=\"\"/>\r\n                                <p className=\"benefiteachPara\">Integrates chat platform with systems and sub-systems creating a single POV for everything.</p>\r\n                            </div>\r\n                            <div className=\"benefitEach\">\r\n                                <img src={MySVG.benefit2} alt=\"\"/>\r\n                                <p className=\"benefiteachPara\">Recommend courses of action and resolution techniques to the technical teams.</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"benifitDiv\">\r\n                            <div className=\"benefitEach\">\r\n                                <img src={MySVG.benefit3} alt=\"\"/>\r\n                                <p className=\"benefiteachPara\">Single access point for stake holders and technical team on management issues.</p>\r\n                            </div>\r\n                            <div className=\"benefitEach\">\r\n                                <img src={MySVG.benefit4} alt=\"\"/>\r\n                                <p className=\"benefiteachPara\">Migrates or eliminates motion and waiting waste types of service management processes.</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section className=\"helpSection sectionMargin\">\r\n                <div className=\"benefitMain\">\r\n                    <div className=\"benefitEachMain\"><h3>ChatOps Help</h3></div>\r\n                    <div className=\"benefitEachMain1\">\r\n                        <div className=\"benifitDiv helpDiv\">\r\n                            <div className=\"benefitEach\">\r\n                                <p className=\"benefiteachPara helpText\">For questions related to Account Onboarding, please reach out to</p>\r\n                                <p className=\"benefiteachPara nameStyle\">Robin Perrino</p>\r\n                                <p className=\"benefiteachPara emailStyle\">Robin.Perrino@kyndryl.com</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"benifitDiv helpDiv\">\r\n                            <div className=\"benefitEach\">\r\n                                <p className=\"benefiteachPara helpText\">For questions related to technical architecture, tool integration etc., please reach out to</p>\r\n                                <p className=\"benefiteachPara nameStyle\">Wesley Stevens</p>\r\n                                <p className=\"benefiteachPara emailStyle\">Wesley.Stevens@kyndryl.com</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default Landing;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\AAForm\\OnboardAccountAA.js",["586","587","588","589","590","591","592","593","594","595","596","597","598"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GeneralInfo from './GeneralInfo';\r\nimport MainForm from './MainForm';\r\nimport ConfigForm from './configInfoForm';\r\nimport AdditionalInfoForm from './additionalInfoForm';\r\nimport { Breadcrumb, BreadcrumbItem, OrderedList, ListItem, Form } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass OnboardAccountDetails extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            step:1\r\n        };\r\n    }\r\n    \r\n    nextStep = () => {\r\n        const { step } = this.state\r\n        this.setState({\r\n            step : step + 1\r\n        })\r\n    }\r\n\r\n    prevStep = () => {\r\n        const { step } = this.state\r\n        this.setState({\r\n            step : step - 1\r\n        })\r\n    }\r\n\r\n    changeForm = (n) => {\r\n        this.setState({\r\n            step: n\r\n        })\r\n    }\r\n\r\n    updateState = (key, value) => {\r\n        this.setState({\r\n            [key]: value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"divContainer\">\r\n            <div className=\"onboardMainDiv\">\r\n                <div className=\"sidebarDiv\">\r\n                    <div className=\"sidebarSubDiv\">\r\n                        <h5 className=\"h5Sidebar\" data-id=\"1\"  id=\"generalTab\" onClick={()=> {this.changeForm(1)}}><a className={this.state.step == 1 ? \"\" : \"primary\"}>General Information</a></h5>\r\n                        <h5 className=\"h5Sidebar\" data-id=\"2\" id=\"configTab\" onClick={()=> {this.changeForm(2)}}><a className={this.state.step == 2 ? \"\" : \"primary\"}>Configuration Information</a></h5>\r\n                        <h5 className=\"h5Sidebar\" data-id=\"3\" id=\"additionalTab\" onClick={()=> {this.changeForm(3)}}><a className={this.state.step == 3 ? \"\" : \"primary\"}>Additional Information</a></h5>\r\n                    </div>  \r\n                </div>\r\n                <div className=\"formDiv\">\r\n                    <div className=\"headerDiv headerDivSidebar sectionMargin  mainMargin\">\r\n                        <Breadcrumb>\r\n                            <BreadcrumbItem>\r\n                                <Link to=\"/mui/home\">Home</Link>\r\n                            </BreadcrumbItem>\r\n                            <BreadcrumbItem>\r\n                                <Link to=\"/mui/onboardAccount\">Accounts</Link>\r\n                            </BreadcrumbItem>\r\n                            <BreadcrumbItem isCurrentPage>\r\n                                <Link to=\"/mui/addAccountDetails\">Onboard Account</Link>\r\n                            </BreadcrumbItem>\r\n                        </Breadcrumb>\r\n                        <h4>Onboard {this.state.accName} | Account Code: {this.state.accCode}</h4>\r\n                    </div>  \r\n                    <section className=\"sectionMargin mainMargin paddingCostom customPaddAA overFlowAA\">\r\n                        <MainForm step={this.state.step} nextStep={this.nextStep} prevStep={this.prevStep} updateParent={this.updateState} />                       \r\n                    </section>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default OnboardAccountDetails;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ThanksPage.jsx",["599"],"import React from 'react';\r\nclass ThanksPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n      }\r\n  render() {\r\n    return (\r\n        <div className=\"divContainer\">\r\n            {/* <UIHeader /> */}\r\n            <section className=\"sectionBanner\">\r\n                <div className=\"bannerDiv\">\r\n                    <h1 className=\"bannerTitleMain\">Thank you..!!</h1>\r\n                    <p className=\"bannerTitlePara\">Request successfully Completed.</p>\r\n                    <p className=\"bannerTitlePara\">You may close the browser window now.</p>\r\n                </div>\r\n            </section>                                         \r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default ThanksPage;\r\n\r\n\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\WorkspaceTrack.jsx",["600","601","602","603","604","605","606","607","608","609","610","611"],"import React from 'react';\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  Select,\r\n  SelectItem,\r\n  Form,\r\n  FormGroup,\r\n  TextInput,\r\n  RadioButton,\r\n  TextArea,\r\n  RadioButtonGroup\r\n} from \"carbon-components-react\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { withRouter } from 'react-router-dom';\r\nclass WorkspaceTrack extends React.Component {\r\n  state = {\r\n    workspaceName: \"\",\r\n    email: \"\",\r\n    contractual_obligation: \"\",    \r\n    workspaceUrl: \"\",\r\n    others: \"\",\r\n    access_management: \"\",\r\n    others_reason: \"\",        \r\n    workspace_justification: \"\",\r\n    dpeOrExecutive: \"\",\r\n    workspaceData: { ownerSubmission: {} },\r\n    allWorkspaceData: [],\r\n    uniqWorkspaceNames: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    const search = this.props.location.search;\r\n    const recordId = new URLSearchParams(search).get(\"id\");\r\n    let payload;\r\n    if(recordId != undefined){\r\n      payload = JSON.stringify({id: recordId});\r\n    }else{\r\n      payload = \"\";\r\n    }\r\n      trackPromise(fetch('/mui/getWorkspaceData', {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Content-type': 'application/json'\r\n        },\r\n        body: payload\r\n      })\r\n      .then(res => {\r\n          return res.json()\r\n      })\r\n      .then(accData => {\r\n          if(recordId){\r\n            this.setState({ workspaceData: accData.WorkspaceData.responseHash[0] });               \r\n            this.setState({ email: accData.WorkspaceData.responseHash[0].email });               \r\n            this.setState({ workspaceName: accData.WorkspaceData.responseHash[0].workspaceName });               \r\n            this.setState({ others: accData.WorkspaceData.responseHash[0].ownerSubmission.others });   \r\n            this.setState({ uniqWorkspaceNames: [accData.WorkspaceData.responseHash[0].workspaceName] });    \r\n          }else{\r\n            this.setState({ uniqWorkspaceNames: accData.WorkspaceData.responseHash });               \r\n            this.setState({ email: accData.WorkspaceData.user });               \r\n          }\r\n      }))    \r\n  }\r\n  \r\n  checkWorkspaceDetails = (e) => {\r\n    let workSpaceName = document.getElementById(\"workspaceName\").value;\r\n    let emailVal = document.getElementById('email').value;\r\n    if(workSpaceName && emailVal){\r\n    trackPromise(fetch('/mui/getWorkspaceData', {\r\n      method: \"POST\",\r\n      headers: {\r\n          'Content-type': 'application/json'\r\n      },\r\n      body: JSON.stringify({email: emailVal.toLowerCase(), workspaceName: workSpaceName})\r\n    })\r\n    .then(res => {\r\n        return res.json()\r\n    })\r\n    .then(wrkSpaceData => {               \r\n      let workspaceObj = wrkSpaceData.WorkspaceData.responseHash[0];\r\n    \r\n      if(workspaceObj){                \r\n        if(workspaceObj.ownerSubmission.workspace_justification){\r\n          this.setState({ workspaceName: workspaceObj.workSpaceName });\r\n          this.setState({ email: workspaceObj.email });\r\n          this.setState({workspaceData: workspaceObj});\r\n          document.getElementById(\"submit-now\").disabled = true;\r\n        }else{\r\n          this.setState({ workspaceName: workspaceObj.workSpaceName });\r\n          this.setState({ email: workspaceObj.email });\r\n          this.setState({workspaceData: { ownerSubmission: {} }});\r\n          document.getElementById(\"submit-now\").disabled = false;\r\n          document.getElementById(\"contractual_obligation\").checked = false;      \r\n          document.getElementById(\"others\").checked = false;\r\n          document.getElementById(\"others_reason\").value = \"\";\r\n          document.getElementById(\"workspace_justification\").value = \"\";\r\n          document.getElementById(\"dpeOrExecutive\").value = \"\"; \r\n          document.getElementById(\"workspaceUrl\").value = \"\"; \r\n        }   \r\n      }else{\r\n        alert(\"Invalid workspace Name and email combination. Please recheck and enter again.\");\r\n        this.setState({workspaceData: { ownerSubmission: {} }});\r\n        document.getElementById(\"submit-now\").disabled = true;\r\n      }      \r\n    }))\r\n  }else{\r\n    alert(\"Please enter workspace Name and your email!\");\r\n    return;\r\n  }\r\n    \r\n  };\r\n\r\n  handleInputChange = (e) => {\r\n    this.setState({ workspaceName: e.target.value });\r\n  }\r\n\r\n  submitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.dpeOrExecutive === \"\" || this.state.workspace_justification === \"\") {\r\n      alert(\"All the fields are mandatory!\");\r\n      return;\r\n    }else{\r\n      let data = this.state;      \r\n      const search = this.props.location.search;\r\n      const recordId = new URLSearchParams(search).get(\"id\");\r\n      data.recordId = recordId;\r\n      let workSpaceName = document.getElementById(\"workspaceName\").value; \r\n      data.workspaceName = workSpaceName;\r\n      trackPromise(\r\n        fetch('/mui/saveWorspaceAdminAnswers' , {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n    .then((result) => {\r\n          if(result.status == 200){\r\n            console.log('saved');\r\n            this.props.history.push(\"/mui/thankyou\");\r\n        }\r\n   })\r\n    .catch(err => { \r\n      console.log(err);\r\n    })\r\n    )\r\n    }\r\n\r\n    \r\n  };\r\n\r\n  render() {   \r\n    let email, workspaceOptions, workSpaceName, ownerName, workspaceUrl, othersReason, contractOblig, accessMgmt, othersCheck, loggedInText, dpeOrExecutive, wrkSpaceJustification;\r\n    let headerText1 = \"A request for additional workspace requires significant business justification that includes contractual obligation or internal audit/CISO requirements for eDiscovery.\";\r\n    let headerText2 = \"Note that data migration is not included in the exception process and is only for the creation of the workspace in the Kyndryl grid.\";\r\n    let headerText3 = \"Note this does not include migration of the workspace data. This request is for having a dedicated workspace created in the Kyndryl Slack instance only.\";\r\n    if(this.state.workspaceData){\r\n      workSpaceName = this.state.workspaceData['workspaceName'];\r\n      email = this.state.workspaceData['email'];\r\n    }\r\n      if(this.state.uniqWorkspaceNames){\r\n      let worspacesData = this.state.uniqWorkspaceNames;\r\n    \r\n      workspaceOptions = [];\r\n      let workspaceNames = [];\r\n      if(worspacesData){\r\n        workspaceOptions.push((\r\n          <option\r\n            className=\"bx--select-option\"\r\n            defaultValue=\"\"           \r\n          >            \r\n          </option>\r\n        ))\r\n        for (var i = 0; i < worspacesData.length; i++) {                    \r\n          let data = worspacesData[i];\r\n          workspaceOptions.push((\r\n            <option\r\n              className=\"bx--select-option\"\r\n              defaultValue={data}\r\n              selected={data == this.state.workspaceName}\r\n            >\r\n              {data}\r\n            </option>\r\n          ))\r\n        } \r\n      }\r\n    }\r\n    \r\n    if(Object.keys(this.state.workspaceData.ownerSubmission).length > 0){\r\n      console.log(\"insdie submission entry\");\r\n      let ownerSubmission = this.state.workspaceData.ownerSubmission\r\n      contractOblig = ownerSubmission.contractual_obligation;      \r\n      othersCheck = ownerSubmission.others;      \r\n      dpeOrExecutive = ownerSubmission.dpeOrExecutive;      \r\n      workspaceUrl = ownerSubmission.workspaceUrl;      \r\n      wrkSpaceJustification = ownerSubmission.workspace_justification;      \r\n      othersReason = ownerSubmission.others_reason;      \r\n      document.getElementById(\"contractual_obligation\").checked = contractOblig;      \r\n      document.getElementById(\"others\").checked = !othersCheck ? false : othersCheck;\r\n      document.getElementById(\"others_reason\").value = othersReason;\r\n      document.getElementById(\"submit-now\").disabled = true;\r\n      document.getElementById(\"workspace_justification\").value = wrkSpaceJustification;\r\n      document.getElementById(\"dpeOrExecutive\").value = dpeOrExecutive; \r\n      document.getElementById(\"workspaceUrl\").value = workspaceUrl; \r\n      loggedInText = \"We see that you have already filled the details for this request, hence submit is not allowed.\"          \r\n    }\r\n    return (\r\n      <div className=\"divContainer\">      \r\n      <section className=\"sectionMargin mainMargin\">\r\n    <h3>Exception Request: </h3>    \r\n    <br/>\r\n        <Form className=\"formMain\" onSubmit={this.submitHandler}>\r\n        <div style={{color:' red'}}>{loggedInText}</div>\r\n        <br/>\r\n        <div>{headerText1}</div>\r\n        <br/>       \r\n        <div>{headerText2}</div>\r\n        <br/>       \r\n        <div>{headerText3}</div>\r\n        <br/>\r\n        <br/>\r\n          <div className=\"field\">            \r\n            \r\n            <Select\r\n              className=\"workspaceName\"\r\n              id=\"workspaceName\"\r\n              name=\"workspaceName\"\r\n              labelText={\r\n               <>\r\n                Select Workspace Name <b className=\"fontRed\">*</b>\r\n              </> }\r\n              onChange={(e) => this.checkWorkspaceDetails(e)} \r\n              required\r\n              > {workspaceOptions}\r\n            </Select>\r\n          </div>\r\n          <div className=\"field\">            \r\n            <TextInput\r\n              labelText=\"Owner Email\"              \r\n              name=\"workspaceOwnerEmail\"\r\n              id=\"email\"\r\n              placeholder=\"workspace Owner Email\"              \r\n              value={this.state.email}              \r\n              onChange={(e) => this.checkWorkspaceDetails(e)}\r\n            />\r\n          </div>\r\n          <div className=\"field\">            \r\n            <TextInput            \r\n              labelText=\"Supporting Executive (VP or higher): \"              \r\n              name=\"dpeOrExecutive\"\r\n              placeholder=\"Supporting Executive (VP or higher)\"\r\n              id=\"dpeOrExecutive\"\r\n              required              \r\n              value={dpeOrExecutive}\r\n              onBlur={(e) => this.setState({ dpeOrExecutive: e.target.value })}\r\n            />\r\n          </div>\r\n          <div className=\"field\">            \r\n            <TextInput            \r\n              labelText=\"Workspace URL: \"              \r\n              name=\"workspaceUrl\"\r\n              placeholder=\"Enter Workspace URL\"\r\n              id=\"workspaceUrl\"\r\n              required              \r\n              value={workspaceUrl}\r\n              onChange={(e) => this.setState({ workspaceUrl: e.target.value })}\r\n            />\r\n          </div>\r\n          <div className=\"field\">          \r\n            <Checkbox\r\n              labelText=\"Contractual Obligation\"\r\n              name=\"contractual_obligation\"\r\n              id=\"contractual_obligation\"\r\n              placeholder=\"Contractual Obligation\"\r\n              value={this.state.contractual_obligation}\r\n              defaultChecked={contractOblig}\r\n              onChange={(isChecked) => this.setState({ contractual_obligation: isChecked })}\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"field\">            \r\n            <Checkbox\r\n              labelText=\"Others\"              \r\n              name=\"others\"\r\n              id=\"others\"\r\n              value={this.state.others}\r\n              onChange={(isChecked) => this.setState({ others: isChecked })}\r\n            />\r\n          </div>\r\n          <div className=\"field\" style={{display: this.state.others ? 'block' : 'none'}}>            \r\n            <TextInput\r\n              labelText=\"Others Reason\"              \r\n              name=\"others_reason\"\r\n              id=\"others_reason\"\r\n              placeholder=\"Others Reason\"              \r\n              onChange={(e) => this.setState({ others_reason: e.target.value })}\r\n              value={othersReason}\r\n            />\r\n          </div>                    \r\n          <div className=\"field\">           \r\n            <TextArea\r\n                labelText={<>Justification (Include extract from contract for contractual obligation) <b style={{ color: \"red\" }}>*</b> <span className=\"specialCharacterLabel\">(Special characters &lt; &gt; # $ ^ & * \\ = {} ; \\\\ | ? ~ are not allowed)</span></>}\r\n              required\r\n              name=\"workspace_justification\"\r\n              id=\"workspace_justification\"\r\n              placeholder=\"Workspace Justification\"              \r\n              cols= \"50\"\r\n              rows= \"4\"\r\n              onChange={(e) => this.setState({ workspace_justification: e.target.value })}\r\n              value={wrkSpaceJustification}\r\n            />\r\n          </div>\r\n          <br></br><br></br>\r\n          \r\n          <Button type=\"submit\" className=\"submit-now\" id=\"submit-now\" onClick={this.submitHandler}>\r\n            Submit\r\n          </Button>\r\n       \r\n        </Form>\r\n      </section>\r\n      \r\n  </div>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(WorkspaceTrack);\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\IBM2Kyndryl.jsx",["612","613","614","615","616","617","618","619"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Button,Form, TextInput, FormGroup, TooltipDefinition  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { Information32 } from \"@carbon/icons-react\";\r\nimport { withRouter } from 'react-router-dom';\r\nclass IBM2Kyndryl extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = (\r\n            {\r\n                verifiedDataFetched:[],\r\n                emailID:'',\r\n                resErrMsg: '',\r\n                loggedInUser: '',\r\n                loggedInUserCheck: '',\r\n                emailIdUserChecked: '',\r\n                loggedInUserIbmId:'',\r\n                handleInput: false\r\n            }\r\n        );\r\n    }\r\n  render() {\r\n    return (\r\n        <div className=\"divContainer divContainerNoAccess\">\r\n            <section className=\"sectionBannerNoAccess\">\r\n                <div className=\"bannerDiv1\">\r\n                    <p className=\"bannerTitlePara2\">Thank you for using ChatOps Knight during the Kyndryl migration. This service is now sunset.</p>\r\n                    <p className=\"bannerTitlePara1\">You can find the Kyndryl homepage <a className=\"redirectLinkStyle\" href=\"https://w3.kyndryl.net/\">HERE</a>, or you can learn more about ChatOps Knight <a className=\"redirectLinkStyle\" href=\"https://w3.ibm.com/ocean/w3publisher/chatops\">HERE</a></p>\r\n                    <Information32 className=\"noaccessIcon\" />\r\n                </div>\r\n            </section>                                         \r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(IBM2Kyndryl);","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\NoAccess.jsx",["620"],"import React from 'react';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { Error32 } from \"@carbon/icons-react\";\r\nclass NoAccess extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    componentDidMount() {\r\n        trackPromise(\r\n            fetch('/mui/getUserData')\r\n            .then(res => {\r\n                return res.json()\r\n            })\r\n            .then(loggedInUser => { \r\n                this.setState({ loggedInUser })\r\n                this.setState({emailID:this.state?.loggedInUser?.loggedIn})\r\n            })\r\n            .then((result) => {\r\n            })\r\n        )\r\n    }\r\n  render() {\r\n      var loggedInUser = this.state?.emailID;\r\n    return (\r\n        <div className=\"divContainer divContainerNoAccess\">\r\n            {/* <UIHeader /> */}\r\n            <section className=\"sectionBannerNoAccess\">\r\n                <div className=\"bannerDiv\">\r\n                    <h1 className=\"bannerTitleMain1\">403</h1>\r\n                    <p className=\"bannerTitlePara1\">{loggedInUser}</p>\r\n                    <p className=\"bannerTitlePara2\">ACCESS NOT GRANTED</p>\r\n                    <Error32 className=\"noaccessIcon\" />\r\n                </div>\r\n            </section>                                         \r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default NoAccess;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\EventStreams.jsx",["621","622","623","624","625","626","627","628","629","630","631"],"import {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  Button,\r\n  Checkbox,\r\n  Column,\r\n  ComposedModal,\r\n  Grid,\r\n  ModalBody,\r\n  Row,\r\n  Tag,\r\n} from \"carbon-components-react\";\r\nimport React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./APIKeys.scss\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\n// import APIKeyForm from \"./ApiKeyForm\";\r\nimport EventStreamApiKey from \"./EventStreamApiKey\";\r\nimport { Link } from \"react-router-dom\";\r\nclass EventStreams extends Component {\r\n  state = {\r\n    allowApi: true,\r\n    navigate: \"list\", // enums[list, eventStream, keyForm]\r\n    modalData: {},\r\n    modalOpen: false,\r\n    EventStreamAPIData: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    trackPromise(this.getEventStream());\r\n    trackPromise(this.getAndSaveKeys());\r\n  }\r\n\r\n  getAndSaveKeys = async () => {\r\n    // Save keys and all data in state\r\n    const res = await fetch(\r\n      `/mui/APIKeys/${this.props.match.params.id}`\r\n    );\r\n    const { retrievedData } = await res.json();\r\n    this.setState({\r\n      ...retrievedData,\r\n    });\r\n  };\r\n\r\n  handleCheckbox(name, event) {\r\n    this.setState({\r\n        [event.target.name]: event.target.checked,\r\n      });\r\n      const saveAuthData = {\r\n        allowApi: event.target.checked,\r\n        acc_id: this.props.match.params.id\r\n\r\n      };\r\n\r\n      trackPromise( fetch(\"/mui/saveAuth\",\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n                \"Content-type\": \"application/json\",\r\n              },\r\n        body: JSON.stringify(saveAuthData),\r\n      }).then(async (result) => {\r\n            if (result.status == 200) {\r\n              const { retrievedData } = await result.json();\r\n               this.setState({\r\n                ...retrievedData,\r\n              });\r\n            }\r\n      })\r\n       \r\n      );\r\n  \r\n      \r\n  };\r\n\r\n  getEventStream = async () => {  \r\n    const accId = window.location.pathname.split(\"/\")[3];     \r\n    let res = fetch(`/mui/fetchEventStreamsKey?id=` + accId);\r\n\r\n    try {\r\n      trackPromise(res);\r\n      res = await res;\r\n      const { EventStreamAPIData } = await res.json();\r\n      if(EventStreamAPIData){\r\n        this.setState({\r\n          navigate: \"eventStream\",\r\n          EventStreamAPIData,\r\n        });\r\n      }else{\r\n        this.setState({\r\n          navigate: \"eventStream\"          \r\n        });\r\n      }      \r\n    } catch (e) {\r\n      this.setState({\r\n        navigate: \"eventStream\"          \r\n      });\r\n    }\r\n  };\r\n\r\n  handleFormClose = () => {\r\n    this.setState({\r\n      navigate: \"list\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { allowApi, navigate } = this.state;\r\n    let accountCode, accountName;\r\n    if(this.state.EventStreamAPIData){\r\n      accountCode = this.state.EventStreamAPIData.accountData.accountCode;\r\n      accountName = this.state.EventStreamAPIData.accountData.accountName;\r\n    }\r\n    return (\r\n      <div className=\"divContainer\">\r\n        <div className=\"headerDiv sectionMargin  mainMargin\">\r\n          <Breadcrumb>\r\n            <BreadcrumbItem>\r\n              <Link to=\"/mui/home\">Home</Link>\r\n            </BreadcrumbItem>\r\n            <BreadcrumbItem>\r\n              <Link to=\"/mui/onboardAccount\">Accounts</Link>\r\n            </BreadcrumbItem>\r\n            <BreadcrumbItem isCurrentPage>\r\n              <Link to=\"/mui/api-keys\">Event Stream</Link>\r\n            </BreadcrumbItem>\r\n          </Breadcrumb>\r\n          <h2 className=\"headerText\">Event Stream</h2>\r\n          <h4 className=\"headerText\">\r\n            <b className=\"mx-5\">Account Code: {accountCode}</b>\r\n            <b className=\"mx-5\">Account Name: {accountName}</b>\r\n          </h4>\r\n        </div>\r\n        <section>\r\n          <Grid>           \r\n            {navigate == \"eventStream\" ? (\r\n              <EventStreamApiKey stream={this.state.EventStreamAPIData} />\r\n            ) : \"\"}\r\n          </Grid>\r\n        </section>        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventStreams;\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ApiKeys.jsx",["632","633","634","635","636"],"import {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  Button,\r\n  Checkbox,\r\n  Column,\r\n  ComposedModal,\r\n  Grid,\r\n  ModalBody,\r\n  Row,\r\n  Tag,\r\n} from \"carbon-components-react\";\r\nimport React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./APIKeys.scss\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport Key from \"./Key\";\r\nimport APIKeyForm from \"./ApiKeyForm\";\r\nimport EventStreamApiKey from \"./EventStreamApiKey\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass APIKeys extends Component {\r\n  state = {\r\n    allowApi: true,\r\n    navigate: \"list\", // enums[list, eventStream, keyForm]\r\n    modalData: {},\r\n    modalOpen: false,\r\n  };\r\n  componentDidMount() {\r\n    trackPromise(this.getAndSaveKeys());\r\n  }\r\n\r\n\r\n  handleCheckbox(name, event) {\r\n    this.setState({\r\n        [event.target.name]: event.target.checked,\r\n      });\r\n      const saveAuthData = {\r\n        allowApi: event.target.checked,\r\n        acc_id: this.props.match.params.id\r\n\r\n      };\r\n\r\n      trackPromise( fetch(\"/mui/saveAuth\",\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n                \"Content-type\": \"application/json\",\r\n              },\r\n        body: JSON.stringify(saveAuthData),\r\n      }).then(async (result) => {\r\n            if (result.status == 200) {\r\n              const { retrievedData } = await result.json();\r\n               this.setState({\r\n                ...retrievedData,\r\n              });\r\n            }\r\n      })\r\n       \r\n      );\r\n  \r\n      \r\n  };\r\n\r\n  getAndSaveKeys = async () => {\r\n    // Save keys and all data in state\r\n    const res = await fetch(\r\n      `/mui/APIKeys/${this.props.match.params.id}`\r\n    );\r\n    const { retrievedData } = await res.json();\r\n    this.setState({\r\n      ...retrievedData,\r\n    });\r\n  };\r\n\r\n  afterAddingNewKey = () => {\r\n    trackPromise(this.getAndSaveKeys());\r\n    this.handleFormClose();\r\n  };\r\n\r\n  handleFormClose = async () => {\r\n    this.setState({\r\n      navigate: \"list\",\r\n    });\r\n    const res = await fetch(\r\n        `/mui/APIKeys/${this.props.match.params.id}`\r\n      );\r\n      const { retrievedData } = await res.json();\r\n      this.setState({\r\n        ...retrievedData,\r\n      });\r\n    // trackPromise(this.getAndSaveKeys());\r\n\r\n  };\r\n\r\n  getKeyInfo = async (index) => {\r\n    const { appKeys } = this.state;\r\n    this.setState({\r\n      modalData: appKeys[index],\r\n      modalOpen: true,\r\n    });\r\n  };\r\n\r\n  reGenerateKey = async (keyValue, index) => {\r\n    const { appKeys } = this.state;\r\n    appKeys[index].keyValue = keyValue;\r\n\r\n    this.setState({\r\n      appKeys: appKeys,\r\n    });\r\n  };\r\n\r\n  deleteKey = async (keyName) => {\r\n    const { accountCode } = this.state;\r\n    const payload = {\r\n      accCode: accountCode,\r\n      keyName: keyName,\r\n    };\r\n\r\n    try {\r\n      var res = fetch(\"/mui/deleteCKKey\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      trackPromise(res);\r\n\r\n      res = await res;\r\n\r\n      if (res.status == 200) trackPromise(this.getAndSaveKeys());\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { allowApi, navigate } = this.state;\r\n    return (\r\n      <div className=\"divContainer\">\r\n        <div className=\"headerDiv sectionMargin  mainMargin\">\r\n          <Breadcrumb>\r\n            <BreadcrumbItem>\r\n              <Link to=\"/mui/home\">Home</Link>\r\n            </BreadcrumbItem>\r\n            <BreadcrumbItem>\r\n              <Link to=\"/mui/onboardAccount\">Accounts</Link>\r\n            </BreadcrumbItem>\r\n            <BreadcrumbItem isCurrentPage>\r\n              <Link to=\"/mui/api-keys\">API Keys</Link>\r\n            </BreadcrumbItem>\r\n          </Breadcrumb>\r\n          <h2 className=\"headerText\">API Keys</h2>\r\n          <h4 className=\"headerText\">\r\n            <b className=\"mx-5\">Account Code: {this.state.accountCode}</b>\r\n            <b className=\"mx-5\">Account Name: {this.state.accountName}</b>\r\n          </h4>\r\n        </div>\r\n        <section>\r\n\r\n          <Grid>\r\n            <Row>\r\n                <Column>\r\n                    <Button className=\"mx-2 apiKeyBtn\" onClick={() => this.setState({ navigate: \"keyForm\" })} >\r\n                        Generate API Key\r\n                    </Button>                      \r\n                </Column>\r\n            </Row>\r\n            \r\n            {navigate == \"eventStream\" ? (\r\n              <EventStreamApiKey stream={this.state.EventStreamAPIData} />\r\n            ) : (\r\n              allowApi &&\r\n              (navigate == \"keyForm\" ? (\r\n                <APIKeyForm\r\n                  accountCode={this.state.accountCode}\r\n                  onClose={this.handleFormClose}\r\n                  onSubmit={this.afterAddingNewKey}\r\n                />\r\n              ) : (\r\n                this.state.appKeys &&\r\n                this.state.appKeys.map((keyObj, index) => (\r\n                  <div className=\"my-2\" key={index}>\r\n                    <Key\r\n                      accountCode={this.state.accountCode}\r\n                      keyObj={keyObj}\r\n                      keyValue={keyObj.keyValue}\r\n                      onRegenerateKey={(newKey) =>\r\n                        this.reGenerateKey(newKey, index)\r\n                      }\r\n                      getInfo={() => this.getKeyInfo(index)}\r\n                      onDelete={() => this.deleteKey(keyObj.keyName)}\r\n                    />\r\n                  </div>\r\n                ))\r\n              ))\r\n            )}\r\n          </Grid>\r\n        </section>\r\n        {typeof document === \"undefined\"\r\n          ? null\r\n          : ReactDOM.createPortal(\r\n              <ComposedModal\r\n                open={this.state.modalOpen}\r\n                onClose={() => this.setState({ modalOpen: false })}\r\n              >\r\n                <ModalBody className=\"my-2\" hasScrollingContent={true}>\r\n                  <div>\r\n                    <p>Issued To:</p>\r\n                    <Tag>{this.state.modalData.issue_to}</Tag>\r\n                  </div>\r\n                  <br />\r\n                  <div>\r\n                    <p>Issued By:</p>\r\n                    <Tag>{this.state.modalData.issue_from}</Tag>\r\n                  </div>\r\n                  <br />\r\n                  <div>\r\n                    <p>Selected Scopes:</p>\r\n                    {this.state.modalData.scopes &&\r\n                      this.state.modalData.scopes.map((scope) => (\r\n                        <Tag key={scope}>{scope}</Tag>\r\n                      ))}\r\n                  </div>\r\n                </ModalBody>\r\n              </ComposedModal>,\r\n              document.body\r\n            )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default APIKeys;\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\AccountSettings.jsx",["637","638","639","640","641","642","643","644","645"],"import {\r\n    Breadcrumb,\r\n    BreadcrumbItem,\r\n    Button,\r\n    Checkbox,\r\n    Column,\r\n    ComposedModal,\r\n    Grid,\r\n    ModalBody,\r\n    Row,\r\n    Tag,\r\n  } from \"carbon-components-react\";\r\n  import React, { Component } from \"react\";\r\n  import ReactDOM from \"react-dom\";\r\n  import \"./APIKeys.scss\";\r\n  import { trackPromise } from \"react-promise-tracker\";\r\n  import ButtonSettings from \"./ButtonSettings\";\r\n  import APIKeyForm from \"./ApiKeyForm\";\r\n  import EventStreamApiKey from \"./EventStreamApiKey\";\r\n  import { Link } from \"react-router-dom\";\r\n  \r\n  class AccountSettings extends Component {\r\n    state = {\r\n      allowApi: true,\r\n      navigate: \"list\", // enums[list, eventStream, keyForm]\r\n      modalData: {},\r\n      modalOpen: false,\r\n    };\r\n    componentDidMount() {\r\n      trackPromise(this.getAndSaveKeys());\r\n    }\r\n  \r\n  \r\n    handleCheckbox(name, event) {\r\n      this.setState({\r\n          [event.target.name]: event.target.checked,\r\n        });\r\n        const saveAuthData = {\r\n          allowApi: event.target.checked,\r\n          acc_id: this.props.match.params.id\r\n  \r\n        };\r\n  \r\n        trackPromise( fetch(\"/mui/saveAuth\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n                  \"Content-type\": \"application/json\",\r\n                },\r\n          body: JSON.stringify(saveAuthData),\r\n        }).then(async (result) => {\r\n              if (result.status == 200) {\r\n                const { retrievedData } = await result.json();\r\n                 this.setState({\r\n                  ...retrievedData,\r\n                });\r\n              }\r\n        })\r\n         \r\n        );\r\n    \r\n        \r\n    };\r\n  \r\n    getAndSaveKeys = async () => {\r\n      // Save keys and all data in state\r\n      const res = await fetch(\r\n        `/mui/APIKeys/${this.props.match.params.id}`\r\n      );\r\n      const { retrievedData } = await res.json();\r\n      console.log(`retrievedData----${JSON.stringify(retrievedData)}`);\r\n      this.setState({\r\n        ...retrievedData,\r\n      });\r\n    };\r\n  \r\n    render() {\r\n      const { allowApi, navigate, itsmMSEnabled, commentsEnabled, statusEnabled, enableOwner, toolInitiateComment } = this.state;\r\n      return (\r\n        <div className=\"divContainer\">\r\n          <div className=\"headerDiv sectionMargin  mainMargin\">\r\n            <Breadcrumb>\r\n              <BreadcrumbItem>\r\n                <Link to=\"/mui/home\">Home</Link>\r\n              </BreadcrumbItem>\r\n              <BreadcrumbItem>\r\n                <Link to=\"/mui/onboardAccount\">Accounts</Link>\r\n              </BreadcrumbItem>\r\n              <BreadcrumbItem isCurrentPage>\r\n                <Link to=\"/mui/api-keys\">Account Settings</Link>\r\n              </BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <h2 className=\"headerText\">Account Settings</h2>\r\n            <h4 className=\"headerText\">\r\n              <b className=\"mx-5\">Account Code: {this.state.accountCode}</b>\r\n              <b className=\"mx-5\">Account Name: {this.state.accountName}</b>\r\n            </h4>\r\n          </div>\r\n          <section>\r\n  \r\n            <Grid>\r\n              \r\n              {itsmMSEnabled ? <ButtonSettings\r\n                        accountCode={this.state.accountCode}\r\n                        itsmMSEnabled={this.state.itsmMSEnabled}\r\n                        updateStatus={statusEnabled ? statusEnabled : \"enabled\"}\r\n                        addComment={commentsEnabled ? commentsEnabled : false}\r\n                        enableOwner={enableOwner ? enableOwner : \"\"}\r\n                        toolInitiateComment={toolInitiateComment ? toolInitiateComment : false}\r\n                        accId={this.state._id}\r\n                      /> : ''}\r\n                    \r\n            </Grid>\r\n          </section>\r\n          {typeof document === \"undefined\"\r\n            ? null\r\n            : ReactDOM.createPortal(\r\n                <ComposedModal\r\n                  open={this.state.modalOpen}\r\n                  onClose={() => this.setState({ modalOpen: false })}\r\n                >\r\n                  <ModalBody className=\"my-2\" hasScrollingContent={true}>\r\n                    <div>\r\n                      <p>Issued To:</p>\r\n                      <Tag>{this.state.modalData.issue_to}</Tag>\r\n                    </div>\r\n                    <br />\r\n                    <div>\r\n                      <p>Issued By:</p>\r\n                      <Tag>{this.state.modalData.issue_from}</Tag>\r\n                    </div>\r\n                    <br />\r\n                    <div>\r\n                      <p>Selected Scopes:</p>\r\n                      {this.state.modalData.scopes &&\r\n                        this.state.modalData.scopes.map((scope) => (\r\n                          <Tag key={scope}>{scope}</Tag>\r\n                        ))}\r\n                    </div>\r\n                  </ModalBody>\r\n                </ComposedModal>,\r\n                document.body\r\n              )}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default AccountSettings;\r\n  ","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SuperAdminHome.jsx",["646","647","648","649"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\nimport SABreadCrump from './SABreadCrump'\r\nimport SAHome from './SAHome'\r\nimport SALandingSidebar from './SALandingSidebar'\r\nclass SuperAdminHome extends React.Component {\r\n    \r\n  render() {\r\n    return (\r\n        <div className=\"divContainer\">\r\n            <section className=\"sectionGrid\">\r\n                <div class=\"bx--grid padding0\">\r\n                    <div class=\"rowWidth\">\r\n                        <div class=\"gridColulmnWidth3\">\r\n                            <SALandingSidebar />\r\n                        </div>\r\n                        <div class=\"gridColumn13\" style={{maxWidth: '20% !important', paddingRight: '0 !important'}}>\r\n                            <SABreadCrump />\r\n                            <SAHome />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            \r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default SuperAdminHome;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\commandRegistration\\AddCommandRegistration.jsx",["650","651","652","653","654","655","656","657","658","659","660","661","662","663","664","665","666","667","668","669","670","671","672","673","674","675","676","677","678","679","680","681","682","683","684","685"],"// AddCommandRegistration.jsx >>> WORKING WITH JUST ADDD DELETE\r\nimport React, { Component } from 'react';\r\nimport { throws } from 'assert';\r\nimport {\r\n    Modal,\r\n    Button,\r\n    Checkbox,\r\n    Column,\r\n    FormGroup,\r\n    Grid,\r\n    Row,\r\n    Select,\r\n    SelectItem,\r\n    TextInput,\r\n    Form,\r\n    ModalWrapper,\r\n    Breadcrumb,\r\n    BreadcrumbItem\r\n  } from \"carbon-components-react\";\r\n//   import React, { Component } from \"react\";\r\n  import \"../forms/form.scss\";\r\n  import { AddAlt32  } from \"@carbon/icons-react\";\r\n  import { TrashCan32   } from \"@carbon/icons-react\";\r\n  import { Close32 } from \"@carbon/icons-react\";\r\n  import { trackPromise } from \"react-promise-tracker\";\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { validate } from '../../validation/validate.js';\r\nclass AddCommandRegistration extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            AccData: [],\r\n            cmdData: [],\r\n            addField: [{added:false, fValue:''}],\r\n            cmdVal: {},\r\n        };\r\n        this.formSubmit = this.formSubmit.bind(this);\r\n    }\r\n\r\n    addParams = () => {\r\n        const {addField} = this.state\r\n        const {isEdit} = this.state\r\n        addField.push({added:true, fValue:''})\r\n        this.setState({\r\n          addField\r\n        })\r\n        \r\n    }\r\n\r\n    deleteParams = (id) => {\r\n        var paramId = JSON.stringify(id),\r\n            matches = paramId.match(/\\d+$/),\r\n            index;\r\n\r\n        if (matches) {\r\n            index = matches[0];\r\n        }\r\n        // var index = number\r\n        const {addField} = this.state\r\n\r\n      if( (addField.deleted || 0) >= addField.length - 1) return\r\n      addField[index] = {added:false, fValue:''}\r\n      addField.deleted = addField.deleted + 1 || 1\r\n      this.setState({\r\n        addField\r\n      })\r\n    \r\n    }\r\n\r\n    handleInputChange = e => {\r\n        if(e.target.name === 'groupName' && e.target.value && e.target.value.match(/[!<>#%]/)) {\r\n            this.setState({\r\n                ['inValid_' + e.target.name]: 'Value should not contain !<>#% Characters.'\r\n            })\r\n            return \r\n        }else{\r\n            this.setState({\r\n                [e.target.name]: e.target.value,\r\n            }); \r\n        }\r\n        this.setState({\r\n            ['inValid_' + e.target.name]: undefined\r\n        }) \r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n        \r\n    }\r\n\r\n    updateValue = e => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n    componentDidMount() {\r\n        trackPromise(\r\n            fetch('/mui/fetchCommandRegistered')\r\n            .then(res => {\r\n                return res.json()\r\n            })\r\n            .then(cmdData => { \r\n                if(cmdData && !cmdData.commandData)\r\n                        this.addParams()\r\n\r\n                this.setState({ cmdData })\r\n                \r\n            })\r\n            \r\n        )\r\n\r\n    }\r\n    formSubmit= (e) => {\r\n        e.preventDefault();\r\n\r\n        var paramsData=[];\r\n        var params={};\r\n        var retrievedData = ''\r\n        var cmdDataToPassState =this.state\r\n        var accDataFetch = cmdDataToPassState.cmdData ;\r\n        var accDetails = accDataFetch.accountData\r\n        var accCode = accDetails.accCode;\r\n        var accName = accDetails.accName;\r\n        var accID = accDetails._id;\r\n        \r\n        if(cmdDataToPassState.cmdData){\r\n            var accData = cmdDataToPassState.cmdData.accountData;\r\n            var accId = accData._id \r\n            var cmdToedit = cmdDataToPassState.cmdData;\r\n            if(cmdToedit.commandData){\r\n                var cmdToeditData = cmdToedit.commandData;\r\n                var retrievedData = cmdToeditData\r\n            }\r\n        }\r\n        \r\n        var paramObj = {};\r\n        var paramsData =[];\r\n        var paramsDataSequence =[];\r\n        \r\n\r\n        // ****Filter all Param keys and respective value from state****\r\n        if(cmdDataToPassState){\r\n            var filteredParamsFromState = Object.keys(cmdDataToPassState).filter(function(k) {\r\n                return k.indexOf('params') == 0;\r\n            }).reduce(function(newData, k) {\r\n                newData[k] = cmdDataToPassState[k];\r\n                return newData;\r\n            }, {});\r\n            \r\n        }\r\n        var retrievedParamSequence = {}\r\n        if(retrievedData){\r\n            if(Object.keys(retrievedData.paramSequence).length != 0 ){\r\n                retrievedParamSequence = retrievedData.paramSequence;\r\n            }\r\n        }\r\n        \r\n        var submittedSequence = {}\r\n        if(filteredParamsFromState){\r\n            if(Object.keys(filteredParamsFromState).length != 0 ){\r\n                submittedSequence = filteredParamsFromState;\r\n            }\r\n\r\n        }\r\n        \r\n        paramObj[\"param\"] = paramsData;\r\n        var groupName = '';\r\n        if(this.state.groupName == '' || (this.state[\"groupName\"] == undefined)){\r\n            groupName = undefined\r\n        }else{\r\n            groupName = this.state.groupName\r\n        }\r\n        var cmdDataToPass = {\r\n            accID: accID,\r\n            accCode: accCode,\r\n            accName:accName,\r\n            command: this.state.comand || retrievedData.command,\r\n            group: groupName || retrievedData.group,\r\n            paramSequence: {}\r\n        }\r\n        if( Object.keys(submittedSequence).length != 0){\r\n            Object.entries(submittedSequence).map(([key, value]) => {\r\n                if(Object.keys(retrievedParamSequence).length != 0 ){\r\n                    retrievedParamSequence[key] = value\r\n                }else{\r\n                    retrievedParamSequence = submittedSequence\r\n                }\r\n            });\r\n\r\n            cmdDataToPass[\"paramSequence\"] = retrievedParamSequence\r\n\r\n        }else{\r\n            cmdDataToPass[\"paramSequence\"] = retrievedParamSequence\r\n        } \r\n        \r\n        var redirect_url = \"/mui/commandRegistraton?\"+accId;\r\n        // SpecialCharacter validation\r\n        var validateFields = validate(cmdDataToPass);\r\n        if(validateFields.length > 0){\r\n            var message = \"\";\r\n            for(var i =0; i<validateFields.length; i++){\r\n                var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n                if(element){\r\n                    message += element.title + \", \";\r\n                }else{\r\n                    message += validateFields[i] + \", \"\r\n                }\r\n            }\r\n            this.setState({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n        }else{\r\n            trackPromise(\r\n                fetch('/mui/postCommandRegistration' , {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify(cmdDataToPass)\r\n            })\r\n            .then((result) => {result.json()\r\n                if(result.status == 200){\r\n                    this.props.history.push(redirect_url)\r\n                }\r\n            })\r\n            )   \r\n        }\r\n    }\r\n\r\n    render(){\r\n        var defaultCommandData = '';\r\n        var defaultBGData = '';\r\n        var defaultParamData = '';\r\n        var paramitem = ''\r\n        var itemsParam = [];\r\n        var paramElements = [];\r\n        var paramItem = ''\r\n        var count = 0;\r\n        var listItems = ''\r\n        var retrievedData;\r\n        var cmdDataToPassState =this.state;\r\n        var seq_id = 0;\r\n        var seq_id_key = \"params0\"\r\n        var redirectUrl1 = '/mui/home/'\r\n        var redirectUrl2  = '/mui/home/'   \r\n        if(cmdDataToPassState.cmdData){\r\n            var accData = cmdDataToPassState.cmdData.accountData;\r\n            var cmdToedit = cmdDataToPassState.cmdData;\r\n            if(cmdToedit.commandData){\r\n                var cmdToeditData = cmdToedit.commandData;\r\n                retrievedData = cmdToeditData\r\n                var existing_data = retrievedData.paramSequence;\r\n                if(existing_data){\r\n                    Object.entries(existing_data).map(([key, value]) => {\r\n                            listItems = <div className=\"rulesSubDiv\">\r\n                                        <TextInput id={key} defaultValue={value} name={key}  onChange={this.handleInputChange}  className=\"bx--text-input bx--text__input\"  placeholder=\"Add Params\" />\r\n                                        <div className=\"iconDiv1\">\r\n                                            <TrashCan32 className=\"iconEditSize1\" aria-label=\"Delete Rule\" title=\"Delete Rule\" onClick={() => this.deleteParams(key)} />\r\n                                        </div>\r\n                                    </div>\r\n                            paramElements.push(listItems)\r\n                            seq_id_key = JSON.stringify(key)\r\n                    });\r\n                 }  \r\n\r\n                 seq_id = seq_id_key.match(/\\d+$/); // geting the integer value for sequence    \r\n            }\r\n        }  \r\n        \r\n        var addFieldData =  this.state.addField;\r\n        if(addFieldData){\r\n            for(var j = 0; j < addFieldData.length; j++){\r\n                if(addFieldData[j].added){\r\n                    listItems = <div className=\"rulesSubDiv\">\r\n                                <TextInput id={\"params\"+seq_id} defaultValue={addFieldData[j].fValue} name={'params'+seq_id}  onChange={this.handleInputChange}  className=\"bx--text-input bx--text__input\"  placeholder=\"Add Params\" />\r\n                                <div className=\"iconDiv1\">\r\n                                    <TrashCan32 className=\"iconEditSize1\" aria-label=\"Delete Rule\" title=\"Delete Rule\" onClick={() => this.deleteParams(seq_id)} />\r\n                                </div>\r\n                            </div>\r\n                    paramElements.push(listItems) ;\r\n                    seq_id = seq_id + 1 ;\r\n                }           \r\n            }\r\n        }\r\n        if(this.state.addField){\r\n            Object.entries(this.state.addField).map(([key, value]) => {\r\n                var keyValue =key;\r\n            });\r\n        }\r\n        if(this.state.cmdData){\r\n            var cmdDataFetch = this.state.cmdData;\r\n            if(cmdDataFetch.commandData){\r\n                var dataFromFb = cmdDataFetch.commandData;\r\n                var cmdDataFromDB = dataFromFb;\r\n                defaultCommandData = cmdDataFromDB.command;\r\n                defaultBGData = cmdDataFromDB.group;\r\n                var paramsData = cmdDataFromDB.params;\r\n                var accData = cmdDataFetch.accountData;\r\n                itemsParam = []\r\n            }\r\n           \r\n            if(cmdDataFetch.commandData && cmdDataFetch.accountData){\r\n                var dataFromFb = cmdDataFetch.commandData;\r\n                var accData = cmdDataFetch.accountData;\r\n                redirectUrl1 = \"/mui/commandRegistraton?\"+accData._id;\r\n                redirectUrl2 = \"/mui/addCommandRegistraton?\"+dataFromFb._id;\r\n            }\r\n            if(cmdDataFetch.accountData && !cmdDataFetch.commandData){\r\n                var accData = cmdDataFetch.accountData;\r\n                redirectUrl1 = \"/mui/commandRegistraton?\"+accData._id;\r\n                redirectUrl2 = \"/mui/addCommandRegistraton?\"+accData._id;\r\n            }\r\n        }\r\n        return(\r\n        <div className=\"divContainer\" style={{width: '70%'}}>\r\n        <div className=\"headerDiv sectionMargin  mainMargin\">\r\n                <div>\r\n                    <Breadcrumb>\r\n                    <BreadcrumbItem>\r\n                        <Link to=\"/mui/home\">Home</Link>\r\n                    </BreadcrumbItem>\r\n                    <BreadcrumbItem>\r\n                        <Link to=\"/mui/onboardAccount\">Accounts</Link>\r\n                    </BreadcrumbItem>\r\n                    <BreadcrumbItem>\r\n                        <Link to={redirectUrl1}>Command Registration</Link>\r\n                    </BreadcrumbItem>\r\n                    <BreadcrumbItem isCurrentPage>\r\n                        <Link to={redirectUrl2}>Add Command Registration</Link>\r\n                    </BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                </div>\r\n                <h2 className=\"headerText\">Add Command Registration</h2>\r\n            </div>\r\n            <section className=\"sectionMargin mainMargin paddingCostom\">\r\n                <Form onSubmit={this.formSubmit}  >\r\n                    <Grid>\r\n                        <Row>\r\n                            <Column>\r\n                            <TextInput id=\"comand\" name=\"comand\"  ref={node => (this.inputNode = node)} defaultValue={defaultCommandData} onChange={this.handleInputChange}  className=\"bx--text-input bx--text__input\" labelText={<>Command Name  <b style={{color: 'red'}}>*</b></>} placeholder=\"Add Comand\" required />\r\n                            <TextInput id=\"groupName\" name=\"groupName\" helperText=\"Optional helper text here; if message is more than one line text should wrap (~100 character count maximum)\"  ref={node => (this.inputNode = node)} defaultValue={defaultBGData} onChange={this.handleInputChange}  className=\"bx--text-input bx--text__input\" labelText=\"Group Name\" placeholder=\"Group Name\" />\r\n                            {\r\n                                this.state['inValid_groupName'] &&\r\n                                <small className=\"danger\">\r\n                                    <b className=\"errorMsg\">{this.state['inValid_groupName']}</b>\r\n                                </small>\r\n                            }\r\n                            <div className=\"bx--form__helper-text\" style={{maxWidth: '100%', margin: \"0\"}}>If Group is populated, it would restrict the usage of command. If Group is not populated, command can be used globally</div>\r\n                            <div className=\"paramsInlineDiv\">\r\n                                <h4 className=\"bx--label paramsLabel\">Params </h4>\r\n                                <AddAlt32 className=\"addParam\" onClick={this.addParams} />\r\n                            </div>\r\n                                    \r\n                            </Column>\r\n                        </Row>\r\n                        <Row>\r\n                            <Column>\r\n                                <div className=\"rulesDivStyle\" style={{marginTop: \"0\"}}>\r\n                                {paramElements}\r\n                                </div>\r\n                            </Column>\r\n                        </Row>\r\n                        <Row>\r\n                            <Column>\r\n                                {\r\n                                    this.state['specialCharacterErr'] &&\r\n                                    <small className=\"fontRed\">\r\n                                        <b className=\"errorMsg specialCharErr\">{this.state['specialCharacterErr']}</b>\r\n                                    </small>\r\n                                }\r\n                            </Column>\r\n                        </Row>\r\n                        <Row>\r\n                            <Column>\r\n                                <Button className=\"btnMargin btnCmd\" type=\"submit\" disabled={ this.state['inValid_groupName']}>Submit</Button>\r\n                            </Column>\r\n                        </Row>\r\n                    </Grid>\r\n                </Form>\r\n            </section>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(AddCommandRegistration);\r\n\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SAWorkspace\\SAWorkspaceMain.jsx",["686","687","688","689","690","691","692","693","694","695"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SALandingSidebar from '../SALandingSidebar';\r\nimport SAWorkspaceBreadCrump from './SAWorkspaceBreadcrump';\r\nimport SAWorkspaceList from './SAWorkspaceList';\r\n// import SAWorkspace from './SAWorkspace/Workspace';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\n// import { Link, Route } from 'react-router-dom';\r\nimport { BrowserRouter, Switch, Route , Link} from 'react-router-dom';\r\nclass SuperAdminWorkspace extends React.Component {\r\n    \r\n  render() {\r\n    return (\r\n        <div className=\"divContainer\">\r\n            <section className=\"sectionGrid\">\r\n                <div class=\"bx--grid padding0\">\r\n                    <div class=\"rowWidth\">\r\n                        <div class=\"gridColulmnWidth3\">\r\n                            <SALandingSidebar />\r\n                        </div>\r\n                        <div class=\"gridColumn13\" style={{maxWidth: '20% !important', paddingRight: '0 !important'}}>\r\n                            <SAWorkspaceBreadCrump />\r\n                            <SAWorkspaceList />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            \r\n        </div>\r\n    );\r\n    }\r\n  }\r\n  export default SuperAdminWorkspace;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SAAddWorkspace\\SAAddWorkspace.jsx",["696","697","698","699","700","701"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport {  Button, Form, TextInput, Select, SelectItem  } from 'carbon-components-react';\r\nimport SAAddWorkspaceBreadCrump from './SAAddWorkspaceBreadCrump';\r\nimport SALandingSidebar from '../SALandingSidebar';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { validate } from '../../../validation/validate.js';\r\nimport AddWorkspaceTeams from './AddWorkspaceTeams';\r\nclass SuperAdminAddWorkspace extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = (\r\n            {\r\n                workspaceDataFromDB:[],\r\n                verifiedWorkspaceFetched:[],\r\n                signingSecret: '',\r\n                xoxb: '',\r\n                xoxp:'',\r\n                workspaceName: '',\r\n                resErrMsg: '',\r\n                teamExistsError:''\r\n            }\r\n        );\r\n        this.saveWorkspace = this.saveWorkspace.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        trackPromise(fetch('/mui/addWorkspaces')\r\n        .then(res => {\r\n            return res.json()\r\n        })\r\n        .then(WSData => { \r\n            this.setState({ WSData });\r\n            const collabTool = this.state.WSData?.workspaceDataToEdit.workspaceType;\r\n            this.setState({\r\n                workspaceType:collabTool?collabTool:'Slack',\r\n                teamName: this.state.WSData?.workspaceDataToEdit.teamName,\r\n                teamId:this.state.WSData?.workspaceDataToEdit.teamId,\r\n                workspaceName:this.state.WSData?.workspaceDataToEdit.name,\r\n                region:this.state.WSData?.workspaceDataToEdit.region,\r\n                accountCode:this.state.WSData?.workspaceDataToEdit.accountCode\r\n            });\r\n            if(this.state.WSData?.workspaceDataToEdit.workspaceRegions){\r\n                this.setState({\r\n                    workspaceRegions:this.state.WSData?.workspaceDataToEdit.workspaceRegions\r\n                });\r\n            }\r\n        })\r\n        )\r\n    }\r\n    handleInputChange = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n    updateValue = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n    saveWorkspace = (e) => {\r\n\r\n    }\r\n    changeWorkSpace =(e) => {\r\n        const collabTool = e.target.value;\r\n        this.setState({workspaceType:collabTool});\r\n    }\r\n\r\n    formSubmit= (e) => {\r\n        e.preventDefault();\r\n        const queryParams = window.location.search;\r\n        let workspaceId;\r\n        if(queryParams.includes('?')){\r\n            workspaceId = queryParams.split('?')[1];\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n          });\r\n          if(this.state.WSData){\r\n\r\n          }\r\n          let workspaceData = {};\r\n          if(this.state.workspaceType.toLowerCase() === 'teams'){\r\n            workspaceData = {\r\n                teamName: this.state.teamName,\r\n                teamId: this.state.teamId,\r\n                region: this.state.region,\r\n                accCode:this.state.accountCode,\r\n                workspaceType: this.state.workspaceType,\r\n                workspaceId:workspaceId,\r\n                workspaceName: this.state.teamName\r\n            }\r\n            \r\n          } else {\r\n            workspaceData = {\r\n                workspaceName: this.state.workspaceName || this.state.WSData?.workspaceDataToEdit?.name,\r\n                signingSecret: this.state.signingSecret || this.state.WSData?.workspaceDataToEdit?.signingSecret,\r\n                xoxb: this.state.xoxb || this.state.WSData?.workspaceDataToEdit?.xoxb,\r\n                xoxp: this.state.xoxp || this.state.WSData?.workspaceDataToEdit?.xoxp,\r\n            };\r\n          }\r\n         \r\n         // SpecialCharacter validation\r\n        var validateFields = validate(workspaceData);\r\n        if(validateFields.length > 0){\r\n            var message = \"\";\r\n            for(var i =0; i<validateFields.length; i++){\r\n                var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n                message += element.title + \", \";\r\n            }\r\n            this.setState({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n        }else{\r\n            if(this.state.workspaceType.toLowerCase() === 'teams'){\r\n                this.saveTeamsWorkspace(workspaceData)\r\n            } else {\r\n                this.saveSlackWorkspace(workspaceData);\r\n            }\r\n        }\r\n          \r\n    }\r\n    saveTeamsWorkspace = (workspaceData) =>{\r\n        trackPromise(\r\n            fetch('/mui/addTeamsWorkspace' , {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify(workspaceData)\r\n            })\r\n            .then((result) => {\r\n                if(result.status === 200){\r\n                    this.props.history.push(\"/mui/workspaces\");\r\n                } else if (result.status === 500)  {\r\n                    result.json().then((object)=> {\r\n                        this.setState({teamExistsError: object.message});\r\n                    });\r\n                }\r\n            })\r\n            .catch(err => { \r\n                this.setState({errorMessage: err.message});\r\n            })\r\n        )\r\n    }\r\n    saveSlackWorkspace = (workspaceData)=> {\r\n        trackPromise(\r\n            fetch('/mui/validateSAWorkspace' , {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify(workspaceData)\r\n            })\r\n            .then((result) => {\r\n                if (result.status === 404 || result.status === 400)  {\r\n                    result.json().then((object)=> {\r\n                    this.setState({resErrMsg: object.workspaceError});\r\n                    })\r\n                } else if (result.status === 409) {\r\n                    result.json().then((object)=> {\r\n                        this.setState({resErrMsg: object.workspaceError});\r\n                    })\r\n                } else if(result.status == 200){\r\n                    this.props.history.push(\"/mui/workspaces\");\r\n                }\r\n            })\r\n            .catch(err => { \r\n                this.setState({errorMessage: err.message});\r\n            })\r\n        )\r\n    }\r\n    render() {\r\n        var workspaceName = \"\";\r\n        var signingSecret = \"\";\r\n        var xoxb = \"\";\r\n        var xoxp = \"\";\r\n        var signingSecretElement = \"\";\r\n        var xoxpElement = '';\r\n        var xoxbElement = '';\r\n        var readOnlyVal = false;\r\n        var workspaceNameItem = '';\r\n        const workspaceType = this.state.workspaceType ? this.state.workspaceType: 'Slack';\r\n        let  teamsData= {};\r\n        if(this.state.WSData){\r\n            var dataToFEtch = this.state.WSData.workspaceDataToEdit;\r\n            xoxbElement = dataToFEtch.xoxb;\r\n            xoxpElement = dataToFEtch.xoxp;\r\n            signingSecretElement = dataToFEtch.signingSecret;\r\n            readOnlyVal = true;\r\n            workspaceNameItem = <TextInput className=\"bx--text-input bx--text__input\" id=\"workspaceName\" name=\"workspaceName\" labelText={ <> Workspace Name <b className=\"fontRed\">*</b> </> }  placeholder=\"Workspace Name\" readOnly onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={dataToFEtch.name} required />\r\n            teamsData = {\r\n                teamName: dataToFEtch.teamName,\r\n                teamId: dataToFEtch.teamId,\r\n                region: dataToFEtch.region,\r\n                workspaceName: dataToFEtch.name,\r\n                workspaceRegions: dataToFEtch.workspaceRegions\r\n            }\r\n        }else{\r\n            xoxbElement = '';\r\n            xoxpElement = '';\r\n            signingSecretElement = '';\r\n            readOnlyVal = false;\r\n            if(this.state.resErrMsg){\r\n                if(!this.state.resErrMsg.slackAPIError || !this.state.resErrMsg.xoxbNameError || !this.state.resErrMsg.xoxpNameError){\r\n                    workspaceNameItem = <TextInput className=\"bx--text-input bx--text__input\" id=\"workspaceName\" name=\"workspaceName\" labelText={ <> Workspace Name <b className=\"fontRed\">*</b> </> }  placeholder=\"Workspace Name\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue=\"\" required />\r\n                }else{\r\n                    workspaceNameItem = <TextInput className=\"bx--text-input bx--text__input\" id=\"workspaceName\" name=\"workspaceName\" labelText={ <> Workspace Name <b className=\"fontRed\">*</b> </> }  placeholder=\"Workspace Name\" readOnly onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue=\"\" required />\r\n                }\r\n            }else{\r\n                workspaceNameItem = <TextInput className=\"bx--text-input bx--text__input\" id=\"workspaceName\" name=\"workspaceName\" labelText={ <> Workspace Name <b className=\"fontRed\">*</b> </> }  placeholder=\"Workspace Name\" readOnly onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue=\"\" required />\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"divContainer\">\r\n                <section className=\"sectionGrid\">\r\n                    <div class=\"bx--grid padding0\">\r\n                        <div class=\"rowWidth\">\r\n                            <div class=\"gridColulmnWidth3\">\r\n                                <SALandingSidebar />\r\n                            </div>\r\n                            <div class=\"gridColumn13\" style={{maxWidth: '20% !important', paddingRight: '0 !important'}}>\r\n                                <SAAddWorkspaceBreadCrump />\r\n                                <div className=\"formDivSA\">\r\n                                    <Form  onSubmit={this.formSubmit}>\r\n                                    <Select className=\"labelFont\" id=\"collabTool\" \r\n                                        labelText={<> Collaboration tool <b className=\"fontRed\">*</b> </>}\r\n                                        defaultValue=\"SLACK\" \r\n                                            onChange={(e) => this.changeWorkSpace(e)} required>\r\n                                            <SelectItem hidden\r\n                                                  value=\"\"\r\n                                                  text=\"Choose an option\"\r\n                                                />\r\n                                            <SelectItem\r\n                                                selected={this.state.workspaceType && this.state.workspaceType.toLowerCase()==='slack'}\r\n                                                value=\"SLACK\"\r\n                                                text=\"SLACK\"\r\n                                            />\r\n                                            <SelectItem\r\n                                                selected={this.state.workspaceType && this.state.workspaceType.toLowerCase()==='teams'}\r\n                                                value=\"TEAMS\"\r\n                                                text=\"TEAMS\"\r\n                                            />\r\n                                        </Select>\r\n                                        {workspaceType && workspaceType.toLowerCase() === 'slack' &&\r\n                                            <>\r\n                                                <TextInput className=\"bx--text-input bx--text__input\" id=\"signingSecret\" readOnly={readOnlyVal} name=\"signingSecret\" labelText={ <> Workspace Signing Secret <b className=\"fontRed\">*</b> </> } placeholder=\"Workspace Signing Secret\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={signingSecretElement} required />\r\n                                                <TextInput className=\"bx--text-input bx--text__input\" id=\"xoxp\" name=\"xoxp\" labelText={ <> Workspace xoxp Token <b className=\"fontRed\">*</b> </> } placeholder=\"Workspace xoxp Token\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={xoxpElement} required />\r\n                                                {\r\n                                                    this.state['resErrMsg'] && \r\n                                                    <small className=\"fontRed\">\r\n                                                    <b className=\"blgrperrorMsg\">{this.state.resErrMsg.xoxpNameError}</b>\r\n                                                    </small>\r\n                                                }\r\n                                                <TextInput className=\"bx--text-input bx--text__input\" id=\"xoxb\" name=\"xoxb\" readOnly={readOnlyVal} defaultValue={xoxbElement} labelText={ <> Workspace xoxb Token <b className=\"fontRed\">*</b> </> } placeholder=\"Workspace xoxb Token\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} required />\r\n                                                {\r\n                                                    this.state['resErrMsg'] && \r\n                                                    <small className=\"fontRed\">\r\n                                                    <b className=\"blgrperrorMsg\">{this.state.resErrMsg.xoxbNameError}</b>\r\n                                                    </small>\r\n                                                }\r\n                                                {workspaceNameItem}\r\n                                                {\r\n                                                    this.state['resErrMsg'] && \r\n                                                    <small className=\"fontRed\">\r\n                                                    <b className=\"blgrperrorMsg\">{this.state.resErrMsg.workspaceNameErr}</b>\r\n                                                    </small>\r\n                                                }\r\n                                                {\r\n                                                    this.state['resErrMsg'] && \r\n                                                    <small className=\"fontRed\">\r\n                                                    <b className=\"blgrperrorMsg\">{this.state.resErrMsg.slackAPIError}</b>\r\n                                                    </small>\r\n                                                }\r\n                                            </>\r\n                                        }\r\n                                        {workspaceType && workspaceType.toLowerCase() === 'teams' &&\r\n                                        <>\r\n                                            <AddWorkspaceTeams teamsData={teamsData} onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} />\r\n                                            {\r\n                                                this.state['teamExistsError'] && \r\n                                                <small className=\"fontRed\">\r\n                                                <b className=\"blgrperrorMsg\">{this.state.teamExistsError}</b>\r\n                                                </small>\r\n                                            }\r\n                                        </>\r\n                                        }\r\n                                        {\r\n                                            this.state['specialCharacterErr'] &&\r\n                                            <small className=\"fontRed\">\r\n                                                <b className=\"errorMsg specialCharErr\">{this.state['specialCharacterErr']}</b>\r\n                                            </small>\r\n                                        }\r\n                                        <br></br>\r\n                                        <Button kind=\"primary\" type=\"submit\" className=\"btnSACss\" >Submit</Button>\r\n                                    </Form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default withRouter(SuperAdminAddWorkspace);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\commandRegistration\\CommandRegistration.jsx",["702","703","704","705","706","707","708","709","710","711","712","713","714","715","716","717","718"],"// CommandRegistration.jsx\r\nimport React, { Component } from 'react';\r\nimport {\r\n    Button,\r\n    Form,\r\n    Select,\r\n    TextInput,\r\n    SelectItem,\r\n    Breadcrumb,\r\n    BreadcrumbItem,\r\n    Accordion,\r\n    AccordionItem,\r\n    Tag\r\n  } from \"carbon-components-react\";\r\nimport './commandReg.scss';\r\nimport { Filter32 } from \"@carbon/icons-react\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { Edit32 } from \"@carbon/icons-react\";\r\nimport { Link } from 'react-router-dom';\r\nclass CommandRegistration extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            cmdData: []\r\n        };\r\n    }\r\n   \r\n    componentDidMount() {\r\n        trackPromise(\r\n            fetch('/mui/fetchCommandRegistered')\r\n            .then(res => {\r\n                return res.json()\r\n            })\r\n            .then(cmdData => { \r\n                this.setState({ cmdData })\r\n            })\r\n        )\r\n    }\r\n    handleInputChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n        if(e.target.name == \"accountCodeFilter\"){\r\n            var accCodeTOFilter = {}\r\n            accCodeTOFilter[e.target.name] = e.target.value;\r\n            trackPromise(\r\n                fetch('/mui/postAccCodeCommandRegistration' , {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        'Content-type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(accCodeTOFilter)\r\n                })\r\n                .then((result) => {result.json()\r\n                    if(result.status == 200){\r\n                        e.preventDefault();\r\n                        this.loadDynamicWOrkflow();\r\n                    }\r\n                })\r\n                \r\n            )\r\n        }\r\n    };\r\n    loadDynamicWOrkflow = () => {\r\n        trackPromise(\r\n            fetch('/mui/fetchCommandRegistered')\r\n            .then(res => {\r\n                return res.json()\r\n            })\r\n            .then(cmdData => { \r\n                this.setState({ cmdData })\r\n            })\r\n            \r\n        )\r\n    }\r\n    render(){\r\n        var items = [];\r\n        var paramToPush = [];\r\n        var accountToPush = [];\r\n        var uniqueNames = [];\r\n        var groupToPush = [];\r\n        var formOptionAccCode = '';\r\n        var itemsAccCode = []\r\n        var stateData = this.state;\r\n        var accName = '';\r\n        var accCode = '';\r\n        var accId = '';\r\n        if(this.state.cmdData){\r\n            var cmdDataFetched = stateData.cmdData;\r\n            var accordionItem = '';\r\n            var paramitem = ''\r\n            var accDetailsTag = ''\r\n            var redirect_url = '';\r\n            if(cmdDataFetched.dynamicWorkflowData){\r\n                var dataFetched = stateData.cmdData.accountData;\r\n                var uniqueArr = dataFetched.uniqueNames;\r\n                for(var i = 0; i<uniqueArr.length;i++){\r\n                    formOptionAccCode = <option className=\"bx--select-option\" defaultValue={uniqueArr[i]}>{uniqueArr[i]}</option>\r\n                    itemsAccCode.push( formOptionAccCode );\r\n                }\r\n\r\n                var accDataFetched = dataFetched.accCode;\r\n                accName = dataFetched.accName;\r\n                accCode = dataFetched.accCode;\r\n                accId = dataFetched._id;\r\n                if(accCode.length > 0){\r\n                    accDetailsTag = <h4>Account Name: {dataFetched.accName} | Account Code: {dataFetched.accCode}</h4>\r\n                    // redirect_url = \"/mui/commandRegistraton?\"+accId;\r\n                }else{\r\n                    accDetailsTag = ''\r\n                    // redirect_url = '';\r\n                }\r\n                \r\n                var redirectUrl = \"/mui/addCommandRegistraton?\"+dataFetched._id;\r\n                var redirectUrl1 = \"/mui/commandRegistraton?\"+dataFetched._id;\r\n                \r\n\r\n                var fetchedFromStore =cmdDataFetched.dynamicWorkflowData;\r\n                for (var i =0; i< fetchedFromStore.length; i++){\r\n                    var fetchedCmdData = fetchedFromStore[i];\r\n                    if(fetchedCmdData.accountCode != undefined){\r\n                        accountToPush.push(fetchedCmdData.accountCode);\r\n                        uniqueNames = Array.from(new Set(accountToPush));\r\n                    }\r\n                    var cmdId = fetchedFromStore[i]._id;\r\n                    var editUrl = \"/mui/addCommandRegistraton?id=\"+cmdId;\r\n                    var accCodeFromDW = fetchedCmdData.accountCode;\r\n                    var paramsData = fetchedCmdData.params;\r\n                    var groupData = fetchedCmdData.group;\r\n                    paramToPush = []\r\n                    groupToPush=[]\r\n                    if(paramsData || paramsData != undefined){\r\n                        Object.entries(paramsData).map(([key, value]) => {\r\n                            paramitem = <Tag type=\"gray\" title=\"Clear Filter\">{key}</Tag>\r\n                            paramToPush.push( paramitem );\r\n                        });\r\n                    }\r\n                    if(groupData){\r\n                        var groupitem = ''\r\n                        var groupStr = fetchedCmdData.group;\r\n                        var str_array = groupStr.split(',');\r\n                        <h6>Group</h6>\r\n                        Object.entries(str_array).map(([key, value]) => {\r\n                            paramitem = <Tag type=\"gray\" title=\"Clear Filter\">{value}</Tag>\r\n                            groupToPush.push( paramitem );\r\n                        });\r\n                        groupToPush.push(groupitem);\r\n\r\n                    }else{\r\n                        groupitem = 'N/A';\r\n                        groupToPush.push(groupitem);\r\n                    }\r\n                    var command = \"Command: \" + fetchedCmdData.command\r\n\r\n                    if(fetchedCmdData.accountCode) {\r\n                        command = command + \" | Account Code: \" + fetchedCmdData.accountCode\r\n                    }\r\n\r\n                    if(accCodeFromDW == accDataFetched) {\r\n                        accordionItem = <AccordionItem title={command}>\r\n                                        <div className=\"paramsDivMain\">\r\n                                            <div className=\"editDiv\">\r\n                                                <Link  id={cmdId} to={editUrl} ><Edit32 className=\"editIconCmd\" /></Link>\r\n                                                \r\n                                            </div>\r\n                                            <div className=\"cmdContentDiv\">\r\n                                                <div className=\"bgDivCmd\">\r\n                                                    <h6>Group</h6>\r\n                                                     {groupToPush}\r\n                                                </div> \r\n                                                <h6>Params</h6>\r\n                                                {paramToPush}\r\n                                            </div>\r\n                                        </div>\r\n                                    </AccordionItem>\r\n                        items.push( accordionItem );\r\n                    }else{\r\n                        accordionItem = <AccordionItem title={command}>\r\n                                        <div className=\"paramsDivMain\">\r\n                                            <div className=\"bgDivCmd\">\r\n                                                <h6>Group</h6>\r\n                                                 {groupToPush}\r\n                                            </div> \r\n                                            \r\n                                            <h6>Params</h6>\r\n                                            {paramToPush}\r\n                                        </div>\r\n                                    </AccordionItem>\r\n                        items.push( accordionItem );\r\n                    }\r\n                }\r\n                \r\n            }else{\r\n                redirectUrl1 = \"/mui/onboardAccount\";\r\n            }\r\n        }\r\n        return(\r\n            <div className=\"divContainer\">\r\n                <div className=\"headerDiv sectionMargin  mainMargin\">\r\n                    <div>\r\n                        <Breadcrumb>\r\n                        <BreadcrumbItem>\r\n                            <Link to=\"/mui/home\">Home</Link>\r\n                        </BreadcrumbItem>\r\n                        <BreadcrumbItem>\r\n                            <Link to=\"/mui/onboardAccount\">Accounts</Link>\r\n                        </BreadcrumbItem>\r\n                        <BreadcrumbItem isCurrentPage>\r\n                            <Link to={redirectUrl1}>Command Registration</Link>\r\n                        </BreadcrumbItem>\r\n                        </Breadcrumb>\r\n                    </div>\r\n                    <h2 className=\"headerText\">Command Registration</h2>\r\n                    {/* <h4>test-----{accCode}</h4> */}\r\n                    {accDetailsTag}\r\n                    {/* <h4>Account Name: {accName} | Account Code: {accCode}</h4> */}\r\n                </div>\r\n                <section className=\"sectionMargin mainMargin paddingCostom\">\r\n                    <div className=\"addBtnPA\">\r\n                        <Link to={redirectUrl}>\r\n                            <Button className=\"addAccBtn\">\r\n                                Command Registration\r\n                            </Button>\r\n                        </Link>\r\n                        <Select\r\n                                className=\"labelFont\"\r\n                                id=\"accountCodeFilter\"\r\n                                labelText=\"Filter Command with Account Code\"\r\n                                defaultValue=''\r\n                                name=\"accountCodeFilter\"\r\n                                onChange={this.handleInputChange}\r\n                            >\r\n                            <SelectItem\r\n                                defaultValue=\"noOption\"\r\n                                text=\"No Filter\"\r\n                            />\r\n                            {itemsAccCode}\r\n                        </Select>\r\n                        \r\n                    </div>\r\n                    <div className=\"accordionDiv\">\r\n                        <Accordion align='start'>\r\n                            {items}\r\n                        </Accordion>\r\n                    </div>\r\n                </section>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CommandRegistration;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\teams\\ExtractTeamIds.jsx",[],"C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\followUpApproval\\FollowUpApproval.jsx",[],"C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\addUserForm.jsx",["719","720","721","722","723","724","725","726"],"import {\r\n    Button,\r\n    Checkbox,\r\n    Select,\r\n    SelectItem,\r\n    Form,\r\n    FormGroup,\r\n    TextInput,\r\n    Row,\r\n    Column,\r\n    Grid\r\n} from \"carbon-components-react\";\r\n\r\n\r\nimport React, { Component } from \"react\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport \"./form.scss\";\r\nimport qs from 'qs';\r\nclass AddUserForm extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        //const {id} = this.props.match.params.id;\r\n        let id1 = qs.parse(this.props.location.search, { ignoreQueryPrefix: true }).id       \r\n\r\n       trackPromise(fetch('/mui/addUserRegistration/' + id1)\r\n            .then(res => {\r\n                return res.json()\r\n            }).then(response => {\r\n                if(response.expired){\r\n                    this.props.history.push(\"/mui/thankyou\");\r\n                    return;\r\n                }\r\n                this.setState({ \"key\": response.key, \"accountName\": response.serviceUsed.accountName ,\"service\" :response.serviceUsed.service,\"ansibleInstance\" :response.serviceUsed.ansibleInstanceName,\"userEmail\": response.userEmail })\r\n            })\r\n\r\n\r\n       )\r\n    }\r\n\r\n    handleInputChange = e => {\r\n        e.preventDefault();\r\n        // Validations\r\n        if (e.target.value && e.target.value.includes('script') && e.target.value.includes('<') || e.target.value.includes('>')) {\r\n            this.setState({\r\n                ['inValid_' + e.target.name]: 'Invalid Input.'\r\n            })\r\n            return\r\n        }\r\n        this.setState({\r\n            ['inValid_' + e.target.name]: undefined\r\n        })\r\n\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n    ///\r\n    formSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { username, password } = this.state;\r\n        let id = qs.parse(this.props.location.search, { ignoreQueryPrefix: true }).id\r\n        //const { id } = this.props.match.params.id;\r\n        trackPromise(\r\n            fetch('/mui/submitUserRegistration/' + id, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    username,\r\n                    password\r\n                })\r\n            })\r\n                .then((result) => { // Revisit fr password validation\r\n                        if (result.status === 404 || result.status === 400)  {\r\n                            result.json().then((object)=> {\r\n                              this.setState({resErrMsg:object.errMsg});\r\n                            })\r\n                        } else if (result.status === 409) {\r\n                            result.json().then((object)=> {\r\n                                this.setState({resErrMsg:object.errMsg[0]});\r\n                            })\r\n                        } else if(result.status == 200){\r\n                            let queryParam = qs.parse(this.props.location.search, { ignoreQueryPrefix: true });\r\n                           if(queryParam.token){\r\n                                this.props.history.push(\"/mui/thankyou\");\r\n                            }else{\r\n                                this.props.history.push(\"/mui/home\");\r\n                            }\r\n                      }\r\n                })\r\n                .catch(err => {\r\n                    this.setState({ errorMessage: err.message });\r\n                })\r\n        )\r\n    }\r\n    render() {\r\n\r\n        let userEmail =  this.state.userEmail;\r\n        let queryParam = qs.parse(this.props.location.search, { ignoreQueryPrefix: true });\r\n        let inputFieldPasswordCaption = 'Password';\r\n        let inputFieldUserName = <TextInput labelText={<>User Name <b style={{ color: 'red' }}>*</b></>} onChange={this.handleInputChange} placeholder=\"User Name\" name=\"username\" id=\"username\" required />\r\n        let serviceType = 'service';\r\n        let service = this.state.service;\r\n        if(queryParam.token){\r\n            inputFieldPasswordCaption ='Token';\r\n            serviceType = 'Ansible Intance';\r\n            inputFieldUserName = <TextInput labelText={<>User Name <b style={{ color: 'red' }}>*</b></>} onChange={this.handleInputChange} placeholder=\"User Name\" name=\"username\" id=\"username\" value={userEmail} readOnly={true} required />\r\n            this.state.username = userEmail;\r\n            service = this.state.ansibleInstance;\r\n        }\r\n        const inputFieldPassword = <TextInput labelText={<>{inputFieldPasswordCaption} <b style={{ color: 'red' }}>*</b></>} onChange={this.handleInputChange} type=\"password\" placeholder=\"*********\" name=\"password\" id=\"password\" required />\r\n\r\n        return (\r\n            <div className=\"divContainer\" style={{ width: '100%' }}>\r\n                <div className=\"headerDiv sectionMargin  mainMargin\">\r\n                    <h2 className=\"headerText\">User Registration Details</h2>\r\n                </div>\r\n                <section className=\"sectionMargin mainMargin paddingCostom\">\r\n                    <div id=\"serviceDiv\" class=\"serviceDivMain\">\r\n                        <p class=\"pService\">You are entering credentials for <strong>{service}</strong> {serviceType}, for the account <strong>{this.state.accountName}</strong></p> \r\n                        {/* <p class=\"pService\">You are entering credentials for <strong>ICD</strong> service, for the account <strong>234</strong></p> */}\r\n\r\n                    </div>\r\n                    <Grid>\r\n                        <Row>\r\n                            <br></br>\r\n                            <br></br>\r\n                            <br></br>\r\n                            <Column>\r\n                                <Column>\r\n                                </Column>\r\n                                <Column>\r\n                                </Column>\r\n\r\n                                <Column>\r\n                                </Column>\r\n                                <Form onSubmit={this.formSubmit} className=\"formMain\">\r\n\r\n\r\n\r\n                                    {\r\n                                        this.state['resErrMsg'] &&\r\n                                        <small className=\"fontRed\">\r\n                                            <b className=\"blgrperrorMsg\">{this.state['resErrMsg']}</b>\r\n                                        </small>\r\n                                    }\r\n                                    <br></br>\r\n                                    <br></br>\r\n                                    {inputFieldUserName}\r\n                                    {\r\n                                        this.state['inValid_userName'] &&\r\n                                        <small className=\"danger\">\r\n                                            <b className=\"errorMsg\">{this.state['inValid_userName']}</b>\r\n                                        </small>\r\n                                    }\r\n                                    {inputFieldPassword}\r\n                                    <Button className=\"PAbtnCommon\" type=\"submit\"  >Submit</Button>\r\n                                    <br></br>\r\n                                    <br></br>\r\n                                    <br></br>\r\n                                    <Column>\r\n                                    </Column>       \r\n                                </Form>\r\n                            </Column>\r\n                            <Column>\r\n                            </Column>\r\n                        </Row>\r\n                    </Grid>\r\n                    <p class=\"disclaimerText\">Disclaimer: These credentials would be stored in the ChatOps knight password vault for more information <a target=\"_blank\"  rel=\"noopener noreferrer\" href=\"https://kyndryl.sharepoint.com/sites/ChatOps/SitePages/Vault.aspx\">click here</a></p>\r\n\r\n                </section>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nexport default withRouter(AddUserForm);\r\n ","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SACommands\\CommandsMain.jsx",[],"C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SACommands\\AddCommands\\AddCommand.jsx",[],"C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\DailyReport\\DRHome.jsx",["727","728","729","730","731","732","733"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport DRForm from './DRForm';\r\nimport DRBreadCrump from './DRBreadCrumb';\r\nclass DRHome extends React.Component {\r\n    \r\n  render() {\r\n    return (\r\n        <div className=\"divContainer\">\r\n            <DRBreadCrump />\r\n            <section className=\"sectionMargin mainMargin paddingCostom\">\r\n                <DRForm />\r\n            </section>\r\n            \r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(DRHome);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ServiceKeys\\Services.jsx",["734","735"],"import {\r\n  Button,\r\n  ComposedModal,\r\n  Link,\r\n  ModalBody,\r\n  OverflowMenu,\r\n  OverflowMenuItem,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n  Tag,\r\n} from \"carbon-components-react\";\r\nimport React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport BreadCrumb from \"../SuperAdmin/SACommands/CommandsBreadCrumb\";\r\n\r\nclass Services extends Component {\r\n  header = \"Services\";\r\n  links = {\r\n    Home: \"/mui/home\",\r\n    Services: \"/mui/services\",\r\n  };\r\n  tableHeaders = [\r\n    \"Service Name\",\r\n    \"Service Description\",\r\n    \"Status\",\r\n    \"Service Created At (UTC)\",\r\n    \"\",\r\n  ];\r\n  colors = {\r\n    approved: \"green\",\r\n    rejected: \"red\",\r\n    pending: \"cyan\",\r\n  };\r\n  state = {\r\n    serviceData: [],\r\n    modalOpen: false,\r\n    modalData: {},\r\n    users: []\r\n  };\r\n  getAllServiceKeys = async () => {\r\n    const res$ = fetch(\"/mui/registeredService\");\r\n    trackPromise(res$);\r\n    const res = await res$;\r\n    if (res.status == 200) {\r\n      const { serviceData } = await res.json();\r\n      serviceData &&\r\n        this.setState({\r\n          serviceData,\r\n        });\r\n        this.getUserAccess();\r\n    }\r\n  };\r\n\r\n  gotoServiceKeyPage = (id) => () => {\r\n    let url = \"/mui/service-keys\";\r\n    if (id) url += `?id=${id}`;\r\n    this.props.history.push(url);\r\n  };\r\n  gotoWebhookPage = (id) => () => {\r\n    let url = \"/mui/webhooks\";\r\n    if (id) url += `/${id}`;\r\n    this.props.history.push(url);\r\n  };\r\n\r\n  gotoAddServiceForm = (id) => () => {\r\n    let url = \"/mui/add-service\";\r\n    if (id) url += `?id=${id}`;\r\n    this.props.history.push(url);\r\n  };\r\n\r\n  getUserAccess = () => {\r\n    trackPromise(\r\n      fetch(\"/mui/getUserAccess\")\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((users) => {\r\n          this.setState({ users });\r\n        })\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAllServiceKeys();\r\n  }\r\n\r\n  closeModal = () => this.setState({ modalOpen: false });\r\n\r\n  getServiceInfo = (index) => () => {\r\n    this.setState({\r\n      modalOpen: true,\r\n      modalData: this.state.serviceData[index],\r\n    });\r\n  };\r\n\r\n  render() {\r\n    var isAccAdmin = this.state.users;\r\n\r\n    \r\n    var userObj = isAccAdmin.userAccessData;\r\n    return (\r\n      <div className=\"divContainer\">\r\n        <div className=\"headerDiv sectionMargin  mainMargin\">\r\n          <BreadCrumb header={this.header} links={this.links} />\r\n        </div>\r\n        <section className=\"sectionMargin mainMargin\">\r\n          <div className=\"searchDivMain my-2\">\r\n            <Link class=\"addBtnPACss\" to=\"/mui/addAccountDetails\">\r\n              <Button\r\n                className=\"addAccBtn addBtnCss addBtnPACss\"\r\n                onClick={this.gotoAddServiceForm()}\r\n              >\r\n                Add Service\r\n              </Button>\r\n            </Link>\r\n          </div>\r\n          <Table overflowMenuOnHover={true}>\r\n            <TableHead>\r\n              <TableRow>\r\n                {this.tableHeaders.map((header) => (\r\n                  <TableHeader key={header}>{header}</TableHeader>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {this.state.serviceData.map((service, i) => (\r\n                <TableRow key={service._id}>\r\n                  <TableCell onClick={this.getServiceInfo(i)}>\r\n                    <a>{service.SourceIdentificationCode}</a>\r\n                  </TableCell>\r\n                  <TableCell>{service.SourceDescription}</TableCell>\r\n                  <TableCell>\r\n                    <Tag type={this.colors[service.status]}>\r\n                      {service.status}\r\n                    </Tag>\r\n                  </TableCell>\r\n                  <TableCell>{service.date}</TableCell>\r\n                  <TableCell>\r\n                    {service.status !== \"pending\" && (\r\n                      <OverflowMenu title=\"Options\">\r\n                        {userObj && service.owner\r\n                        .map((a) => { return a.toLowerCase() })\r\n                        .includes(userObj.user.toLowerCase()) && (\r\n                          <OverflowMenuItem\r\n                            className=\"overflowMenuClass\"\r\n                            itemText=\"Edit Service\"\r\n                            onClick={this.gotoAddServiceForm(service._id)}\r\n                          />\r\n                        )}\r\n                        {service.status !== \"rejected\" && (\r\n                          <OverflowMenuItem\r\n                            className=\"overflowMenuClass\"\r\n                            itemText=\"Service Keys\"\r\n                            onClick={this.gotoServiceKeyPage(service._id)}\r\n                          />\r\n                        )}\r\n                        <OverflowMenuItem\r\n                            className=\"overflowMenuClass\"\r\n                            itemText=\"Webhook\"\r\n                            onClick={this.gotoWebhookPage(service._id)}\r\n                        />\r\n                      </OverflowMenu>\r\n                    )}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n          {!this.state.serviceData.length && (\r\n            <div className=\"App\">\r\n              <p>No records found</p>\r\n            </div>\r\n          )}\r\n          {this.state.serviceData.length && typeof document === \"undefined\"\r\n            ? null\r\n            : ReactDOM.createPortal(\r\n                <ComposedModal\r\n                  open={this.state.modalOpen}\r\n                  onClose={this.closeModal}\r\n                >\r\n                  <ModalBody className=\"my-2 py-2\" hasScrollingContent={true}>\r\n                    <div>\r\n                      <p>Description:</p>\r\n                      {this.state.modalData.SourceDescription}\r\n                    </div>\r\n                    <br />\r\n                    <div>\r\n                      <p>Created At:</p>\r\n                      <Tag>\r\n                        {this.state.modalData.date &&\r\n                          new Date(this.state.modalData.date).toUTCString()}\r\n                      </Tag>\r\n                    </div>\r\n                    <br />\r\n                    <div>\r\n                      <p>Owners:</p>\r\n                      {this.state.modalData.owner &&\r\n                        this.state.modalData.owner.map((id) => (\r\n                          <Tag key={id}>{id}</Tag>\r\n                        ))}\r\n                    </div>\r\n                    <br />\r\n\r\n                    <div>\r\n                      <p>Collaborators</p>\r\n                      {this.state.modalData.collaborator &&\r\n                        this.state.modalData.collaborator.map((id) => (\r\n                          <Tag key={id}>{id}</Tag>\r\n                        ))}\r\n                    </div>\r\n                  </ModalBody>\r\n                </ComposedModal>,\r\n                document.body\r\n              )}\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//export default withServices;\r\nexport default withRouter(Services);\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ServiceKeys\\Add-Service.jsx",["736","737","738","739","740","741","742","743","744"],"import {\r\n  Button,\r\n  Form,\r\n  Select,\r\n  SelectItem,\r\n  TextArea,\r\n  TextInput,\r\n} from \"carbon-components-react\";\r\nimport React, { Component } from \"react\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport BreadCrumb from \"../SuperAdmin/SACommands/CommandsBreadCrumb\";\r\nimport qs from \"qs\";\r\nimport { validate } from '../../validation/validate.js';\r\nimport { Tooltip } from \"carbon-components-react/lib/components/Tooltip/Tooltip\";\r\nimport { Close32 } from \"@carbon/icons-react\";\r\nimport \"./form.scss\";\r\nclass AddService extends Component {\r\n  header = \"Add Service\";\r\n  links = {\r\n    Home: \"/mui/home\",\r\n    Services: \"/mui/services\",\r\n    \"Add Service\": \"/mui/add-service\",\r\n  };\r\n  state = {\r\n    id: \"\",\r\n    name: \"\",\r\n    description: \"\",\r\n    bJustification: \"\",\r\n    workspace: \"\",\r\n    owners: \"\",\r\n    collaborators: \"\",\r\n    workspacesList: [],\r\n    service: {},\r\n    showPopup: false,\r\n    collaborationTool: \"SLACK\",\r\n    defaultassignments: '',\r\n    teamName: \"\",\r\n    teamId: \"\",\r\n    workspaceName: \"\",\r\n    region:\"\",\r\n    teamsWorkspaceData : {}\r\n  };\r\n\r\n  async fetchWorkSpaces() {\r\n    const res = await fetch(\"/mui/fetchWorkspace\");\r\n    if (res.status == 200) {\r\n      const { workspaceData } = await res.json();\r\n      this.setState({ workspacesList: workspaceData });\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.fetchWorkSpaces();\r\n    const { id } = qs.parse(this.props.location.search, {\r\n      ignoreQueryPrefix: true,\r\n    });\r\n\r\n    const res$ = fetch(\"/mui/registeredService/\" + id);\r\n    trackPromise(res$);\r\n    const res = await res$;\r\n    if (res.status == 200) {\r\n      const { serviceData } = await res.json();\r\n      this.setState({\r\n        id,\r\n        name: serviceData.SourceIdentificationCode,\r\n        description: serviceData.SourceDescription,\r\n        bJustification: serviceData.businessJustification,\r\n        workspace: serviceData.workspace,\r\n        owners: serviceData.owner && serviceData.owner.join(),\r\n        collaborators:\r\n          serviceData.collaborator && serviceData.collaborator.join(),\r\n        service: serviceData,\r\n        collaborationTool: serviceData.collabTool\r\n      });\r\n    }\r\n  }\r\n\r\n  updateValue = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleInputChange = (e) => {\r\n    if (\r\n      (e.target.value &&\r\n        e.target.value.includes(\"script\") &&\r\n        e.target.value.includes(\"<\")) ||\r\n      e.target.value.includes(\">\")\r\n    ) {\r\n      this.setState({\r\n        [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n      });\r\n      return;\r\n    };\r\n  }\r\n\r\n  updatecollaborationTool = (e) => {\r\n    this.setState({\r\n      collaborationTool: e.target.value,\r\n    });\r\n  };\r\n\r\n  showModal = (e) => {\r\n    this.setState({\r\n      showPopup: true,\r\n    });\r\n  };\r\n\r\n  cancelModal = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      showPopup: false,\r\n    });\r\n  };\r\n\r\n  handleWorkspaceRegion = (e) => {\r\n    console.log(e.target.value);\r\n    this.setState({region: e.target.value})\r\n  };\r\n\r\n  saveWorkspace = async (e) => {\r\n    e.preventDefault();\r\n    // alert(e.target.name);\r\n    const res = await fetch(\"/mui/checkUniqueWorkspace/\"+this.state.teamName);\r\n    if (res.status === 200) {\r\n      const { message, error } = await res.json();\r\n      if(error){\r\n        this.setState({\r\n          invalidMsg: message,\r\n        })\r\n        return false;\r\n      }\r\n      \r\n    }\r\n\r\n    \r\n  //Save workspace when Teams selected\r\n      const teamsWorkspaceData = {\r\n        teamName: this.state.teamName,\r\n        teamId: this.state.teamId,\r\n        workspaceType:\"TEAMS\",\r\n        region: this.state.region,\r\n        name: this.state.teamName,\r\n        type: 'new'\r\n      }\r\n      console.log(`teamsWorkspaceData----${JSON.stringify(teamsWorkspaceData)}`);\r\n      \r\n      this.setState({\r\n        [e.target.name]: e.target.value,\r\n        showPopup: false,\r\n        invalidMsg: undefined,\r\n        teamsWorkspaceData : teamsWorkspaceData\r\n      }, () =>{\r\n        this.loadWorkspace();\r\n      });\r\n      \r\n      \r\n  };\r\n\r\n  loadWorkspace = () => {\r\n    console.log(this.state.teamsWorkspaceData)\r\n    const olderWorkspaces = [...this.state.workspacesList];\r\n    //console.log(`olderWorkspaces---${JSON.stringify(olderWorkspaces)}`);\r\n    //const mergeAddWorkspace = [...olderWorkspaces, ...this.state.teamsWorkspaceData]\r\n    olderWorkspaces.push(this.state.teamsWorkspaceData);\r\n    this.setState({\r\n      workspacesList : olderWorkspaces\r\n    }, () =>{\r\n      console.log(`workspacesList----${JSON.stringify(olderWorkspaces)}`);\r\n    })\r\n\r\n    \r\n    // trackPromise(\r\n    //   fetch(\"/mui/onboardAccountFormData\")\r\n    //     .then((res) => {\r\n    //       return res.json();\r\n    //     })\r\n    //     .then((AccData) => {\r\n    //       this.props.registerState(\"AccData\", AccData);\r\n    //     })\r\n    // );\r\n  };\r\n\r\n  emailHandler = (e) => {\r\n    e.target.setCustomValidity(\"\");\r\n    if (e.target.value.length == 0) return (this.state.collaborators = \"\");\r\n    const emaillArr = e.target.value.trim().split(\",\");\r\n    const validEmails = emaillArr.every((email) => {\r\n      const allowedDomains =\r\n        process.env.REACT_APP_ALLOWED_DOMAINS?.split(\",\") || [];\r\n      const validDomain = allowedDomains.find((domain) =>\r\n        email.toLowerCase().includes(domain + \".\")\r\n      );\r\n      return validDomain;\r\n    });\r\n    if (validEmails) {\r\n      this.updateValue(e);\r\n    } else e.target.setCustomValidity(\"Please provide valid email...\");\r\n  };\r\n\r\n  submit = async (e) => {\r\n      e.preventDefault();\r\n      const payload = new Payload(this.state);\r\n      console.log(`payload----${JSON.stringify(payload)}`);\r\n        // SpecialCharacter validation\r\n      var validateFields = validate(payload);\r\n      if(validateFields.length > 0){\r\n          var message = \"\";\r\n          for(var i =0; i<validateFields.length; i++){\r\n              var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n              if(element){\r\n                  message += element.title + \", \";\r\n              }else{\r\n                  message += validateFields[i] + ', '\r\n              }\r\n          }\r\n          this.setState({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n      }else{\r\n          const res$ = fetch(\"/mui/postServiceApprovalToSlack\", {\r\n          method: \"POST\",\r\n          headers: {\r\n              \"Content-type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(payload),\r\n          });\r\n          trackPromise(res$);\r\n  \r\n          const res = await res$;\r\n  \r\n          if (res.status === 200) {\r\n              this.props.history.push(\"/mui/services\");\r\n          }else{\r\n              res.json().then((object)=> {\r\n                  this.setState({uniqueCheck:object.uniqueCheck});\r\n              })\r\n          }\r\n      }\r\n  };\r\n\r\n  isUnique = async (name) => {\r\n    try {\r\n      const res = await fetch(\"/mui/uniqueService/\" + name);\r\n      if (res.status == 200) {\r\n        const { unique } = await res.json();\r\n        return unique;\r\n      } else return false;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  generateNameHandler = (time) => {\r\n    let timer;\r\n    return async (e = new Event()) => {\r\n      clearTimeout(timer);\r\n      timer = setTimeout(async () => {\r\n        const { value } = e.target;\r\n        if (!value) {\r\n          e.target.setCustomValidity(\"\");\r\n          return;\r\n        }\r\n        e.target.setCustomValidity(\"Verifying......\");\r\n        const unique = await this.isUnique(value);\r\n        if (unique) {\r\n          e.target.setCustomValidity(\"\");\r\n          this.state.name = value;\r\n        } else e.target.setCustomValidity(\"Service name already exists...\");\r\n      }, time);\r\n    };\r\n  };\r\n\r\n  render() \r\n  {\r\n    const addWorkspaceTeamsForm = (\r\n      <Form>\r\n        <Select\r\n          className=\"labelFont\"\r\n          id=\"workspaceRegions\"\r\n          labelText={\r\n            <span>\r\n              Region <b className=\"fontRed\">*</b>\r\n              <Tooltip>Region</Tooltip>\r\n            </span>\r\n          }\r\n          name=\"workspaceRegions\"\r\n          // onChange={this.props.handleChange(\"workspaceRegions\")}\r\n          onChange={(e) => this.handleWorkspaceRegion(e)}\r\n          defaultValue={this.state.region || \"\"}\r\n          value={this.state.region}\r\n          required=\"required\"\r\n        >\r\n          \r\n          <SelectItem hidden value=\"\" text=\"Choose an option\" />\r\n          <SelectItem value=\"NA\" text=\"NA\" />\r\n          <SelectItem value=\"EU\" text=\"EU\" />\r\n        </Select>\r\n        <TextInput\r\n          className=\"bx--text-input bx--text__input\"\r\n          id=\"teamName\"\r\n          name=\"teamName\"\r\n          labelText={\r\n            <span>\r\n              Team Name<b className=\"fontRed\">*</b>\r\n              <Tooltip>MS Team Name</Tooltip>\r\n            </span>\r\n          }\r\n          placeholder=\"Team Name\"\r\n          value={this.state.teamName}\r\n          onBlur={(e) => this.handleInputChange(e)}\r\n          onChange={(e) => this.updateValue(e)}\r\n          // defaultValue = {signingSecret}\r\n          defaultValue={this.state.teamName}\r\n          required\r\n        />\r\n        <TextInput\r\n          className=\"bx--text-input bx--text__input\"\r\n          id=\"teamId\"\r\n          name=\"teamId\"\r\n          labelText= {\r\n            <span>\r\n              Team Id<b className=\"fontRed\">*</b>\r\n              <Tooltip>MS Team Id</Tooltip>\r\n              <a className=\"addWorkspaceLink\" href={`/mui/extract-team-ids`} target=\"_blank\" rel=\"noreferrer\">Get Team Id</a>\r\n            </span>\r\n          }\r\n          placeholder=\"Team Id\"\r\n          value={this.state.teamId}\r\n          onBlur={(e) => this.handleInputChange(e)}\r\n          onChange={(e) => this.updateValue(e)}\r\n          // defaultValue = {signingSecret}\r\n          defaultValue={this.state.teamId}\r\n          required\r\n        />\r\n        <br />\r\n        <span>Click on the 'Get team id' link to fetch the team id and for instruction <a className=\"bx--link\" href={`https://kyndryl.sharepoint.com/sites/ChatOps/SitePages/MS-Teams.aspx`} target=\"_blank\" rel=\"noreferrer\">MS Teams (sharepoint.com)</a></span>\r\n        <br />\r\n        <br />\r\n        <br />\r\n      </Form>\r\n    )\r\n    return (\r\n      <div className=\"divContainer\">\r\n        <div className=\"headerDiv sectionMargin\">\r\n          <BreadCrumb header={this.header} links={this.links} />\r\n        </div>\r\n        <section className=\"sectionMargin mainMargin paddingCostom\">\r\n          <Form className=\"formMain\" onSubmit={this.submit}>\r\n            <TextInput\r\n              labelText={\r\n                <>\r\n                  Service Name <b style={{ color: \"red\" }}>*</b>\r\n                </>\r\n              }\r\n              placeholder=\"Service Name\"\r\n              name=\"name\"\r\n              onChange={this.generateNameHandler(400)}\r\n              defaultValue={this.state.name}\r\n              readOnly={this.state.id}\r\n              required\r\n            />\r\n            <TextInput\r\n              labelText={<>Service Description <b style={{ color: \"red\" }}>*</b> <span className=\"specialCharacterLabel\">(Special characters &lt; &gt; # $ ^ & * \\ = {} ; \\\\ | ? ~ are not allowed)</span></>}\r\n              placeholder=\"Service Description\"\r\n              name=\"description\"\r\n              onChange={this.updateValue}\r\n              defaultValue={this.state.description}\r\n              readOnly={this.state.id}\r\n              required\r\n            />\r\n            <TextArea\r\n              cols={50}\r\n              rows={5}\r\n              labelText={<>Business Justification <b style={{ color: \"red\" }}>*</b> <span className=\"specialCharacterLabel\">(Special characters &lt; &gt; # $ ^ & * \\ = {} ; \\\\ | ? ~ are not allowed)</span></>}\r\n              placeholder=\"Business Justification\"\r\n              name=\"bJustification\"\r\n              onChange={this.updateValue}\r\n              defaultValue={this.state.bJustification}\r\n              readOnly={this.state.id && !(this.state.service.status === 'rejected')}\r\n              required\r\n            />\r\n            {/* <TextInput\r\n              labelText={\r\n                <>\r\n                  Workspace Name <b style={{ color: \"red\" }}>*</b>\r\n                </>\r\n              }\r\n              placeholder=\"Workspace Name\"\r\n              name=\"workspace\"\r\n              onChange={this.updateValue}\r\n              required\r\n            /> */}\r\n            <Select\r\n              id=\"service_type\"\r\n              name=\"service_type\"\r\n              labelText={\r\n                <span>\r\n                  Collaboration Tool <b className=\"fontRed\">*</b>\r\n                  <Tooltip>Collaborative Chat Plateform</Tooltip>\r\n                </span>\r\n              }\r\n              onChange={this.updatecollaborationTool}\r\n              defaultValue={this.state.collaborationTool}\r\n              required\r\n            >\r\n              <SelectItem value=\"SLACK\" text=\"SLACK\" selected={this.state.collaborationTool === 'SLACK'} />\r\n              <SelectItem value=\"TEAMS\" text=\"TEAMS\" selected={this.state.collaborationTool === 'TEAMS'}/>\r\n            </Select>\r\n\r\n            <Select\r\n              id=\"workspace\"\r\n              labelText={\r\n                <span>\r\n                   Workspace Name <b className=\"fontRed\">*</b>\r\n                  <Tooltip>\r\n                    Workspace is made up of channels <br />\r\n                    where user can can communicate and work together.\r\n                    User either can select existing workspace or add new\r\n                    workspace by giving appropriate details\r\n                  </Tooltip>\r\n                  { \r\n                    this.state.collaborationTool === 'TEAMS' ?\r\n                    <a\r\n                      className=\"addWorkspaceLink\"\r\n                      onClick={(e) => {\r\n                        this.showModal();\r\n                      }}\r\n                    >\r\n                      Add Workspace\r\n                    </a>\r\n                    :\r\n                    ''\r\n                  }\r\n                </span>\r\n              }\r\n              name=\"workspace\"\r\n              onChange={this.updateValue}\r\n              defaultValue={this.state.workspace}\r\n              required\r\n            >\r\n              <SelectItem disabled value=\"\" text=\"Choose an option\" />\r\n              {this.state.workspacesList.length &&\r\n                this.state.workspacesList.map((workspace) => (\r\n\r\n                  (this.state.collaborationTool === 'TEAMS' && workspace.workspaceType === 'TEAMS') ? \r\n                    <SelectItem\r\n                      key={workspace._id}\r\n                      value={workspace.name}\r\n                      text={workspace.name}\r\n                      selected={workspace.name === this.state.workspace}\r\n                    />\r\n                  : (this.state.collaborationTool === 'SLACK' && workspace.workspaceType !== 'TEAMS') ?\r\n                  <SelectItem\r\n                      key={workspace._id}\r\n                      value={workspace.name}\r\n                      text={workspace.name}\r\n                      selected={workspace.name === this.state.workspace}\r\n                    /> \r\n                  :\r\n                  ''\r\n                ))}\r\n            </Select>\r\n            {this.state.showPopup ? (\r\n                      <div className=\"popup\">\r\n                        <div className=\"bx--modal-container modal-css\">\r\n                          <div className=\"bx--modal-header\">\r\n                            <p\r\n                              className=\"bx--modal-header__label bx--type-delta\"\r\n                              id=\"modal-addWorkspace-label\"\r\n                            ></p>\r\n                            <p\r\n                              className=\"bx--modal-header__heading bx--type-beta\"\r\n                              id=\"modal-addWorkspace-heading\"\r\n                            >\r\n                              Add Workspace\r\n                            </p>\r\n                            <button\r\n                              className=\"bx--modal-close\"\r\n                              type=\"button\"\r\n                              data-modal-close\r\n                              aria-label=\"close modal\"\r\n                            >\r\n                              <Close32\r\n                                className=\"iconEditSize\"\r\n                                onClick={this.cancelModal}\r\n                              />\r\n                            </button>\r\n                          </div>\r\n                          <div className=\"bx--modal-content\">\r\n                            {this.state.invalidMsg && (\r\n                              <h4>\r\n                                <b className=\"fontRed\">\r\n                                  {this.state.invalidMsg}\r\n                                </b>\r\n                              </h4>\r\n                            )}\r\n                            {\r\n                               addWorkspaceTeamsForm\r\n                            }\r\n                          </div>\r\n                          <div className=\"bx--modal-content--overflow-indicator\"></div>\r\n\r\n                          <div className=\"bx--modal-footer\">\r\n                            <Button\r\n                              kind=\"secondary\"\r\n                              className=\"addWorkspace\"\r\n                              onClick={this.cancelModal}\r\n                            >\r\n                              Cancel\r\n                            </Button>\r\n                            <Button\r\n                              kind=\"primary\"\r\n                              onClick={this.saveWorkspace}\r\n                              type=\"submit\"\r\n                              className=\"addWorkspace\"\r\n                            >\r\n                              Add Workspace\r\n                            </Button>\r\n                            {/* <button className=\"bx--btn bx--btn--secondary\" type=\"button\" data-modal-close>Cancel</button> */}\r\n                            {/* <button className=\"bx--btn bx--btn--primary\" type=\"button\"   data-modal-primary-focus>Add Workspace</button> */}\r\n                          </div>\r\n                        </div>\r\n                        <span tabindex=\"0\"></span>\r\n                      </div>\r\n                    ) : null}\r\n            <TextInput\r\n              labelText={\r\n                <>\r\n                  Owners email (email comma separated){\" \"}\r\n                  {/* <b style={{ color: \"red\" }}>*</b> */}\r\n                </>\r\n              }\r\n              placeholder=\"Owners email (email comma separated)\"\r\n              name=\"owners\"\r\n              onChange={this.emailHandler}\r\n              defaultValue={this.state.owners}\r\n            />\r\n            <TextInput\r\n              labelText={<>Collaborator email (email comma separated)</>}\r\n              placeholder=\"collaborator email (email comma separated)\"\r\n              name=\"collaborators\"\r\n              onChange={this.emailHandler}\r\n              defaultValue={this.state.collaborators}\r\n            />\r\n            <br></br>\r\n            {\r\n                this.state['specialCharacterErr'] &&\r\n                <small className=\"fontRed\">\r\n                    <b className=\"errorMsg specialCharErr\">{this.state['specialCharacterErr']}</b>\r\n                </small>\r\n            }\r\n            <br></br>\r\n            <Button className=\"addAccBtn addBtnCss addBtnPACss my-2\" type=\"submit\">Add Service</Button>\r\n            {\r\n                  this.state.uniqueCheck == false &&\r\n                  <small className=\"fontRed\">\r\n                      <b className=\"errorMsg\">Service name already existing</b>\r\n                  </small>\r\n            }\r\n          </Form>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddService;\r\n\r\nclass Payload {\r\n  constructor(stateObj) {\r\n    this.id = stateObj.id || undefined;\r\n    this.name = stateObj.name;\r\n    this.description = stateObj.description;\r\n    this.justification = stateObj.bJustification;\r\n    this.collaborationTool = stateObj.collaborationTool;\r\n    console.log(`collabTool---${stateObj.collaborationTool}`);\r\n    if(stateObj.collaborationTool === 'TEAMS'){\r\n        let workspaceData = stateObj.workspacesList.filter((obj) => {\r\n          if(obj.type && obj.type === 'new' && obj.name === stateObj.workspace){\r\n            return obj;\r\n          }\r\n        });\r\n        console.log(`workspaceData---${JSON.stringify(workspaceData)}`);\r\n        if(workspaceData.length > 0){\r\n          delete workspaceData[0].type;\r\n          delete workspaceData[0].name;\r\n          this.workspace = workspaceData[0];\r\n        }else{\r\n          this.workspace = stateObj.workspace;\r\n        }\r\n      \r\n    } else{\r\n      this.workspace = stateObj.workspace;\r\n    }\r\n    \r\n    this.owners = stateObj.owners.split(\",\").map((email) => email.trim());\r\n    this.collaborators = stateObj.collaborators.split(\",\").map((email) => email.trim());\r\n    \r\n  }\r\n}\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ServiceKeys\\Service-keys.jsx",["745","746","747","748","749","750"],"import {\r\n  Accordion,\r\n  AccordionItem,\r\n  Button,\r\n  Column,\r\n  ComposedModal,\r\n  CopyButton,\r\n  Grid,\r\n  ModalBody,\r\n  ModalHeader,\r\n  Row,\r\n  Tag,\r\n  TextInput,\r\n  Checkbox\r\n} from \"carbon-components-react\";\r\nimport React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {\r\n  Copy32,\r\n  Information32,\r\n  Reset32,\r\n  TrashCan32,\r\n} from \"@carbon/icons-react\";\r\nimport BreadCrumb from \"../SuperAdmin/SACommands/CommandsBreadCrumb\";\r\nimport qs from \"qs\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\n\r\nclass ServiceKeys extends Component {\r\n  header = \"Service Keys\";\r\n  links = {\r\n    Home: \"/mui/home\",\r\n    Services: \"/mui/services\",\r\n    \"Service Keys\": \"/mui/service-keys\",\r\n  };\r\n  color = {\r\n    approved: \"green\",\r\n    pending: \"cyan\",\r\n    rejected: \"red\",\r\n  };\r\n  state = {\r\n    id: \"\",\r\n    service: {},\r\n    modalOpen: false,\r\n    modalData: {},\r\n    allowPlainAuth: false\r\n  };\r\n  async componentDidMount() {\r\n    const { id } = qs.parse(this.props.location.search, {\r\n      ignoreQueryPrefix: true,\r\n    });\r\n    this.setState({\r\n      id,\r\n    });\r\n    const res$ = fetch(\"/mui/registeredService/\" + id);\r\n    trackPromise(res$);\r\n    const res = await res$;\r\n    if (res.status == 200) {\r\n      const { serviceData } = await res.json();\r\n      this.setState({\r\n        service: serviceData,\r\n      });\r\n    }\r\n  }\r\n  copyHandler = (payload) => () => {\r\n    navigator.clipboard.writeText(payload);\r\n  };\r\n  gotoAddKeyForm = () => {\r\n\r\n    let url =\r\n      \"/mui/add-serviceKey\" +\r\n      \"?\" +\r\n      \"serviceId=\" +\r\n      this.state.id +\r\n      \"&sourceCode=\" +\r\n      this.state.service.SourceIdentificationCode;\r\n    this.props.history.push(url);\r\n  };\r\n  saveAuth(name, event) {\r\n    this.setState({\r\n        [event.target.name]: event.target.checked,\r\n      });\r\n      const saveAuthData = {\r\n        allowApi: event.target.checked,\r\n        serviceName: this.state.service.SourceIdentificationCode,\r\n        keyName: event.target.name\r\n      };\r\n      trackPromise( fetch(\"/mui/saveAuthServices\",\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n                \"Content-type\": \"application/json\",\r\n              },\r\n        body: JSON.stringify(saveAuthData),\r\n      }).then(async (result) => {\r\n            if (result.status == 200) {\r\n              const { serviceData }  = await result.json();\r\n              this.setState({\r\n                service: serviceData,\r\n              });\r\n            }\r\n      })\r\n       \r\n      );\r\n  \r\n      \r\n  };\r\n  getKeyInfo = (name) => () => {\r\n    this.setState({\r\n      modalOpen: true,\r\n      modalData: {\r\n        name,\r\n        ...this.state.service.keySpecifications[name],\r\n      },\r\n    });\r\n  };\r\n  closeModal = () => this.setState({ modalOpen: false });\r\n  render() {\r\n    const { keys, keySpecifications, SourceIdentificationCode } =\r\n      this.state.service;\r\n    return (\r\n      <div className=\"divContainer\">\r\n        <div className=\"headerDiv sectionMargin  mainMargin\">\r\n          <BreadCrumb header={this.header} links={this.links} />\r\n          <div className=\"breadCrumpDiv\">\r\n            <h4>Service: {SourceIdentificationCode}</h4>\r\n          </div>\r\n        </div>\r\n        <section className=\"sectionMargin mainMargin\">\r\n          <Grid>\r\n            <Row>\r\n              <Column>\r\n                <div className=\"searchDivMain\">\r\n                  <Button\r\n                    className=\"addAccBtn addBtnCss addBtnPACss\"\r\n                    onClick={this.gotoAddKeyForm}\r\n                  >\r\n                    Add Key\r\n                  </Button>\r\n                </div>\r\n              </Column>\r\n            </Row>\r\n            {!keys && (\r\n              <Row>\r\n\r\n                <Column>\r\n                <p style={{textAlign: \"center\",}}>No Keys Found.</p>\r\n\r\n                </Column>\r\n              </Row>\r\n            )}\r\n            <Row>\r\n                <Column>\r\n                    <p className=\"externalLink\" >\r\n                        Click <a className=\"externalLinkClass\" href=\"https://kyndryl.sharepoint.com/sites/ChatOps/SitePages/ChatOps-APIS.aspx\" target=\"_blank\" rel=\"noopener noreferrer\" >HERE</a> to know more about using signed payload\r\n                    </p>                      \r\n                </Column>\r\n            </Row>\r\n            {keys &&\r\n              Object.entries(keys).map(([keyName, value]) => (\r\n                <div className=\"my-2\" key={keyName}>\r\n                  <Row>\r\n                    <Column>\r\n                      <div className=\"p-2 shadow center\">\r\n                        <Accordion\r\n                          disabled={\r\n                            (keySpecifications[keyName].status == \"rejected\")\r\n                          }\r\n                        >\r\n                          <AccordionItem\r\n                            title={\r\n                              <>\r\n                                {keyName}{\" \"}\r\n                                <Tag type=\"green\">\r\n                                  type {keySpecifications[keyName].type}\r\n                                </Tag>{\" \"}\r\n                                {keySpecifications[keyName] && (\r\n                                  <Tag\r\n                                    type={\r\n                                      this.color[\r\n                                        keySpecifications[keyName].status\r\n                                      ]\r\n                                    }\r\n                                  >\r\n                                    {keySpecifications[keyName].status}\r\n                                  </Tag>\r\n                                )}\r\n                              </>\r\n                            }\r\n                            disabled={keySpecifications[keyName].status === 'approved' ? false : true}\r\n                          >\r\n                            <Grid>\r\n                              <Row>\r\n                                <Column lg={3}>\r\n                                  <div className=\"display-inline-flex\">\r\n                                    <TextInput\r\n                                      labelText=\"Service Name\"\r\n                                      defaultValue={keyName}\r\n                                      readOnly\r\n                                    />\r\n                                    <div className=\"mx-2 pt-18\">\r\n                                      <CopyButton\r\n                                        onClick={this.copyHandler(\r\n                                            keyName\r\n                                        )}\r\n                                      />\r\n                                    </div>\r\n                                  </div>\r\n                                </Column>\r\n                                <Column lg={3}>\r\n                                  <div className=\"display-inline-flex\">\r\n                                    <TextInput\r\n                                      labelText=\"Service\"\r\n                                      defaultValue={SourceIdentificationCode}\r\n                                      readOnly\r\n                                    />\r\n                                    <div className=\"mx-2 pt-18\">\r\n                                      <CopyButton\r\n                                        onClick={this.copyHandler(\r\n                                          SourceIdentificationCode\r\n                                        )}\r\n                                      />\r\n                                    </div>\r\n                                  </div>\r\n                                </Column>\r\n                                <Column lg={3}>\r\n                                  <TextInput\r\n                                    labelText=\"Service key\"\r\n                                    defaultValue={value}\r\n                                    readOnly\r\n                                  />\r\n                                </Column>\r\n                                <Column lg={2}>\r\n                                  <div>\r\n                                    <br />\r\n                                  </div>\r\n                                  <div className=\"display-inline-flex pt-25\">\r\n                                    <Button\r\n                                      kind=\"ghost\"\r\n                                      renderIcon={Copy32}\r\n                                      iconDescription=\"Copy to clipboard\"\r\n                                      hasIconOnly\r\n                                      onClick={this.copyHandler(value)}\r\n                                    />\r\n                                    {/* <Button\r\n                                    kind=\"ghost\"\r\n                                    renderIcon={Reset32}\r\n                                    iconDescription=\"Regenerate Key\"\r\n                                    hasIconOnly\r\n                                  />\r\n                                      <Button\r\n                                        kind=\"ghost\"\r\n                                        renderIcon={TrashCan32}\r\n                                        iconDescription=\"Delete\"\r\n                                        hasIconOnly\r\n                                      /> */}\r\n                                    <Button\r\n                                      kind=\"ghost\"\r\n                                      renderIcon={Information32}\r\n                                      iconDescription=\"Click to see more information\"\r\n                                      hasIconOnly\r\n                                      onClick={this.getKeyInfo(keyName)}\r\n                                    />\r\n                                    <Checkbox\r\n                                        labelText=\"Allow auth via API key [Less Secure]\"\r\n                                        id={\"allowPlainAuth_\" + keyName}\r\n                                        name={keyName}\r\n                                        checked={keySpecifications[keyName].allowPlainAuth || this.state.allowPlainAuth} \r\n                                        onClick={(event) => { this.saveAuth('checkbox-1', event)}}\r\n                                    />\r\n                                  </div>\r\n                                </Column>\r\n                              </Row>\r\n                            </Grid>\r\n                          </AccordionItem>\r\n                        </Accordion>\r\n                      </div>\r\n                    </Column>\r\n                  </Row>\r\n                </div>\r\n              ))}\r\n          </Grid>\r\n        </section>\r\n        {this.state.service.keySpecifications && typeof document === \"undefined\"\r\n          ? null\r\n          : ReactDOM.createPortal(\r\n              <ComposedModal\r\n                open={this.state.modalOpen}\r\n                onClose={this.closeModal}\r\n              >\r\n                <ModalBody className=\"my-2 py-2\" hasScrollingContent={true}>\r\n                  <div>\r\n                    <p>Issued To:</p>\r\n                    <Tag>{this.state.modalData.issuedTo}</Tag>\r\n                  </div>\r\n                  <br />\r\n                  <div>\r\n                    <p>Issued By:</p>\r\n                    <Tag>{this.state.modalData.issuedBy}</Tag>\r\n                  </div>\r\n                  <br />\r\n                  <div>\r\n                    <p>Selected Scopes:</p>\r\n                    {this.state.modalData.scopes &&\r\n                      this.state.modalData.scopes.map((scope) => (\r\n                        <Tag key={scope}>{scope}</Tag>\r\n                      ))}\r\n                  </div>\r\n                  <br />\r\n                  {this.state.modalData.associatedAccounts && (\r\n                    <div>\r\n                      <p>Approved Accounts:</p>\r\n                      {this.state.modalData.scopes &&\r\n                        this.state.modalData.associatedAccounts.map((acc) => (\r\n                          <Tag key={acc}>{acc}</Tag>\r\n                        ))}\r\n                    </div>\r\n                  )}\r\n                  <br />\r\n                  {this.state.modalData.rejectedAccount && this.state.modalData.type === \"2\" && (\r\n                    <div>\r\n                      <p>Rejected Accounts:</p>\r\n                      {this.state.modalData.scopes &&\r\n                        this.state.modalData.rejectedAccount.map((acc) => (\r\n                          <Tag key={acc}>{acc}</Tag>\r\n                        ))}\r\n                    </div>\r\n                  )}\r\n                </ModalBody>\r\n              </ComposedModal>,\r\n              document.body\r\n            )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ServiceKeys;\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ServiceKeys\\Add-Key.jsx",["751","752","753","754","755","756","757","758"],"import {\r\n  Button,\r\n  Checkbox,\r\n  Column,\r\n  Form,\r\n  FormGroup,\r\n  ComposedModal,\r\n  ModalBody,\r\n  Grid,\r\n  Row,\r\n  Select,\r\n  SelectItem,\r\n  TextInput,\r\n  Tooltip,\r\n} from \"carbon-components-react\";\r\nimport React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport qs from \"qs\";\r\nimport BreadCrumb from \"../SuperAdmin/SACommands/CommandsBreadCrumb\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { validate } from '../../validation/validate.js';\r\n\r\nclass AddKey extends Component {\r\n  header = \"Add Service Key\";\r\n  links = {\r\n    Home: \"/mui/home\",\r\n    Services: \"/mui/services\",\r\n    \"Service Keys\": \"/mui/services\",\r\n    \"Add Service Key\": \"/mui/add-serviceKey\",\r\n  };\r\n  state = {\r\n    serviceId: \"\",\r\n    sourceCode: \"\",\r\n    name: \"\",\r\n    issuedTo: \"\",\r\n    type: \"\",\r\n    scopes: [],\r\n    accounts: [],\r\n    allScopes: [],\r\n    filteredScopes: [],\r\n    allAccounts: [],\r\n    errMsg: \"\",\r\n    modalOpen: false,\r\n    serviceDetails: {}\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const accRes$ = fetch(\"/mui/muiaccounts\");\r\n    const { serviceId, sourceCode } = qs.parse(this.props.location.search, {\r\n      ignoreQueryPrefix: true,\r\n    });\r\n    this.state.sourceCode = sourceCode;\r\n    this.state.serviceId = serviceId;\r\n    this.links[\"Service Keys\"] = \"/mui/service-keys?id=\" + serviceId;\r\n    const res = await fetch(\"/mui/serviceKeyScopes\");\r\n    if (res.status !== 200)\r\n      return this.setState({ errMsg: \"failed to fetch scopes\" });\r\n\r\n    const { scopes } = await res.json();\r\n    if (!scopes) return this.setState({ errMsg: \"failed to fetch scopes\" });\r\n\r\n    const { config_value } = scopes;\r\n    this.setState({\r\n      allScopes: Object.values(config_value),\r\n    });\r\n\r\n    const accRes = await accRes$;\r\n    if (accRes.status !== 200)\r\n      return this.setState({ errMsg: \"failed to fetch accounts\" });\r\n\r\n    const { accounts } = await accRes.json();\r\n\r\n    const resServiceDet = await fetch(\"/mui/serviceKeyDetail/\"+sourceCode);\r\n    const  { sourceSystemsData }  = await resServiceDet.json();\r\n    console.log(`sourceSystemsData---${JSON.stringify(sourceSystemsData)}`);\r\n    this.setState({\r\n      allAccounts: accounts,\r\n      serviceDetails: sourceSystemsData\r\n    });\r\n  }\r\n\r\n  updateValue = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value.trim(),\r\n    });\r\n    if (e.target.name === \"type\") this.selectType(e.target.value);\r\n  };\r\n\r\n  selectType = (type) => {\r\n    const { scopes, accounts, allScopes } = this.state;\r\n    scopes.length = 0;\r\n    accounts.length = 0;\r\n    this.setState({\r\n      filteredScopes: allScopes.filter((scope) =>\r\n        scope.type?.includes(\"\" + type)\r\n      ),\r\n    });\r\n  };\r\n\r\n  handleCheckBox = (name) => (e) => {\r\n    const prop = this.state[name];\r\n    let value = undefined;\r\n    if (e.target.checked) value = e.target.value;\r\n    const i = +e.target.name;\r\n    prop[i] = value;\r\n  };\r\n  emailHandler = (e) => {\r\n    e.target.setCustomValidity(\"\");\r\n    if (e.target.value.length == 0) return (this.state.collaborators = \"\");\r\n    const email = e.target.value;\r\n    const allowedDomains =\r\n      process.env.REACT_APP_ALLOWED_DOMAINS?.split(\",\") || [];\r\n    const validDomain = allowedDomains.find((domain) =>\r\n      email.toLowerCase().includes(domain + \".\")\r\n    );\r\n\r\n    if (validDomain) {\r\n      this.updateValue(e);\r\n    } else e.target.setCustomValidity(\"Please provide valid email...\");\r\n  };\r\n\r\n\r\n  submit = async (e = new Event()) => {\r\n    e.preventDefault();\r\n    // creating payload\r\n    const { sourceCode, name, issuedTo, type, scopes, accounts } = this.state;\r\n    const payload = {\r\n      sourceCode,\r\n      name,\r\n      issuedTo,\r\n      type,\r\n      scopes: scopes.filter(Boolean),\r\n    };\r\n\r\n    if (!payload.scopes.length) {\r\n      return this.setState({\r\n        errMsg: \"Select atleast one scope...\",\r\n      });\r\n    }\r\n    if (type == 2) {\r\n      payload.accounts = accounts.filter(Boolean);\r\n      if (!payload.accounts.length) {\r\n        return this.setState({\r\n          errMsg: \"Select atleast one account with type 2 key...\",\r\n        });\r\n      }\r\n    }\r\n     // SpecialCharacter validation\r\n    var validateFields = validate(payload);\r\n    if(validateFields.length > 0){\r\n        var message = \"\";\r\n        for(var i =0; i<validateFields.length; i++){\r\n            var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n            if(element){\r\n                message += element.title + \", \";\r\n            }else{\r\n                message += validateFields[i] + ', '\r\n            }\r\n        }\r\n        this.setState({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n    }else{\r\n        const res$ = fetch(\"/mui/createServiceKey\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(payload),\r\n        });\r\n        trackPromise(res$);\r\n    \r\n        const res = await res$;\r\n    \r\n        if (res.status !== 200) {\r\n          return this.setState({\r\n            errMsg: \"Could not created.\",\r\n          });\r\n        }\r\n        if (res.status === 200) {\r\n          if(type == 2 || type == 3){\r\n            this.setState({\r\n              modalOpen: true,\r\n              modalData: {\r\n                name,\r\n              },\r\n            });\r\n          }\r\n          if(!this.state.modalOpen)\r\n            this.props.history.push(\"/mui/service-keys?id=\" + this.state.serviceId);\r\n        }\r\n      } \r\n  };\r\n  closeModal = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n        showPopup: false,\r\n    });\r\n    this.props.history.push(\"/mui/service-keys?id=\" + this.state.serviceId);\r\n};\r\n\r\nisUnique = async (name) => {\r\n  try {\r\n    const res = await fetch(`/mui/uniqueServiceKeys/${this.state.serviceId}/${name}`);\r\n\r\n    if (res.status == 200) {\r\n      const { unique } = await res.json();\r\n      return unique;\r\n    } else return false;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n\r\ngenerateNameHandler = (time) => {\r\n  let timer;\r\n  return async (e = new Event()) => {\r\n    clearTimeout(timer);\r\n    timer = setTimeout(async () => {\r\n      const { value } = e.target;\r\n      if (!value) {\r\n        e.target.setCustomValidity(\"\");\r\n        return;\r\n      }\r\n      e.target.setCustomValidity(\"Verifying......\");\r\n      const unique = await this.isUnique(value);\r\n      if (unique) {\r\n        e.target.setCustomValidity(\"\");\r\n        this.state.name = value;\r\n      } else e.target.setCustomValidity(\"Service Key name already exists...\");\r\n    }, time);\r\n  };\r\n};\r\n  //closeModal = () => this.setState({ modalOpen: false });\r\n  render() {\r\n    return (\r\n      <div className=\"divContainer\">\r\n        <div className=\"headerDiv sectionMargin\">\r\n          <BreadCrumb header={this.header} links={this.links} />\r\n          <div className=\"breadCrumpDiv\">\r\n            <h4>Service: {this.state.sourceCode}</h4>\r\n          </div>\r\n        </div>\r\n        <section className=\"sectionMargin mainMargin paddingCostom\">\r\n          <Form className=\"formMain\" onSubmit={this.submit}>\r\n            <TextInput\r\n              labelText={\r\n                <>\r\n                  Service Key Name <b style={{ color: \"red\" }}>*</b>\r\n                </>\r\n              }\r\n              placeholder=\"Service Key Name\"\r\n              name=\"name\"\r\n              onChange={this.generateNameHandler(400)}\r\n              required\r\n            />\r\n            <TextInput\r\n              type=\"email\"\r\n              labelText={\r\n                <>\r\n                  Issued To <b style={{ color: \"red\" }}>*</b>\r\n                </>\r\n              }\r\n              placeholder=\"Issued To (email)\"\r\n              name=\"issuedTo\"\r\n              onChange={this.emailHandler}\r\n              required\r\n            />\r\n            <Select\r\n              labelText={\r\n                <>\r\n                  Type <b className=\"fontRed\">*</b>{\" \"}\r\n                  <Tooltip align=\"start\">\r\n                    Type 1 – (Service Specific) Tokens can be used for calling\r\n                    the apis on channels that have been associated with the\r\n                    service.\r\n                    <br />\r\n                    Type 2 – (Account Specific) Tokens can be used for calling\r\n                    the apis on channels that has been associated with the\r\n                    account selected, ChatOps admin and the respective account\r\n                    DPE need to authorize the token to be activated for the\r\n                    respective account.\r\n                    <br />\r\n                    Type 3 – (Global) Tokens can be used for any channels,\r\n                    Chatops program authorization is required for issuing this\r\n                    token.\r\n                  </Tooltip>\r\n                </>\r\n              }\r\n              id=\"type\"\r\n              name=\"type\"\r\n              onChange={this.updateValue}\r\n              defaultValue=\"\"\r\n              required\r\n            >\r\n              <SelectItem disabled hidden value=\"\" text=\"Choose an option\" />\r\n              <SelectItem value=\"1\" text=\"Type 1 - (Service Specific)\" />\r\n              <SelectItem value=\"2\" text=\"Type 2 – (Account Specific)\" />\r\n              <SelectItem value=\"3\" text=\"Type 3 – (Global)\" />\r\n            </Select>\r\n            {this.state.type && (\r\n              <FormGroup\r\n                legendText={\r\n                  <>\r\n                    Scopes <b className=\"fontRed\">*</b>\r\n                  </>\r\n                }\r\n                onChange={this.handleCheckBox(\"scopes\")}\r\n              >\r\n                <Grid className=\"mx-height-200\">\r\n                  <Row>\r\n                    {this.state.filteredScopes.map((scope, i) => (\r\n                      <Column key={i + scope.id} lg={6}>\r\n                        <Checkbox\r\n                          id={i + scope.id}\r\n                          name={i}\r\n                          value={scope.id}\r\n                          labelText={scope.label}\r\n                        />\r\n                      </Column>\r\n                    ))}\r\n                  </Row>\r\n                </Grid>\r\n              </FormGroup>\r\n            )}\r\n            {this.state.type == 2 && (\r\n              <FormGroup\r\n                name=\"accounts\"\r\n                legendText={\r\n                  <>\r\n                    Accounts <b className=\"fontRed\">*</b>\r\n                  </>\r\n                }\r\n                onChange={this.handleCheckBox(\"accounts\")}\r\n              >\r\n                <Grid className=\"mx-height-200\">\r\n                  <Row>\r\n                    {this.state.allAccounts.map((acc, i) => (\r\n                      (acc?.collaborationTool && acc?.collaborationTool?.toLowerCase() === this.state.serviceDetails.collabTool ? \r\n                      <Column key={acc._id} lg={6}>\r\n                        <Checkbox\r\n                          id={acc._id}\r\n                          name={i}\r\n                          value={acc.accountCode}\r\n                          labelText={acc.accountName}\r\n                        />\r\n                      </Column> : '')\r\n                    ))}\r\n                  </Row>\r\n                </Grid>\r\n              </FormGroup>\r\n            )}\r\n            {this.state.errMsg && (\r\n              <b className=\"fontRed\">{this.state.errMsg}</b>\r\n            )}\r\n            <br />\r\n            <br />\r\n            {\r\n                this.state['specialCharacterErr'] &&\r\n                <small className=\"fontRed\">\r\n                    <b className=\"errorMsg specialCharErr\">{this.state['specialCharacterErr']}</b>\r\n                </small>\r\n            }\r\n            <br />\r\n            <Button className=\"addKeySK\" type=\"submit\">Add Key</Button>\r\n            <div><br></br></div>\r\n            { typeof document === \"undefined\"\r\n          ? null\r\n          : ReactDOM.createPortal(\r\n              <ComposedModal\r\n                open={this.state.modalOpen}\r\n              >\r\n                <ModalBody className=\"my-2 py-2\" hasScrollingContent={true}>\r\n                  <div>\r\n                    <p>Your request for key <b>{this.state.name}</b> is submitted successfully to ChatOps Admin for Approval</p>\r\n                  </div>\r\n                  <br />\r\n                  <Button  className=\"btnSACss\" onClick={this.closeModal} >Ok</Button>\r\n                </ModalBody>\r\n              </ComposedModal>,\r\n              document.body\r\n            )}\r\n          </Form>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddKey;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\Webhooks\\WebhookMain.jsx",[],"C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\groups\\GroupDetails.jsx",[],"C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\Webhooks\\AddWebhook.jsx",["759","760"],"import React, { useEffect, useState } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button,TextInput, Form, Select, SelectItem, ToastNotification, TooltipIcon } from 'carbon-components-react';\r\nimport { Link, withRouter, useParams, useHistory } from 'react-router-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport validator from 'validator';\r\nimport { InformationFilled16 } from \"@carbon/icons-react\";\r\nimport { validate } from '../../validation/validate.js';\r\nconst AddWebhook=() => {\r\n    let history = useHistory();\r\n    const [uiData, setUIData] = useState({});\r\n    const [error, setErrorMessage] = useState({});\r\n    const { id } = useParams();\r\n    const [isFormValid, setIsValidForm] = useState(true);\r\n    const [invalidForm, setInvalidForm] = useState({\r\n        toolType: false,\r\n        workspace: false,\r\n        apiKey: false,\r\n        assignedMembers:false,\r\n        serviceAccountEmailId:false,\r\n        webhookName:false,\r\n        specialCharacterPresent: false\r\n      }); \r\n    const [form, setForm] = useState({\r\n        toolType: '',\r\n        workspace: '',\r\n        apiKey: '',\r\n        assignedMembers:'',\r\n        serviceAccountEmailId:'',\r\n        webhookName:''\r\n    }); \r\n    const [checkBoxInfo, setCheckBoxInfo] = useState({\r\n        channelAutoCreate: true,\r\n        allowUpdates: true,\r\n    });\r\n    const [showToast, setToast] = useState(false);\r\n    useEffect(() => {\r\n        trackPromise(\r\n            fetch(\"/mui/getWebhookFormData/\"+id)\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((webhookData) => {\r\n                setUIData(webhookData.dbData);\r\n            })\r\n        );\r\n    },[]);\r\n    const handleInputChange = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            setInvalidForm({\r\n                ...invalidForm,\r\n                [e.target.name]: true,\r\n              });\r\n            return;\r\n        }\r\n        setForm({\r\n            ...form,\r\n            [e.target.name]: e.target.value,\r\n          });\r\n    };\r\n    const handleCheckbox=(e) => {\r\n        setCheckBoxInfo({\r\n            ...checkBoxInfo,\r\n            [e.target.name]: e.target.checked,\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log('Calling useeffect');\r\n        let isValidForm = true;\r\n        let isValidserviceAccountEmailId = false;\r\n        let isValidassignedMembers = false;\r\n        if(!validator.isEmpty(form.serviceAccountEmailId) && !validator.isEmail(form.serviceAccountEmailId)) {\r\n            isValidserviceAccountEmailId = true;\r\n             isValidForm = false;\r\n        } \r\n        if(form.assignedMembers.indexOf(',') > -1){\r\n            const assignedList = form.assignedMembers.split(',');\r\n            for(let i=0;i < assignedList.length; i++) {\r\n                if(!validator.isEmpty(assignedList[i]) && !validator.isEmail(assignedList[i].trim())) {\r\n                    isValidassignedMembers = true;\r\n                    isValidForm = false;\r\n                }\r\n            }\r\n         }else {\r\n            if(!validator.isEmpty(form.assignedMembers) && !validator.isEmail(form.assignedMembers)) {\r\n                isValidassignedMembers = true;\r\n                isValidForm = false;\r\n            }\r\n        }\r\n        setInvalidForm( (invalidForm) => {\r\n            return {\r\n                ...invalidForm,\r\n                serviceAccountEmailId : isValidserviceAccountEmailId,\r\n                assignedMembers: isValidassignedMembers,\r\n            }\r\n          });\r\n        setIsValidForm(isValidForm);\r\n    },[form.assignedMembers, form.serviceAccountEmailId]);\r\n    \r\n    const formSubmit= (e) => {\r\n        e.preventDefault();\r\n        if(!isFormValid) {\r\n            return false;\r\n        }\r\n        const webhookData = {\r\n            toolType: form.toolType,\r\n            workspace: form.workspace,\r\n            channelAutoCreate: checkBoxInfo.channelAutoCreate,\r\n            allowUpdates:checkBoxInfo.allowUpdates,\r\n            apiKey: form.apiKey,\r\n            reqid: id,\r\n            assignedMembers: form.assignedMembers,\r\n            serviceAccountEmailId: form.serviceAccountEmailId,\r\n            isEnabled: true,\r\n            webhookName:form.webhookName,\r\n        };\r\n         // SpecialCharacter validation\r\n        var validateFields = validate(webhookData);\r\n        if(validateFields.length > 0){\r\n            var message = \"\";\r\n            for(var i =0; i<validateFields.length; i++){\r\n                var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n                if(element){\r\n                    message += element.title + \", \";\r\n                }else{\r\n                    message += validateFields[i] + ', '\r\n                }\r\n            }\r\n            setInvalidForm({\r\n                ...invalidForm,\r\n                [\"specialCharacterPresent\"]: true,\r\n              });\r\n              setErrorMessage({specialCharacterErr: `Special Character not allowed in field ${message}`});\r\n            // setInvalidForm({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n        }else{\r\n            trackPromise(\r\n                fetch('/mui/saveWebhooks' , {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify(webhookData)\r\n                })\r\n                .then((result) => {\r\n                    if (result.status === 404 || result.status === 400 || result.status === 500)  {\r\n                        result.json().then((object)=> {\r\n                            setErrorMessage({resErrMsg: object.webhookError});\r\n                        })\r\n                    } else if (result.status === 409) {\r\n                        result.json().then((object)=> {\r\n                            setErrorMessage({errorMessage: object.webhookError});\r\n                        })\r\n                    } else if(result.status === 200){\r\n                        setToast(true);\r\n                        const redirectUrl = \"/mui/webhooks/\"+id;\r\n                        history.push(redirectUrl);\r\n                    }\r\n                })\r\n                .catch(err => { \r\n                    setErrorMessage({errorMessage: err.message});\r\n                })\r\n            );\r\n        }\r\n    }\r\n    \r\n    const handleCancel=(e) => {\r\n        const redirectUrl = \"/mui/webhooks/\"+id;\r\n        history.push(redirectUrl);\r\n    }\r\n    const fieldInfo = {\r\n        webhookName: 'Unique name for a webhook',\r\n        workSpace:'Appropriate slack workspace where channel needs to be created',\r\n        apiKey: 'Pager Duty/Tools API access key',\r\n        serviceAccountEmailId: 'Pager Duty Account Owner email Id',\r\n        assignedMembers: 'Default members who will get added to the Slack channel'\r\n    }\r\n    const divItemStyles = {\r\n        display:'inline',\r\n        width:'90%'\r\n    };\r\n    const toolTipStyle = {\r\n        paddingTop: '50px'\r\n    }\r\n    return (\r\n        <div className=\"divContainer\">\r\n             {showToast?<ToastNotification \r\n                    title=\"Add Webhook\" \r\n                    subtitle=\"Saved webhook details successfully\" \r\n                    timeout={0}\r\n                    caption=\"\" \r\n                    notificationType='toast'\r\n                    kind='success'\r\n                    role='alert'\r\n                    style={{ marginBottom: '.5rem' }}\r\n                />:\"\"}\r\n            <div className=\"breadCrumpDiv headerDiv sectionMargin  mainMargin\">\r\n                <Breadcrumb>\r\n                    <BreadcrumbItem>\r\n                        <Link to=\"/mui/home\">Home</Link>\r\n                    </BreadcrumbItem>\r\n                    <BreadcrumbItem>\r\n                        <Link to={\"/mui/webhooks/\"+id}>Webhooks</Link>\r\n                    </BreadcrumbItem>\r\n                    <BreadcrumbItem isCurrentPage>\r\n                        <Link to=\"/mui/addWebhook\" >Add Webhooks</Link>\r\n                    </BreadcrumbItem>\r\n                </Breadcrumb> \r\n                <h2 className=\"headerText\">Add Webhook</h2>\r\n            </div>\r\n            <section className=\"sectionMargin mainMargin paddingCostom\">\r\n                <div className=\"formDivSA\">\r\n                    <Form  onSubmit={formSubmit}>\r\n                        <div style={{display : 'flex',flexDirection:'row'}}>\r\n                            <div style={divItemStyles}>\r\n                                <TextInput className=\"bx--text-input bx--text__input\" id=\"webhookName\" name=\"webhookName\" \r\n                                    labelText= \"Webhook Name\"  placeholder=\"Webhook Name\" \r\n                                    onBlur={(e) => handleInputChange(e)} \r\n                                    onChange={(e) => handleInputChange(e)} \r\n                                    defaultValue=\"\" required \r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <TooltipIcon \r\n                                renderIcon={InformationFilled16} \r\n                                direction=\"bottom\" \r\n                                tabIndex={0} \r\n                                tooltipText={fieldInfo.webhookName}\r\n                                style={toolTipStyle}\r\n                                >\r\n                                </TooltipIcon>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div style={{display : 'flex',flexDirection:'row'}}>\r\n                            <div style={divItemStyles}>\r\n                            <Select className=\"labelFont \" id=\"toolType\" name=\"toolType\" labelText=\"Tool Type\" defaultValue=\"\" onBlur={(e) => handleInputChange(e)} onChange={(e) => handleInputChange(e)} required=\"required\"  >\r\n                            <SelectItem\r\n                                // selected={impactingEvent == true}\r\n                                value=\"\"\r\n                                text=\"Choose an Option\"\r\n                            />\r\n                             {uiData && uiData.toolTypeArr && uiData.toolTypeArr.map((toolType) => {\r\n                                return (<option\r\n                                className=\"bx--select-option\"\r\n                                value={toolType}\r\n                                >\r\n                                    {toolType}\r\n                                </option>\r\n                             )})}\r\n                        </Select>\r\n                            </div>\r\n                            <div></div>\r\n                        </div>\r\n                        \r\n                        \r\n                        {/* <Select className=\"labelFont \" id=\"ticketTemplates\" name=\"ticketTemplates\" labelText=\"Ticket Template\" defaultValue=\"\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} required=\"required\"  >\r\n                            <SelectItem\r\n                                // selected={impactingEvent == true}\r\n                                value=\"\"\r\n                                text=\"Choose an Option\"\r\n                            />\r\n                            {itemticketTemplates}\r\n                        </Select> */}\r\n                        <div style={{display : 'flex',flexDirection:'row'}}>\r\n                            <div style={divItemStyles}>\r\n                            <Select className=\"labelFont \" id=\"workspace\" name=\"workspace\" labelText=\"Workspace\" defaultValue=\"\" onBlur={(e) => handleInputChange(e)} onChange={(e) => handleInputChange(e)} required=\"required\"  >\r\n                            <SelectItem\r\n                                // selected={impactingEvent == true}\r\n                                value=\"\"\r\n                                text=\"Choose an Option\"\r\n                            />\r\n                            {uiData && uiData.workspaceArr && uiData.workspaceArr.map((workspace) => {\r\n                                return (<option\r\n                                className=\"bx--select-option\"\r\n                                value={workspace}\r\n                                >\r\n                                    {workspace}\r\n                                </option>\r\n                            )})}\r\n                        </Select>\r\n                            </div>\r\n                            <div>\r\n                            <TooltipIcon \r\n                            renderIcon={InformationFilled16} \r\n                            direction=\"bottom\" \r\n                            tabIndex={0} \r\n                            tooltipText={fieldInfo.workSpace}\r\n                            style={toolTipStyle}\r\n                            >\r\n                         </TooltipIcon>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        \r\n                    <div className=\"inlineCheckbox\" style={{display:'none'}}>\r\n                            <div className=\"checkbox checkBoxDes\">\r\n                                <input type=\"checkbox\" name=\"channelAutoCreate\" className=\"checkboxInput checkboxDisplayInline\" onClick={ (event) => { handleCheckbox(event) }}  defaultChecked={checkBoxInfo.channelAutoCreate} />\r\n                                <label className=\"bx--checkbox-label-text checkboxClass\">\r\n                                    Channel Auto Create\r\n                                </label>\r\n                            </div> \r\n                            <div className=\"checkbox checkBoxDes\">\r\n                                <input type=\"checkbox\" name=\"allowUpdates\" className=\"checkboxInput checkboxDisplayInline\" onClick={ (event) => { handleCheckbox(event) }}  defaultChecked={checkBoxInfo.allowUpdates} />\r\n                                <label className=\"bx--checkbox-label-text checkboxClass\">\r\n                                    Allow Updates\r\n                                </label>\r\n                            </div> \r\n                        </div>\r\n                        <div style={{display : 'flex',flexDirection:'row'}}>\r\n                            <div style={divItemStyles}>\r\n                            <TextInput className=\"bx--text-input bx--text__input\" \r\n                            id=\"apiKey\" name=\"apiKey\" \r\n                            labelText= \"API Key\"  \r\n                            placeholder=\"API Key\" \r\n                            onBlur={(e) => handleInputChange(e)} \r\n                            onChange={(e) => handleInputChange(e)}\r\n                             defaultValue=\"\" \r\n                             required \r\n                        />\r\n                            </div>\r\n                            <div>\r\n                            <TooltipIcon \r\n                            renderIcon={InformationFilled16} \r\n                            direction=\"bottom\" \r\n                            tabIndex={0} \r\n                            tooltipText={fieldInfo.apiKey}\r\n                            style={toolTipStyle}\r\n                            >\r\n                         </TooltipIcon>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div style={{display : 'flex',flexDirection:'row'}}>\r\n                            <div style={divItemStyles}>\r\n                            <TextInput className=\"bx--text-input bx--text__input\" \r\n                            id=\"serviceAccountEmailId\" name=\"serviceAccountEmailId\" \r\n                            labelText= \"Service Account Email Id\"  \r\n                            placeholder=\"Service Account Email Id\" \r\n                            onBlur={(e) => handleInputChange(e)} \r\n                            onChange={(e) => handleInputChange(e)}\r\n                            invalidText=\"Please provide a valid email Id\"\r\n                            invalid={invalidForm.serviceAccountEmailId}\r\n                            defaultValue=\"\" required />\r\n                            </div>\r\n                            <div>\r\n                            <TooltipIcon \r\n                            renderIcon={InformationFilled16} \r\n                            direction=\"bottom\" \r\n                            tabIndex={0} \r\n                            tooltipText={fieldInfo.serviceAccountEmailId}\r\n                            style={toolTipStyle}\r\n                            >\r\n                         </TooltipIcon>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div style={{display : 'flex',flexDirection:'row'}}>\r\n                            <div style={divItemStyles}>\r\n                            <TextInput className=\"bx--text-input bx--text__input\" \r\n                            id=\"assignedMembers\" name=\"assignedMembers\" \r\n                            labelText= \"Assigned Members\"  \r\n                            placeholder=\"Assigned Members-Use comma to add multiple members\" \r\n                            onBlur={(e) => handleInputChange(e)} \r\n                            onChange={(e) => handleInputChange(e)} \r\n                            defaultValue=\"\" required \r\n                            invalid={invalidForm.assignedMembers}\r\n                            invalidText=\"Please provide a valid email Ids\"\r\n                            />\r\n                            </div>\r\n                            <div>\r\n                            <TooltipIcon \r\n                            renderIcon={InformationFilled16} \r\n                            direction=\"bottom\" \r\n                            tabIndex={0} \r\n                            tooltipText={fieldInfo.assignedMembers}\r\n                            style={toolTipStyle}\r\n                            >\r\n                         </TooltipIcon>\r\n                            </div>\r\n                        </div>\r\n                        <br></br>\r\n                        {\r\n                            invalidForm.specialCharacterPresent &&\r\n                            <small className=\"fontRed\">\r\n                                <b className=\"errorMsg specialCharErr\">{error.specialCharacterErr}</b>\r\n                            </small>\r\n                        }\r\n                        <br></br>\r\n                        <Button kind=\"primary\" type=\"submit\" style={{marginTop: \"16px\"}} className=\"addWorkspace\">Submit</Button>\r\n                        <Button kind=\"tertiary\" type=\"button\" style={{marginTop: \"16px\", marginLeft: \"16px\"}} className=\"addWorkspace\" onClick={(e) => handleCancel(e)}>Cancel</Button>\r\n                        \r\n                    </Form>\r\n\r\n                </div>\r\n            </section>\r\n                                    \r\n           \r\n        </div>\r\n        \r\n    );\r\n}\r\nexport default withRouter(AddWebhook);","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\groups\\GroupsHome.jsx",[],"C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\groups\\CreateGroup.jsx",["761","762","763","764"],"import {\r\n  Button,\r\n  Checkbox,\r\n  Form,\r\n  TextArea,\r\n  TextInput,\r\n} from \"carbon-components-react\";\r\nimport React, { Component } from \"react\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport Breadcrumb from \"../SuperAdmin/SACommands/CommandsBreadCrumb\";\r\nimport { isUniqueGroup } from \"./ChatopsGroupUtil\";\r\nimport { validate } from '../../validation/validate.js';\r\nvar logger = require(\"winston\");\r\n\r\nexport default class CreateGroup extends Component {\r\n  state = {\r\n    groupName: \"\",\r\n    groupDescription: \"\",\r\n    editMode: false,\r\n    loggedInUserKyndrylEmail: \"\",\r\n    groupId: \"\",\r\n    checked: false,\r\n  };\r\n\r\n  links = {\r\n    Home: \"/mui/home\",\r\n    Groups: \"/mui/groups\",\r\n    Create: \"/mui/groups/create\",\r\n  };\r\n\r\n  handleInputChange = (e) => {\r\n    e.preventDefault();\r\n    // Validations\r\n    if (\r\n      (e.target.value &&\r\n        e.target.value.includes(\"script\") &&\r\n        e.target.value.includes(\"<\")) ||\r\n      e.target.value.includes(\">\")\r\n    ) {\r\n      this.setState({\r\n        [\"invalid_\" + e.target.name]: \"Invalid Input.\",\r\n      });\r\n      return;\r\n    }\r\n    if (\r\n      e.target.name === \"groupName\" &&\r\n      e.target.value &&\r\n      e.target.value.match(/[!<>#%]/)\r\n    ) {\r\n      this.setState({\r\n        [\"invalid_\" + e.target.name]:\r\n          \"Value should not contain !<>#% Characters.\",\r\n      });\r\n      return;\r\n    } else {\r\n      this.setState({\r\n        [\"invalid_\" + e.target.name]: undefined,\r\n      });\r\n    }\r\n    console.log(`Input ${e.target.name}: ${e.target.value}`);\r\n    logger.info(`Input ${e.target.name}: ${e.target.value}`);\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  generateNameHandler = (time) => {\r\n    let timer;\r\n    return async (e = new Event()) => {\r\n      clearTimeout(timer);\r\n      timer = setTimeout(async () => {\r\n        const { value } = e.target;\r\n        if (!value) {\r\n          e.target.setCustomValidity(\"\");\r\n          return;\r\n        }\r\n        // validate sppace in group name\r\n        const splitValue = value && value.split(\" \");\r\n        if (splitValue && splitValue.length > 1) {\r\n          this.setState({\r\n            [\"invalid_\" + e.target.name]:\r\n              \"Group Name should not contain Spaces.\",\r\n          });\r\n          return;\r\n        } else {\r\n          this.setState({\r\n            [\"invalid_\" + e.target.name]: undefined,\r\n          });\r\n        }\r\n        // validate special character  in group name\r\n        if (value && value.match(/[!<>#%]/)) {\r\n          this.setState({\r\n            [\"invalid_\" + e.target.name]:\r\n              \"Value should not contain !<>#% Characters.\",\r\n          });\r\n          return;\r\n        } else {\r\n          this.setState({\r\n            [\"invalid_\" + e.target.name]: undefined,\r\n          });\r\n        }\r\n\r\n        this.setState({ [e.target.name]: e.target.value });\r\n      }, time);\r\n    };\r\n  };\r\n\r\n  formSubmit = async (e) => {\r\n    e.preventDefault();\r\n    //Validate owners email id (To Do)\r\n    if (this.state.editMode) {\r\n      console.log(`edit mode is true: ${this.state.editMode}`);\r\n      //Update Group\r\n      // Prepare data for update of group\r\n      const grpData = {\r\n        groupId: this.state.groupId,\r\n        data: {\r\n          description: this.state.groupDescription,\r\n        },\r\n      };\r\n\r\n      console.log(`Sending post request to update group`);\r\n      // Send Post request to update a Group\r\n       // SpecialCharacter validation\r\n        var validateFields = validate(grpData);\r\n        if(validateFields.length > 0){\r\n            var message = \"\";\r\n            for(var i =0; i<validateFields.length; i++){\r\n                var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n                if(element){\r\n                    message += element.title + \", \";\r\n                }else{\r\n                    message += validateFields[i] + ', ' \r\n                }\r\n            }\r\n            this.setState({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n        }else{\r\n            trackPromise(\r\n                fetch(\"/mui/updateGroup\", {\r\n                  method: \"POST\",\r\n                  headers: {\r\n                    \"Content-type\": \"application/json\",\r\n                  },\r\n                  body: JSON.stringify(grpData),\r\n                })\r\n                  .then((result) => {\r\n                    if (result.status === 404 || result.status === 400) {\r\n                      result.json().then((object) => {\r\n                        this.setState({ resErrMsg: object.errMsg });\r\n                      });\r\n                    } else if (result.status === 200) {\r\n                      this.props.history.push(\"/mui/groups\");\r\n                    }\r\n                  })\r\n                  .catch((err) => {\r\n                    this.setState({ errorMessage: err.message });\r\n                  })\r\n              );\r\n        }\r\n      \r\n    } else {\r\n      // check for unique group name\r\n      const uniqueGroup = await isUniqueGroup(this.state.groupName);\r\n      if (uniqueGroup) {\r\n        //Prepare data for Create Group Post request\r\n        const owners = [this.state.loggedInUserKyndrylEmail];\r\n        // const members = [this.state.loggedInUserKyndrylEmail];\r\n        const grpData = {\r\n          grpName: this.state.groupName,\r\n          grpDescription: this.state.groupDescription,\r\n          owners,\r\n          // members,\r\n        };\r\n        if (this.state.checked) {\r\n          grpData[\"members\"] = [this.state.loggedInUserKyndrylEmail];\r\n        }\r\n\r\n        // Send Post request to create a Group\r\n        console.log(`Sending post request to create group`);\r\n        console.log(` group Data to create : ${JSON.stringify(grpData)}`);\r\n         // SpecialCharacter validation\r\n            var validateFields = validate(grpData);\r\n            if(validateFields.length > 0){\r\n                var message = \"\";\r\n                for(var i =0; i<validateFields.length; i++){\r\n                    var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n                    if(element){\r\n                        message += element.title + \", \";\r\n                    }else{\r\n                        message += validateFields[i] + ', '\r\n                    }\r\n                }\r\n                this.setState({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n            }else{\r\n                trackPromise(\r\n                  fetch(\"/mui/createGroup\", {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                      \"Content-type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify(grpData),\r\n                  })\r\n                    .then((result) => {\r\n                      if (result.status === 404 || result.status === 400) {\r\n                        result.json().then((object) => {\r\n                          this.setState({ resErrMsg: object.errMsg });\r\n                        });\r\n                      } else if (result.status === 200) {\r\n                        this.props.history.push(\"/mui/groups\");\r\n                      }\r\n                    })\r\n                    .catch((err) => {\r\n                      this.setState({ errorMessage: err.message });\r\n                    })\r\n                );\r\n            }\r\n      } else {\r\n        this.setState({\r\n          invalid_groupName: \"Group name already exists \",\r\n        });\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  async fetchGroupDetails(groupId) {\r\n    console.log(`fetchGroupDetails:: group id : ${groupId}`);\r\n    const response = fetch(`/mui/groupsDetail/${groupId}`);\r\n    trackPromise(response);\r\n    const res = await response;\r\n    if (res.status === 200) {\r\n      const { groupDetail } = await res.json();\r\n      console.log(\r\n        `fetchGroupDetails:: groupDetail : ${JSON.stringify(groupDetail)}`\r\n      );\r\n      const { name, description, _id } = groupDetail;\r\n      this.setState({\r\n        groupName: name,\r\n        groupDescription: description,\r\n        editMode: true,\r\n        groupId: _id,\r\n      });\r\n    }\r\n  }\r\n  getKyndrylEmail(userEmail) {\r\n    console.log(`getting kyndryl email id from ocean email id`);\r\n    if (userEmail) {\r\n      let userToLogin;\r\n      let splitUser = userEmail.split(\"@\");\r\n      if (splitUser[1].toLowerCase() === \"ocean.ibm.com\") {\r\n        splitUser[1] = \"@kyndryl.com\";\r\n        userToLogin = splitUser.join(\"\");\r\n        return userToLogin;\r\n      } else if (splitUser[1].toLowerCase() === \"kyndryl.com\") {\r\n        return userEmail;\r\n      } else return null;\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    //Get LoggedIn User details\r\n    trackPromise(\r\n      fetch(\"/mui/getUserData\")\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((loggedInUser) => {\r\n          this.setState({ loggedInUser });\r\n          this.setState({\r\n            loggedInUserKyndrylEmail: this.getKyndrylEmail(\r\n              this.state.loggedInUser?.loggedIn\r\n            ).toLowerCase(),\r\n          });\r\n        })\r\n        .then((result) => {})\r\n    );\r\n\r\n    // If form is opened in Edit Mode, Get group details for\r\n    const searchUrl = this.props.location.search;\r\n    if (searchUrl) {\r\n      const groupdId =\r\n        searchUrl.split(\"?\").length > 1 && searchUrl.split(\"?\")[1];\r\n      console.log(`geoup id for which edit is requested : ${groupdId}`);\r\n      if (groupdId) {\r\n        this.fetchGroupDetails(groupdId);\r\n      }\r\n    }\r\n  }\r\n  setChecked() {\r\n    this.setState({ checked: !this.state.checked });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"headerDiv mainMargin sectionMargin\">\r\n          <Breadcrumb header=\"Groups\" links={this.links} />\r\n        </div>\r\n        <section className=\"sectionMargin mainMargin paddingCostom\">\r\n          <Form\r\n            className=\"formMain\"\r\n            onSubmit={(event) => this.formSubmit(event)}\r\n          >\r\n            <TextInput\r\n              labelText={\r\n                <>\r\n                  Group Name <b style={{ color: \"red\" }}>*</b>\r\n                </>\r\n              }\r\n              placeholder=\"Group Name\"\r\n              name=\"groupName\"\r\n              id=\"groupName\"\r\n              // onChange={(event) => this.handleInputChange(event)}\r\n              onChange={this.generateNameHandler(200)}\r\n              defaultValue={this.state.groupName}\r\n              readOnly={this.state.editMode}\r\n              required\r\n            />\r\n            {this.state[\"invalid_groupName\"] && (\r\n              <small className=\"danger\">\r\n                <b className=\"errorMsg\">{this.state[\"invalid_groupName\"]}</b>\r\n              </small>\r\n            )}\r\n            \r\n\r\n            <TextArea\r\n              className=\"labelFont\"\r\n              style={{ marginBottom: \"16px\" }}\r\n              cols={50}\r\n              rows={5}\r\n              placeholder=\"Description\"\r\n              labelText={<>Description <span className=\"specialCharacterLabel\">(Special characters &lt; &gt; # $ ^ & * \\ = {} ; \\\\ | ? ~ are not allowed)</span></>}\r\n              name=\"groupDescription\"\r\n              id=\"groupDescription\"\r\n              // onBlur={(e) => this.handleInputChange(e)}\r\n              onChange={(event) => this.handleInputChange(event)}\r\n              defaultValue={this.state.groupDescription}\r\n            />\r\n\r\n            {!this.state.editMode && (\r\n              <Checkbox\r\n                labelText={`Add me as a member`}\r\n                id=\"checkbox-1\"\r\n                checked={this.state.checked}\r\n                onChange={() => this.setChecked()}\r\n              />\r\n            )}\r\n            {\r\n                this.state['specialCharacterErr'] &&\r\n                <small className=\"fontRed\">\r\n                    <b className=\"errorMsg specialCharErr\">{this.state['specialCharacterErr']}</b>\r\n                </small>\r\n            }\r\n            <br></br>\r\n            {!this.state[\"invalid_email\"] && (\r\n              <Button className=\"addAccBtn addBtnCss addBtnPACss\" type=\"submit\">\r\n                Save\r\n              </Button>\r\n            )}\r\n          </Form>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ServiceManager\\ServiceManagerHome.jsx",["765"],"import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {\r\n  Button,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableHeader,\r\n  TableBody,\r\n  TableCell,\r\n  Toggle,\r\n  Form,\r\n  Tabs,\r\n  Tab,\r\n  Breadcrumb, BreadcrumbItem\r\n} from \"carbon-components-react\";\r\nimport { Edit32,  TrashCan32, Settings16 } from \"@carbon/icons-react\";\r\nimport { Link } from \"react-router-dom\";\r\n// import Breadcrumb from \"../SuperAdmin/SACommands/CommandsBreadCrumb\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport DeleteRuleModal from \"./DeleteRuleModal\";\r\n\r\nexport default class ServiceManagerHome extends Component {\r\n  state = {\r\n    SMRules: [],\r\n    accountData: {},\r\n    isRuleEnabled: false,\r\n    accountCode: \"\",\r\n    isParamGenerated: true\r\n  };\r\n\r\n  headers = [\r\n    \"Priority\",\r\n    \"Assignment Group\",\r\n    \"SLA/SLO\",\r\n    \"Breach Detection Time\",\r\n    \"Last Job Run (UTC)\",\r\n    \"Enable/Disable Rule\",\r\n    \"Edit Rule\",\r\n    \"Delete Rule\"\r\n  ];\r\n  \r\n  getSMRules = async () => {\r\n    const fetchSMRulesRes = fetch(`/mui/getSMRules`);\r\n    trackPromise(fetchSMRulesRes);\r\n    const resMSRules = await fetchSMRulesRes;\r\n    const { SMRules, accountData, isParamGenerated } = await resMSRules.json();\r\n    SMRules && this.setState({ SMRules, accountData, isParamGenerated });\r\n    this.links.ServiceManager = `/mui/servicemanager?${this.state.accountData.accountId}`;\r\n  };\r\n\r\n  componentDidMount() {  \r\n    this.getSMRules();\r\n  }\r\n  links = {\r\n    Home: \"/mui/home\",\r\n    Accounts: \"/mui/onboardAccount\",\r\n    ServiceManager: `/mui/servicemanager`,\r\n  };\r\n\r\n\r\n  handleToggle = async (checked, ruleId) => {\r\n    const ruleData = {isRuleEnabled: checked}\r\n    const data = {\r\n      ruleId,\r\n      data:ruleData \r\n  }\r\n  trackPromise(\r\n      fetch('/mui/patchRule' , {\r\n      method: \"PATCH\",\r\n      headers: {\r\n          'Content-type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data)\r\n      })\r\n      .then((result) => {\r\n          // if (result.status === 404 || result.status === 400 || result.status === 500)  {\r\n          //     result.json().then((object)=> {\r\n          //         setErrorMessage({resErrMsg: object.error});\r\n          //     })\r\n          // } else if (result.status === 409) {\r\n          //     result.json().then((object)=> {\r\n          //         setErrorMessage({errorMessage: object.error});\r\n          //     })\r\n          // } else \r\n          if(result.status === 200){\r\n            this.getSMRules();\r\n          }\r\n      })\r\n      .catch(err => { \r\n          // setErrorMessage({errorMessage: err.error});\r\n      })\r\n  );\r\n  }\r\n\r\n  openDeleteModal = (ruleId) => {\r\n    console.log(`openDeleteModal:: ${ruleId}`);\r\n    this.setState({\r\n      isDeleteModalOpen: true,\r\n      deleteRuleId: ruleId,\r\n    });\r\n  };\r\n  onDeletModalCancel = () => {\r\n    this.setState({ isDeleteModalOpen: false });\r\n  };\r\n  onDeletModalConfirm = () => {\r\n    const ruleData = {\r\n      toDeleteID: this.state.deleteRuleId,\r\n    };\r\n    console.log(`onDeletModalConfirm:: ${JSON.stringify(ruleData)}`);\r\n    trackPromise(\r\n      fetch(\"/mui/deleteRule\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(ruleData),\r\n      }).then((result) => {\r\n        if (result.status === 200) {\r\n          this.onDeletModalCancel();\r\n          this.getSMRules();\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const enabled = {\r\n      cursor: \"pointer\",\r\n    };\r\n    const rows = this.state.SMRules.map((rule) => {\r\n      let redirectUrl = `/mui/servicemanager/editRule/${this.state.accountData.accountId}?${rule._id}`;\r\n      // let redirectUrl = `/mui/servicemanager/create/${this.state.accountData.accountId}?${rule._id}`;\r\n      return (\r\n        <TableRow key={rule._id}>\r\n          <TableCell>{rule.priority}</TableCell>\r\n          <TableCell>{rule.assignmentGroup}</TableCell>\r\n          <TableCell>{`${rule.sla} ${rule.sla > 1 ? rule.slaUnit: (rule.slaUnit === \"Days\" ? \"Day\": (rule.slaUnit === \"Hours\" ? \"Hour\": \"Minute\"))}`}</TableCell>\r\n          <TableCell>{`${rule.breachTime} ${rule.breachTime > 1 ? rule.breachTimeUnit : (rule.breachTimeUnit === \"Hours\" ? \"Hour\": \"Minute\")} `}</TableCell>\r\n          <TableCell>{rule.lastJobRun }</TableCell>\r\n          \r\n          <TableCell>\r\n            <Toggle className=\"toggleSwitch\"\r\n            size=\"sm\"\r\n            toggled={rule.isRuleEnabled}\r\n            labelA='Disabled'\r\n            labelB='Enabled'\r\n            id={rule._id}\r\n            onToggle={(checked)=>this.handleToggle(checked,rule._id)}\r\n            />\r\n          </TableCell>\r\n          <TableCell>\r\n            <Link id={rule._id} to={redirectUrl}>\r\n              <Edit32 className=\"iconEditSize editIconPA\" aria-label=\"Edit Rule\" />\r\n            </Link>\r\n          </TableCell>\r\n          <TableCell>\r\n            <div\r\n                id={rule._id}\r\n                onClick={() => this.openDeleteModal(rule._id)}\r\n            >\r\n                <TrashCan32 className=\"iconEditSize editIconPA\" aria-label=\"Delete Rule\" />\r\n            </div>\r\n          </TableCell>\r\n          \r\n        </TableRow>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"headerDiv mainMargin sectionMargin\">\r\n          {/* <Breadcrumb header=\"ServiceManager\" links={this.links} /> */}\r\n          <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to={this.links.Home}>Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem >\r\n                    <Link to={this.links.Accounts}>Accounts</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem isCurrentPage>\r\n                    <Link to={this.links.ServiceManager}>ServiceManager</Link>\r\n                </BreadcrumbItem>      \r\n            </Breadcrumb>\r\n            <h2 className=\"headerText\">Service Manager</h2>\r\n        </div>\r\n        <section className=\"sectionMargin mainMargin\">\r\n          <div style={{display: \"flex\", flexDirection:\"row\", alignItems:\"center\", justifyContent:\"space-between\"}}>\r\n          <Form style={{ fontWeight: 500, margin: \"1rem 0\" }}>\r\n              <h5>\r\n                Account Code:{\" \"}\r\n                <span style={{ fontWeight: \"normal\" }}>{this.state.accountData.accountCode}</span>\r\n              </h5>\r\n              <h5>\r\n                Account Name:{\" \"}\r\n                <span style={{ fontWeight: \"normal\" }}>\r\n                  {this.state.accountData.accountName}\r\n                </span>\r\n              </h5>\r\n            </Form>\r\n            {!this.state.isParamGenerated && <span style={{ color:\"red\"}}>All the settings for service manager has not been enabled.Few options of creating rule might not work</span>}\r\n          </div>\r\n          <Tabs>\r\n          {/* <Tabs type=\"container\"> */}\r\n            <Tab id=\"incidentRules\" label=\"Incident Rules\">\r\n              <div className=\" my-2\">\r\n           \r\n              <Link class=\"paramStngButtonBtn\" to={`/mui/servicemanager/create/${this.state.accountData.accountId}`}>\r\n                  <Button\r\n                    className=\"addAccBtn addBtnCss addBtnPACss\"\r\n                    style={ enabled}\r\n                    \r\n                  >\r\n                    Create Rule\r\n                  </Button>\r\n                </Link> \r\n\r\n                <Link class=\"paramStngButtonBtn\" to={`/mui/servicemanager/incidentParamSettings/${this.state.accountData.accountId}`}>\r\n                  <Button\r\n                    className=\"addAccBtn addBtnCss addBtnPACss\"\r\n                  >\r\n                    Settings\r\n                  </Button>\r\n              </Link>\r\n              </div>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {this.headers.map((header) => (\r\n                      <TableHeader key={header}>{header}</TableHeader>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>{rows}</TableBody>\r\n              </Table>\r\n            </Tab>\r\n            {/* <Tab id=\"changeRequestRules\" label=\"Change Request Rules\" title=\"Change Request Rules\">\r\n              \r\n            </Tab> */}\r\n          </Tabs>\r\n        </section>\r\n        {typeof document === \"undefined\"\r\n          ? null\r\n          : ReactDOM.createPortal(\r\n              <DeleteRuleModal\r\n                ruleId={this.state.deleteGroupId}\r\n                isModalOpen={this.state.isDeleteModalOpen}\r\n                onDeleteCancel={() => this.onDeletModalCancel()}\r\n                onDeleteConfrim={() => this.onDeletModalConfirm()}\r\n                modalText={`Group ${this.state.deleteGroupName}`}\r\n              />,\r\n              document.body\r\n            )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ServiceManager\\CreateSMRules.jsx",["766"],"import React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  Form,\r\n  TextInput,\r\n  Select,\r\n  SelectItem,\r\n  Column,\r\n  Row,\r\n  TooltipIcon,\r\n  MultiSelect,\r\n  ComboBox,\r\n} from \"carbon-components-react\";\r\nimport Breadcrumb from \"../SuperAdmin/SACommands/CommandsBreadCrumb\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { InformationFilled16, Add16, Subtract16 } from \"@carbon/icons-react\";\r\n\r\n\r\nexport default class CreateSMRules extends Component {\r\n \r\n  actions = [\"user\", \"channel\", \"group\"];\r\n  state = {\r\n    ruleId: \"\",\r\n    accountCode: \"\",\r\n    assignmentGroup: \"\",\r\n    priority: \"\",\r\n    checked: false,\r\n    actiontype: \"\",\r\n    channelId: \"\",\r\n    userEmail: \"\",\r\n    groupName: \"\",\r\n    breachType: \"\",\r\n    breachTime: \"\",\r\n    breachTimeUnit: \"\",\r\n    sla: \"\",\r\n    slaUnit: \"\",\r\n    editMode: false,\r\n    isRuleEnabled: false,\r\n    isFormValid: true,\r\n    enableUserEmail: false,\r\n    enableChannelId: false,\r\n    enableGroup: false,\r\n    enableOwnerNotification: false,\r\n    incidentChannelEnabled:false,\r\n    ticketStateList: [],\r\n    ticketStateItems: [],\r\n    ticketStates: [],\r\n    invalid_ticketStates: undefined,\r\n    queryParameters: [{ paramName: \"\", operator: \"\", paramValue: \"\" }],\r\n    dynamicComboboxItems: [],\r\n    dynamicQueryOperators: [],\r\n    initialSelectedComboItems: [],\r\n    domainData: [],\r\n  };\r\n  selectedTicketStates = []\r\n\r\n  links = {\r\n    Home: \"/mui/home\",\r\n    Accounts: \"/mui/onboardAccount\",\r\n    ServiceManager: `/mui/servicemanager?${this.props.match.params.accountId}`,\r\n    \"Add Rule\": \"/mui/servicemanager/create\",\r\n  };\r\n  \r\n   handleDynamicInputChange = (event, index) => {\r\n      const { name, value } = event.target;\r\n      const list = [...this.state.queryParameters];\r\n      list[index][name] = value;\r\n      console.log(JSON.stringify(list));\r\n      this.setState({queryParameters: list});\r\n   }\r\n   handleRemoveClick (index) {\r\n      const list = [...this.state.queryParameters];\r\n      list.splice(index, 1);\r\n      this.setState({queryParameters: list})\r\n   };\r\n  handleAddClick(event) {\r\n    this.setState((prevState) => {\r\n      return {\r\n        queryParameters: [\r\n          ...prevState.queryParameters,\r\n          { paramName: \"\", paramValue: \"\" },\r\n        ],\r\n      };\r\n    });\r\n  }\r\n\r\n   \r\n   fetchRuleDetails = async (ruleId) => {\r\n    const response = fetch(`/mui/ruleDetails/${ruleId}`);\r\n    const res = await response;\r\n    if (res.status === 200) {\r\n      const { ruleDetail } = await res.json();\r\n      \r\n      const { assignmentGroup, priority, breachType, breachTime, breachTimeUnit, sla, slaUnit, userEmail, groupName, channelId, isRuleEnabled, enableOwnerNotification,incidentChannelEnabled, ticketStates, queryParameters } = ruleDetail;\r\n      return {\r\n        assignmentGroup: assignmentGroup ? assignmentGroup : \"\",\r\n        priority,\r\n        breachType,\r\n        breachTime,\r\n        breachTimeUnit,\r\n        sla,\r\n        slaUnit,\r\n        userEmail,\r\n        groupName,\r\n        channelId,\r\n        ruleId,\r\n        isRuleEnabled,\r\n        enableOwnerNotification,\r\n        incidentChannelEnabled,\r\n        ticketStates,\r\n        queryParameters: queryParameters || [{ paramName: \"\", operator: \"\", paramValue: \"\" }]\r\n      }\r\n    }\r\n   }\r\n  getAccountDetail = async () => {\r\n    const response = fetch(`/mui/getMUIAccountData/${this.props.match.params.accountId}`);\r\n    const res = await response;\r\n    \r\n    if (res.status === 200) {\r\n      const { muiAccountData } = await res.json();\r\n    // If form is opened in Edit Mode, Get rule details \r\n    const searchUrl = this.props.location.search;\r\n    let ruleDetails = {};\r\n    let editMode = false;\r\n    if (searchUrl) {\r\n      const ruleId = searchUrl.split(\"?\").length > 1 && searchUrl.split(\"?\")[1];\r\n      if (ruleId) {\r\n        \r\n       ruleDetails = await this.fetchRuleDetails(ruleId);\r\n       editMode = true;\r\n      }\r\n    }\r\n    let enableUserEmail = false, enableChannelId = false, enableGroup = false;\r\n    if(ruleDetails.userEmail){\r\n      enableUserEmail = true\r\n    }\r\n    if(ruleDetails.channelId){\r\n      enableChannelId = true\r\n    }\r\n    if(ruleDetails.groupName){\r\n      enableGroup = true\r\n    }\r\n     const ticketStateItems =  await this.getTicketState(muiAccountData.accountCode, ruleDetails);\r\n      const {dynamicComboboxItems, dynamicQueryOperators} = await this.getValueForDynamicCombobox(muiAccountData.accountCode);\r\n      setTimeout(() => {\r\n        this.setState({\r\n          accountCode: muiAccountData.accountCode,\r\n          editMode,\r\n          ...ruleDetails,\r\n          enableUserEmail,\r\n          enableChannelId,\r\n          enableGroup,\r\n          ticketStateItems,\r\n          dynamicComboboxItems,\r\n          dynamicQueryOperators,\r\n        });\r\n      }, 1000)\r\n      \r\n\r\n      console.log(JSON.stringify(this.state));\r\n\r\n    }\r\n  }\r\n\r\n\tgetValueForDynamicCombobox = async (accountCode) => {\r\n    const response = await fetch(\r\n      `/mui/servicemanager/serviceManagerSettings/${accountCode}`\r\n    );\r\n      let dynamicComboboxItems = [];\r\n    const { serviceManagerSettings, dynamicQueryOperators } = await response.json();\r\n    if (serviceManagerSettings && serviceManagerSettings.length) {\r\n      if (serviceManagerSettings[0].incidentParamNames) {\r\n        dynamicComboboxItems =  Object.values(serviceManagerSettings[0].incidentParamNames).map(value => {\r\n            return value;\r\n          })\r\n        }\r\n      }\r\n      return {dynamicComboboxItems, dynamicQueryOperators}\r\n    }\r\n  getTicketState = async (accountCode, ruleDetails) => {\r\n    //Get states from ticketing tool\r\n    const response = fetch(`/mui/servicemanager/getTicketState/${accountCode}`);\r\n    const resTicketState = await response;\r\n    if(resTicketState.status === 200){\r\n      const {msStatusValues} = await resTicketState.json();\r\n      const ticketStateItems = [];\r\n      for(let ticketStateKey in msStatusValues ){\r\n        ticketStateItems.push({\r\n          id: ticketStateKey,\r\n          text: msStatusValues[ticketStateKey]\r\n        })\r\n      }\r\n      return ticketStateItems;\r\n    }\r\n\r\n  }\r\n  componentDidMount() {\r\n    this.getAccountDetail();\r\n    trackPromise(\r\n      fetch(\"/mui/fetchAllowedDomains\")\r\n      .then((res) => {\r\n          return res.json();\r\n      })\r\n      .then((domainData) => {\r\n          this.setState({ domainData });\r\n      })\r\n  );\r\n  }\r\n  onBlur = (e) => {\r\n    if (\r\n      (e.target.value &&\r\n        e.target.value.includes(\"script\") &&\r\n        e.target.value.includes(\"<\")) ||\r\n      e.target.value.includes(\">\")\r\n    ) {\r\n      this.setState({\r\n        [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n        isFormValid: false\r\n      });\r\n      return;\r\n    }\r\n    if(e.target.name === \"assignmentGroup\") {\r\n      this.setState({\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    } \r\n  }\r\n  onSelectChange = (e) => {\r\n    const selectedStates = e.selectedItems;\r\n    this.setState({ticketStates: selectedStates, isFormValid: true})\r\n  }\r\n  \r\n  \r\n  handleInputChange = (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      (e.target.value &&\r\n        e.target.value.includes(\"script\") &&\r\n        e.target.value.includes(\"<\")) ||\r\n      e.target.value.includes(\">\")\r\n    ) {\r\n      this.setState({\r\n        [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n        isFormValid: false\r\n      });\r\n      return;\r\n    }\r\n    if(e.target.name === \"sla\" || e.target.name === \"breachTime\"){\r\n      const re = /^[0-9\\b]+$/;\r\n      if (e.target.value === '' || !re.test(e.target.value)) {\r\n        this.setState({\r\n          [\"invalid_\" + e.target.name]:\r\n            \"Enter Number between 0-9\",\r\n            isFormValid: false\r\n        });\r\n        return;\r\n      }else {\r\n        this.setState({\r\n          [\"invalid_\" + e.target.name]:undefined,\r\n          isFormValid: true\r\n        });\r\n      }\r\n    }\r\n    if(e.target.name === \"userEmail\"){\r\n      // Validate User email for kyndryl Domain\r\n      var domainValues = this.state.domainData;\r\n      var domainArray = domainValues.domainData;\r\n      if(e.target.value.includes(\"@\")){\r\n          let splitUser = e.target.value.split(\"@\");\r\n          if(splitUser[1]) {\r\n            this.setState({\r\n              [\"invalid_\" + e.target.name]: undefined,\r\n              isFormValid: true\r\n            });\r\n            if (!domainArray.includes(splitUser[1].toLowerCase())) {\r\n              this.setState({\r\n                [\"invalid_\" + e.target.name]:\r\n                  \"Invalid email domain\",\r\n                  isFormValid: false\r\n              });\r\n              return;\r\n            }else {\r\n              this.setState({\r\n                [\"invalid_\" + e.target.name]: undefined,\r\n                isFormValid: true\r\n              });\r\n            }\r\n          }else {\r\n            this.setState({\r\n              [\"invalid_\" + e.target.name]:\r\n                \"Invalid email\",\r\n                isFormValid: false\r\n            });\r\n            return;\r\n          }         \r\n      }else {\r\n        this.setState({\r\n          [\"invalid_\" + e.target.name]: \"Invalid email\",\r\n          isFormValid: false\r\n        });\r\n      }\r\n    }else {\r\n      this.setState({\r\n        \"invalid_userEmail\": undefined,\r\n        isFormValid: true\r\n      });\r\n    }\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n\r\n  };\r\n\r\n  setUserEmail = () => {\r\n    let userEmail;\r\n    if(!this.state.enableUserEmail){\r\n      userEmail = this.state.userEmail\r\n    }else {\r\n      userEmail = \"\";\r\n    }\r\n    this.setState({enableUserEmail: !this.state.enableUserEmail, userEmail})\r\n  }\r\n  setChannelId = () => {\r\n    let channelId;\r\n    if(!this.state.enableChannelId){\r\n      channelId = this.state.channelId\r\n    }else {\r\n      channelId = \"\";\r\n    }\r\n    this.setState({enableChannelId: !this.state.enableChannelId, channelId})\r\n  }\r\n  setGroup = () => {\r\n    let groupName;\r\n    if(!this.state.enableGroup){\r\n      groupName = this.state.groupName\r\n    }else {\r\n      groupName = \"\";\r\n    }\r\n    this.setState({enableGroup: !this.state.enableGroup, groupName})\r\n  }\r\n\r\n  setOwnerNotification = () => {\r\n    this.setState({enableOwnerNotification: !this.state.enableOwnerNotification})\r\n  }\r\n  setIncidentChannel = () => {\r\n    this.setState({incidentChannelEnabled: !this.state.incidentChannelEnabled})\r\n  }\r\n  formSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if(this.state.isFormValid){\r\n      if(!(this.state.enableUserEmail || this.state.enableChannelId || this.state.enableGroup)){\r\n        this.setState({\r\n          \"invalid_ticketStates\": undefined,\r\n          isFormValid: true\r\n        });\r\n        this.setState({\r\n          \"invalid_action\": \"Choose at least one notification type\",\r\n          isFormValid: false\r\n        });\r\n        return;\r\n      }else {\r\n        this.setState({\r\n          \"invalid_action\": undefined,\r\n          isFormValid: true\r\n        });\r\n      }\r\n\r\n      if(this.state.ticketStates && this.state.ticketStates.length === 0){\r\n        this.setState({\r\n          \"invalid_ticketStates\": \"Select at least one State\",\r\n          isFormValid: false\r\n        });\r\n        return;\r\n      }else {\r\n        this.setState({\r\n          \"invalid_ticketStates\": undefined,\r\n          isFormValid: true\r\n        });\r\n      }\r\n        const queryParamsToSave = this.state.queryParameters.filter(queryParam => {\r\n         return (!(queryParam.paramName == null || queryParam.paramName === \"\"));\r\n        }) \r\n\r\n        const ruleData = {\r\n          accountCode : this.state.accountCode,\r\n          priority: this.state.priority,\r\n          assignmentGroup: this.state.assignmentGroup,\r\n          slaUnit: this.state.slaUnit,\r\n          sla: this.state.sla,\r\n          breachType: this.state.breachType,\r\n          breachTimeUnit: this.state.breachTimeUnit,\r\n          breachTime : this.state.breachTime,\r\n          userEmail: this.state.userEmail,\r\n          channelId: this.state.channelId,\r\n          groupName: this.state.groupName,\r\n          enableOwnerNotification: this.state.enableOwnerNotification,\r\n          incidentChannelEnabled: this.state.incidentChannelEnabled,\r\n          ticketStates: this.state.ticketStates,\r\n          // queryParameters: this.state.queryParameters || [{ paramName: \"\", operator: \"\", paramValue: \"\" }]\r\n          queryParameters: queryParamsToSave\r\n        };\r\n\r\n        // check for existing rule\r\n        const query = `accountCode=${ruleData.accountCode}&priority=${ruleData.priority}&assignmentGroup=${ruleData.assignmentGroup}&slaUnit=${ruleData.slaUnit}&sla=${ruleData.sla}&breachType=${ruleData.breachType}&breachTimeUnit=${ruleData.breachTimeUnit}&breachTime=${ruleData.breachTime}`;\r\n        const response = await fetch(`/mui/servicemanager/serachRule?${query}`)\r\n        const result = await response.json();\r\n        if(result && result.length > 0){\r\n          let validateDuplicate = true;\r\n          const {\r\n            accountCode,\r\n            priority,\r\n            assignmentGroup,\r\n            slaUnit,\r\n            sla,\r\n            breachType,\r\n            breachTimeUnit,\r\n            breachTime,\r\n            _id: ruleIdDB\r\n          } = result[0];\r\n          let ruleFromDB =  {\r\n            accountCode,\r\n            priority,\r\n            assignmentGroup,\r\n            slaUnit,\r\n            sla,\r\n            breachType,\r\n            breachTimeUnit,\r\n            breachTime\r\n          };\r\n          if(this.state.editMode){\r\n            if(this.state.ruleId && ruleIdDB === this.state.ruleId){\r\n              validateDuplicate = false;\r\n            }else {\r\n              validateDuplicate = true\r\n            }\r\n          }\r\n          if(validateDuplicate){\r\n            const incomingRuleData = {\r\n              accountCode: ruleData.accountCode,\r\n              priority: ruleData.priority,\r\n              assignmentGroup: ruleData.assignmentGroup,\r\n              slaUnit: ruleData.slaUnit,\r\n              sla: ruleData.sla,\r\n              breachType: ruleData.breachType,\r\n              breachTimeUnit: ruleData.breachTimeUnit,\r\n              breachTime: ruleData.breachTime\r\n            }\r\n            if(JSON.stringify(ruleFromDB) === JSON.stringify(incomingRuleData)){\r\n              this.setState({\r\n                invalid_rule: \"Rule already exists \",\r\n                isFormValid: false\r\n              });\r\n              return;\r\n            }else {\r\n              this.setState({\r\n                invalid_rule: undefined,\r\n                isFormValid: true\r\n              });\r\n            }\r\n          }\r\n        }else {\r\n          this.setState({\r\n            invalid_rule: undefined,\r\n            isFormValid: true\r\n          });\r\n        }\r\n\r\n        //Validate group name\r\n        if(this.state.groupName){\r\n          const responseGroup = await fetch(`/mui/group/getGroup/${this.state.groupName}`)\r\n          const resultGroup = await responseGroup.json();\r\n          if(!resultGroup || resultGroup.length === 0){\r\n            this.setState({\r\n              invalid_group: \"Invalid Group\",\r\n              isFormValid: false\r\n            });\r\n            return;\r\n          }else {\r\n            this.setState({\r\n              invalid_group: undefined,\r\n              isFormValid: true\r\n            });\r\n          }\r\n        }\r\n\r\n        ruleData[\"isRuleEnabled\"]=this.state.isRuleEnabled\r\n        if (this.state.editMode) {\r\n          \r\n            const data = {\r\n                ruleId: this.state.ruleId,\r\n                data:ruleData \r\n              }\r\n              trackPromise(\r\n                fetch('/mui/patchRule' , {\r\n                method: \"PATCH\",\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify(data)\r\n                })\r\n                .then((result) => {\r\n                    if(result.status === 200){\r\n                      this.props.history.push(`${this.links.ServiceManager}`);\r\n                    }\r\n                })\r\n                .catch(err => { \r\n                    // setErrorMessage({errorMessage: err.error});\r\n                })\r\n            );\r\n        } else {\r\n            trackPromise(\r\n              fetch(\"/mui/createRule\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                  \"Content-type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(ruleData),\r\n              })\r\n                .then((result) => {\r\n                  if (result.status === 404 || result.status === 400) {\r\n                    result.json().then((object) => {\r\n                      this.setState({ resErrMsg: object.errMsg });\r\n                    });\r\n                  } else if (result.status === 200) {\r\n                    this.props.history.push(`${this.links.ServiceManager}`);\r\n                  }\r\n                })\r\n                .catch((err) => {\r\n                  this.setState({ errorMessage: err.message });\r\n                })\r\n            );\r\n          }\r\n    }\r\n  };\r\n\r\n  breachTimeUnitList = [\"Minutes\", \"Hours\",];\r\n  slaUnitList = [\"Minutes\", \"Hours\", \"Days\"];\r\n  render() {\r\n    const breachTypes = [\"Approaching\", \"Lapsed\"]\r\n    const priorityList = [\"1\", \"2\", \"3\", \"4\", \"5\"]\r\n    const priorityOptions = priorityList.map((priority) => {\r\n      return (\r\n        <option\r\n          className=\"bx--select-option\"\r\n          value={priority}\r\n          selected={priority === this.state.priority}\r\n\r\n        >\r\n          {priority}\r\n        </option>\r\n      );\r\n    });\r\n    const dynamicQueryParamOptions = this.state.dynamicComboboxItems.map((paramName) => {\r\n      return (\r\n        <option\r\n          className=\"bx--select-option\"\r\n          value={paramName}\r\n        >\r\n          {paramName}\r\n        </option>\r\n      );\r\n    });\r\n    const dynamicQueryOperatorptions = this.state.dynamicQueryOperators.map((operator) => {\r\n      return (\r\n        <option\r\n          className=\"bx--select-option\"\r\n          value={operator.value}\r\n        >\r\n          {operator.text}\r\n        </option>\r\n      );\r\n    });\r\n    const breachTypeOptions = breachTypes.map((breachType) => {\r\n      return (\r\n        <option\r\n          className=\"bx--select-option\"\r\n          value={breachType}\r\n          selected={breachType === this.state.breachType}\r\n        >\r\n          {breachType}         \r\n        </option>\r\n      );\r\n    });\r\n \r\n    const breachTimeUnitOptions = this.breachTimeUnitList.map((breachTimeUnit) => {\r\n      return (\r\n        <option\r\n          className=\"bx--select-option\"\r\n          value={breachTimeUnit}\r\n          selected={breachTimeUnit === this.state.breachTimeUnit}\r\n        >\r\n          {breachTimeUnit}\r\n        </option>\r\n      );\r\n    });\r\n    const slaUnitOptions = this.slaUnitList.map((slaUnit) => {\r\n      return (\r\n        <option\r\n          className=\"bx--select-option\"\r\n          value={slaUnit}\r\n          selected={slaUnit === this.state.slaUnit}\r\n        >\r\n          {slaUnit}\r\n        </option>\r\n      );\r\n    });\r\n    let inputFields = null;\r\n    if(this.state.queryParameters ){\r\n\r\n      inputFields =  this.state.queryParameters.map((input, index) => {\r\n        console.log(\"input\",JSON.stringify(input));\r\n        return (\r\n          <>\r\n            <Row>\r\n              <Column>\r\n                <Select\r\n                      className=\"labelFont \"\r\n                      id={`paramName-${index}`}\r\n                      name=\"paramName\"\r\n                      labelText=\"Name\"\r\n                      defaultValue={input.paramName || ''}\r\n                      onChange={(event) => this.handleDynamicInputChange(event, index)}\r\n                      // required=\"required\"\r\n                    >\r\n                      <SelectItem\r\n                        value=\"\"\r\n                        text=\"Choose an Option\"\r\n                      />\r\n                      {dynamicQueryParamOptions}\r\n                  </Select>\r\n              </Column>\r\n              <Column>\r\n                <Select\r\n                      className=\"labelFont \"\r\n                      id={`operator-${index}`}\r\n                      name=\"operator\"\r\n                      labelText=\"Operator\"\r\n                      defaultValue={input.operator}\r\n                      onChange={(event) => this.handleDynamicInputChange(event, index)}\r\n                    >\r\n                      <SelectItem\r\n                        value=\"\"\r\n                        text=\"Choose an Option\"\r\n                      />\r\n                      {dynamicQueryOperatorptions}  \r\n                  </Select>\r\n              </Column>\r\n              <Column>\r\n                <TextInput\r\n                  labelText={\r\n                    <>\r\n                      Value{\" \"}\r\n                    </>\r\n                  }\r\n                  placeholder=\"Value\"\r\n                  name=\"paramValue\"\r\n                  id={`${input.paramValue}-${index}`}\r\n                  onChange={(event) => this.handleDynamicInputChange(event, index)}\r\n                  defaultValue={input.paramValue}\r\n                />\r\n              </Column>\r\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                <Button\r\n                  renderIcon={Add16}\r\n                  iconDescription=\"Add Query Parameter\"\r\n                  hasIconOnly\r\n                  size=\"md\"\r\n                  kind=\"ghost\"\r\n                  onClick={(event) => this.handleAddClick(event)}\r\n                ></Button>\r\n                {this.state.queryParameters.length !== 1 && (\r\n                  <Button\r\n                    renderIcon={Subtract16}\r\n                    iconDescription=\"Remove Query Parameter\"\r\n                    hasIconOnly\r\n                    size=\"md\"\r\n                    kind=\"ghost\"\r\n                    onClick={() => this.handleRemoveClick(index)}\r\n                  >    \r\n                  </Button>\r\n                )}\r\n              </div>\r\n            </Row>\r\n          </>\r\n        );\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"headerDiv mainMargin sectionMargin\">\r\n          <Breadcrumb header=\"Add Rule\" links={this.links} />\r\n        </div>\r\n        <section className=\"sectionMargin mainMargin paddingCostom\">\r\n          <Form\r\n            className=\"formMain\"\r\n            onSubmit={(event) => this.formSubmit(event)}\r\n          >\r\n            <TextInput\r\n              labelText={\r\n                <>\r\n                  Account Code <b style={{ color: \"red\" }}>*</b>\r\n                </>\r\n              }\r\n              placeholder=\"Account Code\"\r\n              name=\"accountCode\"\r\n              id=\"accountCode\"\r\n              onChange={(event) => this.handleInputChange(event)}\r\n              defaultValue={this.state.accountCode}\r\n              readOnly={true}\r\n              required\r\n            />\r\n            {this.state[\"invalid_accountCode\"] && (\r\n              <small className=\"danger\">\r\n                <b className=\"errorMsg\">{this.state[\"invalid_accountCode\"]}</b>\r\n              </small>\r\n            )}\r\n            <TextInput\r\n              labelText={<>\r\n              Assignment Group  <TooltipIcon \r\n                renderIcon={InformationFilled16} \r\n                direction=\"bottom\" \r\n                tabIndex={0} \r\n                tooltipText=\"Assignment group of the ticket that needs notification.Multiple assignment groups can be entered as comma separated values\"\r\n                >\r\n                </TooltipIcon>\r\n              </>}\r\n              placeholder=\"Assignment Group\"\r\n              name=\"assignmentGroup\"\r\n              id=\"assignmentGroup\"\r\n              onChange={(event) => this.handleInputChange(event)}\r\n              onBlur={(event) => this.onBlur(event)}\r\n              defaultValue={this.state.assignmentGroup}\r\n            />\r\n                {this.state[\"invalid_assignmentGroup\"] && (\r\n                  <small className=\"danger\">\r\n                    <b className=\"errorMsg\">\r\n                      {this.state[\"invalid_assignmentGroup\"]}\r\n                    </b>\r\n                  </small>\r\n                )}\r\n            <Select\r\n                  className=\"labelFont \"\r\n                  id=\"priority\"\r\n                  name=\"priority\"\r\n                  labelText={\r\n                    <>\r\n                      Priority <b style={{ color: \"red\" }}>*</b><TooltipIcon \r\n                    renderIcon={InformationFilled16} \r\n                    direction=\"bottom\" \r\n                    tabIndex={0} \r\n                    tooltipText=\"Priority of the ticket\"\r\n                    >\r\n                    </TooltipIcon>\r\n                    </>\r\n                  }\r\n                  defaultValue={this.state.priority}\r\n                  onChange={(e) => this.handleInputChange(e)}\r\n                  required=\"required\"\r\n                >\r\n                  <SelectItem\r\n                    value=\"\"\r\n                    text=\"Choose an Option\"\r\n                  />\r\n                  {priorityOptions}\r\n            </Select>\r\n            \r\n            <MultiSelect\r\n                titleText={<>State <b style={{ color: \"red\" }}>*</b></>}\r\n                label=\"State\"\r\n                items={this.state.ticketStateItems}\r\n                onChange={(e) => this.onSelectChange(e)}\r\n                itemToString={(item) => (item ? item.text : '')}\r\n                initialSelectedItems={this.selectedTicketStates}\r\n                \r\n            />\r\n            <div style={{marginBottom: \"3px\", marginTop: \"1rem\"}} className=\"ticketingToolGroupDiv\">\r\n            <p style={{marginBottom: \"3px\"}}>Enter dynamic query parameters<TooltipIcon \r\n                    renderIcon={InformationFilled16} \r\n                    direction=\"bottom\" \r\n                    tabIndex={0} \r\n                    tooltipText=\"Generate Parameters for dynamic query by clicking on settings button in the Service Manager home page. For fields with Date, enter value in YYYY-MM-DD HH:MM:SS format\"\r\n                    >\r\n                    </TooltipIcon></p>\r\n              {inputFields}\r\n            </div>\r\n            \r\n            <Row>\r\n            <Column>\r\n                <Select\r\n                  className=\"labelFont \"\r\n                  id=\"slaUnit\"\r\n                  name=\"slaUnit\"\r\n                  labelText={\r\n                    <>\r\n                      SLA/SLO Unit <b style={{ color: \"red\" }}>*</b><TooltipIcon \r\n                    renderIcon={InformationFilled16} \r\n                    direction=\"bottom\" \r\n                    tabIndex={0} \r\n                    tooltipText={`Specify the unit of time the SLA runs within which the ticket should move out of the initial state(Open/InProgress)`}\r\n                    >\r\n                    </TooltipIcon>\r\n                    </>\r\n                  }\r\n                  defaultValue={this.state.slaUnit || \"\"}\r\n                  onChange={(e) => this.handleInputChange(e)}\r\n                  required=\"required\"\r\n                >\r\n                  <SelectItem\r\n                    value=\"\"\r\n                    text=\"Choose an Option\"\r\n                  />\r\n                  {slaUnitOptions}\r\n                </Select>\r\n              </Column>\r\n              <Column>\r\n                <TextInput\r\n                  labelText={\r\n                    <>\r\n                      SLA/SLO Duration <b style={{ color: \"red\" }}>*</b> \r\n                      <TooltipIcon \r\n                    renderIcon={InformationFilled16} \r\n                    direction=\"bottom\" \r\n                    tabIndex={0} \r\n                    tooltipText={` Specify the length of time the SLA runs within which the ticket should move out of the initial state(Open/InProgress)`}\r\n                    >\r\n                    </TooltipIcon>\r\n                    </>\r\n                  }\r\n                  placeholder=\"SLA\"\r\n                  name=\"sla\"\r\n                  id=\"sla\"\r\n                  onChange={(event) => this.handleInputChange(event)}\r\n                  defaultValue={this.state.sla}\r\n                  maxLength={3}\r\n                  required\r\n                />\r\n                 \r\n                {this.state[\"invalid_sla\"] && (\r\n                  <small className=\"danger\">\r\n                    <b className=\"errorMsg\">{this.state[\"invalid_sla\"]}</b>\r\n                  </small>\r\n                )}\r\n              </Column>\r\n              \r\n            </Row>\r\n            <Row>\r\n            <Column>\r\n                <Select\r\n                  className=\"labelFont \"\r\n                  id=\"breachType\"\r\n                  name=\"breachType\"\r\n                  labelText={\r\n                    <>\r\n                      Breach Detection Type <b style={{ color: \"red\" }}>*</b>\r\n                      <TooltipIcon \r\n                    renderIcon={InformationFilled16} \r\n                    direction=\"bottom\" \r\n                    tabIndex={0} \r\n                    tooltipText=\"Specify breach detection type, whether the breach should be detected before or after a breach occurs\"\r\n                    >\r\n                    </TooltipIcon>\r\n                    </>\r\n                  }\r\n                  defaultValue={this.state.breachType || \"\"}\r\n                  onChange={(e) => this.handleInputChange(e)}\r\n                  required=\"required\"\r\n                >\r\n                  <SelectItem\r\n                    value=\"\"\r\n                    text=\"Choose an Option\"\r\n                  />\r\n                  {breachTypeOptions}\r\n                </Select>\r\n              </Column>\r\n            </Row>\r\n            <Row>\r\n            \r\n              <Column>\r\n                <Select\r\n                  className=\"labelFont \"\r\n                  id=\"breachTimeUnit\"\r\n                  name=\"breachTimeUnit\"\r\n                  labelText={\r\n                    <>\r\n                      Breach Detection Time Unit <b style={{ color: \"red\" }}>*</b><TooltipIcon \r\n                    renderIcon={InformationFilled16} \r\n                    direction=\"bottom\" \r\n                    tabIndex={0} \r\n                    tooltipText=\"Specify the unit of time when breach must be notified once detected\"\r\n                    >\r\n                    </TooltipIcon>\r\n                    </>\r\n                  }\r\n                  defaultValue={this.state.breachTimeUnit || \"\"}\r\n                  onChange={(e) => this.handleInputChange(e)}\r\n                  required=\"required\"\r\n                >\r\n                  <SelectItem\r\n                    value=\"\"\r\n                    text=\"Choose an Option\"\r\n                  />\r\n                  {breachTimeUnitOptions}\r\n                </Select>\r\n              </Column>\r\n              <Column>\r\n                <TextInput\r\n                  labelText={\r\n                    <>\r\n                      Breach Detection Time <b style={{ color: \"red\" }}>*</b><TooltipIcon \r\n                    renderIcon={InformationFilled16} \r\n                    direction=\"bottom\" \r\n                    tabIndex={0} \r\n                    tooltipText=\"Specify the length of time when breach must be notified once detected\"\r\n                    >\r\n                    </TooltipIcon>\r\n                    </>\r\n                  }\r\n                  placeholder=\"Breach Detection Time\"\r\n                  name=\"breachTime\"\r\n                  id=\"breachTime\"\r\n                  onChange={(event) => this.handleInputChange(event)}\r\n                  maxLength={3}\r\n                  defaultValue={this.state.breachTime}\r\n                  required\r\n                />\r\n                {this.state[\"invalid_breachTime\"] && (\r\n                  <small className=\"danger\">\r\n                    <b className=\"errorMsg\">\r\n                      {this.state[\"invalid_breachTime\"]}\r\n                    </b>\r\n                  </small>\r\n                )}\r\n              </Column>\r\n            </Row>\r\n            <div style={{marginBottom: \"3px\"}} className=\"ticketingToolGroupDiv\">\r\n              <p style={{marginBottom: \"3px\"}}>Choose notification type</p>\r\n              <Row>\r\n                <Column>\r\n                  <Checkbox\r\n                        labelText={\r\n                          <>\r\n                            User Email {this.state.enableUserEmail ? <b style={{ color: \"red\" }}>*</b> : null } <TooltipIcon \r\n                            renderIcon={InformationFilled16} \r\n                            direction=\"bottom\" \r\n                            tabIndex={0} \r\n                            tooltipText=\"User email needs to be entered , user would get notification as a direct message\"\r\n                            >\r\n                            </TooltipIcon>\r\n                          </>\r\n                        }\r\n                        id=\"checkbox-userEmail\"\r\n                        checked={this.state.enableUserEmail}\r\n                        onChange={() => this.setUserEmail()}\r\n                    />\r\n\r\n                  <TextInput\r\n                    labelText=\"\"\r\n                    placeholder=\"User Email\"\r\n                    name=\"userEmail\"\r\n                    id=\"userEmail\"\r\n                    onChange={(event) => this.handleInputChange(event)}\r\n                    defaultValue={this.state.userEmail}\r\n                    required={this.state.enableUserEmail}\r\n                    disabled={!this.state.enableUserEmail}\r\n                  />\r\n                  {this.state[\"invalid_userEmail\"] && (\r\n                    <small className=\"danger\">\r\n                      <b className=\"errorMsg\">{this.state[\"invalid_userEmail\"]}</b>\r\n                    </small>\r\n                  )}\r\n                </Column>\r\n                <Column>\r\n                <Checkbox\r\n                      labelText={<>\r\n                        Channel Id {this.state.enableChannelId ? <b style={{ color: \"red\" }}>*</b> : null} <TooltipIcon \r\n                            renderIcon={InformationFilled16} \r\n                            direction=\"bottom\" \r\n                            tabIndex={0} \r\n                            tooltipText=\"Channel id of the collaboration tool where notifications needs to be posted\"\r\n                            >\r\n                            </TooltipIcon>\r\n                      </>}\r\n                      id=\"checkbox-channelId\"\r\n                      checked={this.state.enableChannelId}\r\n                      onChange={() => this.setChannelId()}\r\n                  />\r\n                <TextInput\r\n                  labelText=\"\"\r\n                  placeholder=\"Channel ID\"\r\n                  name=\"channelId\"\r\n                  id=\"channelId\"\r\n                  onChange={(event) => this.handleInputChange(event)}\r\n                  defaultValue={this.state.channelId}\r\n                  required={this.state.enableChannelId}\r\n                  disabled={!this.state.enableChannelId}\r\n                />\r\n              </Column>\r\n              <Column>\r\n                <Checkbox\r\n                    labelText={\r\n                      <>\r\n                        Group Name {this.state.enableGroup ? <b style={{ color: \"red\" }}>*</b> : null } <TooltipIcon \r\n                            renderIcon={InformationFilled16} \r\n                            direction=\"bottom\" \r\n                            tabIndex={0} \r\n                            tooltipText=\"ChatOps groups needs to be entered , all members would get notification as a direct message\"\r\n                            >\r\n                            </TooltipIcon>\r\n                      </>\r\n                    }\r\n                    id=\"checkbox-group\"\r\n                    checked={this.state.enableGroup}\r\n                    onChange={() => this.setGroup()}\r\n                />\r\n                <TextInput\r\n                  labelText=\"\"\r\n                  placeholder=\"Group Name\"\r\n                  name=\"groupName\"\r\n                  id=\"groupName\"\r\n                  onChange={(event) => this.handleInputChange(event)}\r\n                  defaultValue={this.state.groupName}\r\n                  required={this.state.enableGroup}\r\n                  disabled={!this.state.enableGroup}\r\n                />\r\n                {this.state[\"invalid_group\"] && (\r\n                  <small className=\"danger\">\r\n                    <b className=\"errorMsg\">{this.state[\"invalid_group\"]}</b>\r\n                  </small>\r\n                )}\r\n              </Column>\r\n              </Row>\r\n            </div>\r\n            {this.state[\"invalid_action\"] && (\r\n                  <small className=\"danger\">\r\n                    <b className=\"errorMsg\">{this.state[\"invalid_action\"]}</b>\r\n                  </small>\r\n            )}\r\n            {this.state[\"invalid_ticketStates\"] && (\r\n                  <small className=\"danger\">\r\n                    <b className=\"errorMsg\">{this.state[\"invalid_ticketStates\"]}</b>\r\n                  </small>\r\n            )}\r\n            <Row>\r\n              <Column>\r\n                <Checkbox\r\n                        labelText={<>\r\n                          Send Notification to Ticket Owner <TooltipIcon \r\n                              renderIcon={InformationFilled16} \r\n                              direction=\"bottom\" \r\n                              tooltipText=\"Only kyndryl email ids are supported\"\r\n                              >\r\n                              </TooltipIcon>\r\n                        </>}\r\n                        id=\"checkbox-owner\"\r\n                        checked={this.state.enableOwnerNotification}\r\n                        onChange={() => this.setOwnerNotification()}\r\n                    />\r\n              </Column>\r\n              <Column>\r\n                <Checkbox\r\n                        labelText='Enable creation of Incident Channel'\r\n                        id=\"checkbox-incidentChannel\"\r\n                        checked={this.state.incidentChannelEnabled}\r\n                        onChange={() => this.setIncidentChannel()}\r\n                    />\r\n              </Column>\r\n            </Row>\r\n            <Button className=\"addAccBtn addBtnCss addBtnPACss\" type=\"submit\" >\r\n              Save Rule\r\n            </Button>\r\n            <br/>\r\n            {this.state[\"invalid_rule\"] && (\r\n              <small className=\"danger\">\r\n                <b className=\"errorMsg\">{this.state[\"invalid_rule\"]}</b>\r\n              </small>\r\n            )}\r\n          <br/>\r\n          <br/>\r\n          <br/>\r\n          </Form>\r\n         \r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ServiceManager\\IncidentParamSettings.jsx",["767"],"import {\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  TextInput,\r\n  TableToolbar,\r\n  TableContainer,\r\n  TableToolbarContent,\r\n  TableToolbarSearch,\r\n  DataTable,\r\n} from \"carbon-components-react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst IncidentParamSettings = (props) => {\r\n  const links = {\r\n    Home: \"/mui/home\",\r\n    Accounts: \"/mui/onboardAccount\",\r\n    ServiceManager: `/mui/servicemanager?${props.match.params.accountId}`,\r\n    \"Parameter Settings\": \"/mui/servicemanager/incidentParamSettings\",\r\n  };\r\n  const [queryParams, setQueryParams] = useState({});\r\n  const [queryParamsBeforeSave, setQueryParamsBeforeSave] = useState({});\r\n  const [editInputStart, setEditInputStart] = useState(false);\r\n  const [accountCode, setAccountCode] = useState(\"\");\r\n  const [serviceManagerSettingsId, setServiceManagerSettingsId] = useState(\"\");\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  const getServiceManagerSettings = async () => {\r\n    const responseMUIAccount = fetch(\r\n      `/mui/getMUIAccountData/${props.match.params.accountId}`\r\n    );\r\n    const res = await responseMUIAccount;\r\n\r\n    if (res.status === 200) {\r\n      const { muiAccountData } = await res.json();\r\n      setAccountCode(muiAccountData.accountCode);\r\n      const response = await fetch(\r\n        `/mui/servicemanager/serviceManagerSettings/${muiAccountData.accountCode}`\r\n      );\r\n      const { serviceManagerSettings } = await response.json();\r\n      if (serviceManagerSettings && serviceManagerSettings[0]) {\r\n        setServiceManagerSettingsId(serviceManagerSettings[0]._id);\r\n        if (serviceManagerSettings[0].incidentParamNames) {\r\n          setQueryParams(serviceManagerSettings[0].incidentParamNames);\r\n        }\r\n      }\r\n    } else {\r\n      //   return null;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getServiceManagerSettings();\r\n  }, []);\r\n  const getDynamiceParamNames = async () => {\r\n    const res = fetch(\r\n      `/mui/servicemanager/getDynamiceParamNames/${accountCode}`\r\n    );\r\n    trackPromise(res);\r\n    const resParams = await res;\r\n    console.log(\"getDynamiceParamNames\");\r\n\r\n    if (resParams.status === 200) {\r\n      const { serviceNowParams } = await resParams.json();\r\n      console.log(serviceNowParams);\r\n      return serviceNowParams;\r\n    }\r\n  };\r\n  const generateParamList = async () => {\r\n    // get parameter names from snow\r\n    const serviceNowParamList = await getDynamiceParamNames();\r\n    console.log(`serviceNowParamList: ${JSON.stringify(serviceNowParamList)}`);\r\n    const queryParamKeyValuePair = {};\r\n    for (let param of serviceNowParamList) {\r\n      queryParamKeyValuePair[param] = param;\r\n    }\r\n    const response = await fetch(\r\n      `/mui/servicemanager/serviceManagerSettings/${accountCode}`\r\n    );\r\n    const { serviceManagerSettings } = await response.json();\r\n    if (serviceManagerSettings && serviceManagerSettings[0]) {\r\n      setServiceManagerSettingsId(serviceManagerSettings[0]._id);\r\n      const smSettingsDataPatch = {\r\n        id: serviceManagerSettings[0]._id,\r\n        data: {\r\n          incidentParamNames: queryParamKeyValuePair,\r\n          accountCode\r\n          // isGenerateParam: true,\r\n        },\r\n      };\r\n\r\n      trackPromise(\r\n        fetch(\"/mui/servicemanager/serviceManagerSettings\", {\r\n          method: \"PATCH\",\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(smSettingsDataPatch),\r\n        })\r\n          .then((result) => {\r\n            if (result.status === 200) {\r\n              console.log(result);\r\n              setQueryParams(queryParamKeyValuePair);\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            // setErrorMessage({errorMessage: err.error});\r\n          })\r\n      );\r\n    }else {\r\n\r\n\r\n    const smSettingsData = {\r\n      // id: serviceManagerSettingsId,\r\n      data: {\r\n        incidentParamNames: queryParamKeyValuePair,\r\n        accountCode\r\n        // isGenerateParam: true,\r\n      },\r\n    };\r\n    console.log(`smSettingsData`);\r\n    console.log(smSettingsData);\r\n    trackPromise(\r\n      fetch(\"/mui/servicemanager/serviceManagerSettings\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(smSettingsData),\r\n      })\r\n        .then((result) => {\r\n          if (result.status === 200) {\r\n            console.log(result);\r\n            setQueryParams(queryParamKeyValuePair);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          // setErrorMessage({errorMessage: err.error});\r\n        })\r\n    );\r\n  }\r\n  };\r\n\r\n  const saveQueryParameters = (queryParameterList) => {\r\n    const smSettingsData = {\r\n      id: serviceManagerSettingsId,\r\n      data: { incidentParamNames: queryParameterList },\r\n    };\r\n    console.log(`smSettingsData`);\r\n    console.log(smSettingsData);\r\n    trackPromise(\r\n      fetch(\"/mui/servicemanager/serviceManagerSettings\", {\r\n        method: \"PATCH\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(smSettingsData),\r\n      })\r\n        .then((result) => {\r\n          if (result.status === 200) {\r\n            setQueryParams(queryParameterList);\r\n            setEditMode(false);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          // setErrorMessage({errorMessage: err.error});\r\n        })\r\n    );\r\n  };\r\n  const onEditField = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const onEditInputChange = (e, key) => {\r\n    const inputValueBeforeEdit = queryParams[key];\r\n    queryParams[key] = e.target.value;\r\n    if(!editInputStart){\r\n      setQueryParamsBeforeSave({\r\n        ...queryParamsBeforeSave,\r\n        [key]: inputValueBeforeEdit,\r\n      });\r\n      setEditInputStart(true)\r\n    }\r\n  };\r\n  const onBlur = (e) => {\r\n    setEditInputStart(false)\r\n  }\r\n\r\n  const onSave = () => {\r\n    saveQueryParameters(queryParams);\r\n  };\r\n  const onCancel = () => {\r\n    for (let key of Object.keys(queryParamsBeforeSave)) {\r\n      queryParams[key] = queryParamsBeforeSave[key];\r\n    }\r\n    setQueryParams(queryParams);\r\n    setEditInputStart(false);\r\n    setEditMode(false);\r\n  };\r\n  const rows = Object.entries(queryParams).map(([key, value], index) => {\r\n    return { id: index, key, value };\r\n  });\r\n\r\n\r\n  const headers = [\r\n    {\r\n      header: \"Field Name\",\r\n      key: \"key\",\r\n    },\r\n    {\r\n      header: \"Query Parameter\",\r\n      key: \"value\",\r\n    },\r\n  ];\r\n  const saveCancelButtons = (\r\n    <>\r\n      <Button className=\"paramStngButtonBtn\" onClick={onSave}>\r\n        Save\r\n      </Button>\r\n      <Button className=\"\" onClick={onCancel}>\r\n        Cancel\r\n      </Button>\r\n    </>\r\n  );\r\n\r\n  const generateEditButtons = (\r\n    <>\r\n      <Button\r\n        className=\"paramStngButtonBtn\"\r\n        onClick={generateParamList}\r\n      >\r\n        Generate Parameters\r\n      </Button>\r\n      <Button\r\n        className=\"\"\r\n        onClick={onEditField}\r\n      >\r\n        Edit\r\n      </Button>\r\n    </>\r\n  );\r\n  return (\r\n    <div className=\"headerDiv mainMargin sectionMargin\">\r\n      <Breadcrumb>\r\n        <BreadcrumbItem>\r\n          <Link to={links.Home}>Home</Link>\r\n        </BreadcrumbItem>\r\n        <BreadcrumbItem>\r\n          <Link to={links.Accounts}>Accounts</Link>\r\n        </BreadcrumbItem>\r\n        <BreadcrumbItem>\r\n          <Link to={links.ServiceManager}>ServiceManager</Link>\r\n        </BreadcrumbItem>\r\n        <BreadcrumbItem isCurrentPage>\r\n          <Link to={links[\"Parameter Settings\"]}>Parameter Settings</Link>\r\n        </BreadcrumbItem>\r\n      </Breadcrumb>\r\n\r\n      <section className=\"sectionMargin mainMargin\">\r\n        <DataTable rows={rows} headers={headers}>\r\n          {({\r\n            rows,\r\n            headers,\r\n            getHeaderProps,\r\n            getRowProps,\r\n            getTableProps,\r\n            getToolbarProps,\r\n            onInputChange,\r\n            getTableContainerProps,\r\n          }) => (\r\n            <TableContainer\r\n              title=\"Query Parameter Settings\"\r\n              {...getTableContainerProps()}\r\n            >\r\n              <TableToolbar\r\n                {...getToolbarProps()}\r\n                aria-label=\"\"\r\n              >\r\n                <TableToolbarContent>\r\n                  <TableToolbarSearch onChange={onInputChange} />\r\n\r\n                  {editMode ? saveCancelButtons : generateEditButtons}\r\n                </TableToolbarContent>\r\n              </TableToolbar>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {headers.map((header) => (\r\n                      <TableHeader key={header.key}>\r\n                        {header.header}\r\n                      </TableHeader>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {rows.map((row) => (\r\n                    <TableRow key={row.key} {...getRowProps({ row })}>\r\n\r\n                      <TableCell key={row.cells[0].id}>\r\n                        {row.cells[0].value}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {editMode ? (\r\n                          <TextInput\r\n                            labelText=\"\"\r\n                            placeholder=\"\"\r\n                            name=\"internalFieldName\"\r\n                            id=\"internalFieldName\"\r\n                            onChange={(e) =>\r\n                              onEditInputChange(e, row.cells[0].value)\r\n                            }\r\n                            onBlur={(e) => onBlur(e)}\r\n                            defaultValue={row.cells[1].value}\r\n                            required\r\n                          />\r\n                        ) : (\r\n                          row.cells[1].value\r\n                        )}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          )}\r\n        </DataTable>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IncidentParamSettings;\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ServiceManager\\EditSMRules.jsx",["768"],"import React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  Form,\r\n  TextInput,\r\n  Select,\r\n  SelectItem,\r\n  Column,\r\n  Row,\r\n  TooltipIcon,\r\n  MultiSelect,\r\n  ComboBox,\r\n} from \"carbon-components-react\";\r\nimport Breadcrumb from \"../SuperAdmin/SACommands/CommandsBreadCrumb\";\r\n// import {DynamicQyeryForm} from './DynamicQyeryForm'\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { InformationFilled16, Add16, Subtract16 } from \"@carbon/icons-react\";\r\n\r\n\r\nexport default class EditSMRules extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // this.getAccountDetail();\r\n    this.getSelectedStates()\r\n  }\r\n\r\n  getSelectedStates = async () => {\r\n    const searchUrl = this.props.location.search;\r\n    let ruleDetails = {};\r\n    if (searchUrl) {\r\n      const ruleId = searchUrl.split(\"?\").length > 1 && searchUrl.split(\"?\")[1];\r\n      console.log(\"ruleId: \",ruleId);\r\n      if (ruleId) { \r\n        ruleDetails = await this.fetchRuleDetails(ruleId);\r\n        if(ruleDetails.ticketStates){\r\n          for(let ticketState of (ruleDetails.ticketStates)){\r\n            this.selectedTicketStates.push(ticketState)\r\n          }\r\n        }\r\n\r\n        if(ruleDetails.queryParameters){\r\n          this.selectedDynamicQuery = [...ruleDetails.queryParameters]\r\n        }\r\n   \r\n    }\r\n  }\r\n}\r\nselectedDynamicQuery = [];\r\n  actions = [\"user\", \"channel\", \"group\"];\r\n  state = {\r\n    ruleId: \"\",\r\n    accountCode: \"\",\r\n    assignmentGroup: \"\",\r\n    priority: \"\",\r\n    checked: false,\r\n    actiontype: \"\",\r\n    channelId: \"\",\r\n    userEmail: \"\",\r\n    groupName: \"\",\r\n    breachType: \"\",\r\n    breachTime: \"\",\r\n    breachTimeUnit: \"\",\r\n    sla: \"\",\r\n    slaUnit: \"\",\r\n    editMode: false,\r\n    isRuleEnabled: false,\r\n    isFormValid: true,\r\n    enableUserEmail: false,\r\n    enableChannelId: false,\r\n    enableGroup: false,\r\n    enableOwnerNotification: false,\r\n    incidentChannelEnabled:false,\r\n    ticketStateList: [],\r\n    ticketStateItems: [],\r\n    ticketStates: [],\r\n    invalid_ticketStates: undefined,\r\n    queryParameters: undefined,\r\n    // queryParametersCreate: [{ paramName: \"\", operator: \"\", paramValue: \"\" }],\r\n    dynamicComboboxItems: [],\r\n    dynamicQueryOperators: [],\r\n    initialSelectedComboItems: [],\r\n\r\n  };\r\n  selectedTicketStates = []\r\n\r\n  links = {\r\n    Home: \"/mui/home\",\r\n    Accounts: \"/mui/onboardAccount\",\r\n    ServiceManager: `/mui/servicemanager?${this.props.match.params.accountId}`,\r\n    \"Add Rule\": \"/mui/servicemanager/create\",\r\n  };\r\n   \r\n    handleDynamicComboChange = (event, index) => {\r\n      // const { name, value } = event.target;\r\n      console.log(event.selectedItem);\r\n\r\n      const list = [...this.state.queryParameters];\r\n      list[index][\"paramName\"] = event.selectedItem;\r\n      console.log(JSON.stringify(list));\r\n      this.setState({queryParameters: list});\r\n      }\r\n\r\n      \r\n    handleDynamicInputChange = (event, index) => {\r\n      const { name, value } = event.target;\r\n      const list = [...this.state.queryParameters];\r\n      list[index][name] = value;\r\n      console.log(JSON.stringify(list));\r\n      this.setState({queryParameters: list});\r\n    }\r\n    handleRemoveClick (index) {\r\n      const list = [...this.state.queryParameters];\r\n      list.splice(index, 1);\r\n      this.setState({queryParameters: list})\r\n    };\r\n    handleAddClick(event) {\r\n\r\n      this.setState((prevState) => {\r\n        return {\r\n          queryParameters: [\r\n            ...prevState.queryParameters,\r\n            { paramName: \"\", paramValue: \"\" },\r\n          ],\r\n        };\r\n      });\r\n    }\r\n\r\n   fetchRuleDetails = async (ruleId) => {\r\n    const response = fetch(`/mui/ruleDetails/${ruleId}`);\r\n    // trackPromise(response);\r\n    const res = await response;\r\n    if (res.status === 200) {\r\n      const { ruleDetail } = await res.json();\r\n      \r\n      const { assignmentGroup, priority, breachType, breachTime, breachTimeUnit, sla, slaUnit, userEmail, groupName, channelId, isRuleEnabled, enableOwnerNotification,incidentChannelEnabled, ticketStates, queryParameters } = ruleDetail;\r\n      return {\r\n        assignmentGroup: assignmentGroup ? assignmentGroup : \"\",\r\n        priority,\r\n        breachType,\r\n        breachTime,\r\n        breachTimeUnit,\r\n        sla,\r\n        slaUnit,\r\n        userEmail,\r\n        groupName,\r\n        channelId,\r\n        ruleId,\r\n        isRuleEnabled,\r\n        enableOwnerNotification,\r\n        incidentChannelEnabled,\r\n        ticketStates,\r\n        queryParameters: (queryParameters && queryParameters.length) ? queryParameters : [{ paramName: \"\", operator: \"\", paramValue: \"\" }]\r\n      }\r\n    }\r\n   }\r\n  getAccountDetail = async () => {\r\n    const response = fetch(`/mui/getMUIAccountData/${this.props.match.params.accountId}`);\r\n    const res = await response;\r\n    \r\n    if (res.status === 200) {\r\n      const { muiAccountData } = await res.json();\r\n    // If form is opened in Edit Mode, Get rule details \r\n    const searchUrl = this.props.location.search;\r\n    let ruleDetails = {};\r\n    let editMode = false;\r\n    if (searchUrl) {\r\n      const ruleId = searchUrl.split(\"?\").length > 1 && searchUrl.split(\"?\")[1];\r\n      if (ruleId) {\r\n        \r\n       ruleDetails = await this.fetchRuleDetails(ruleId);\r\n       editMode = true;\r\n      }\r\n    }\r\n    let enableUserEmail = false, enableChannelId = false, enableGroup = false;\r\n    if(ruleDetails.userEmail){\r\n      enableUserEmail = true\r\n    }\r\n    if(ruleDetails.channelId){\r\n      enableChannelId = true\r\n    }\r\n    if(ruleDetails.groupName){\r\n      enableGroup = true\r\n    }\r\n     const ticketStateItems =  await this.getTicketState(muiAccountData.accountCode, ruleDetails);\r\n      const {dynamicComboboxItems, dynamicQueryOperators} = await this.getValueForDynamicCombobox(muiAccountData.accountCode);\r\n    //   setTimeout(() => {\r\n        this.setState({\r\n          accountCode: muiAccountData.accountCode,\r\n          editMode,\r\n          ...ruleDetails,\r\n          enableUserEmail,\r\n          enableChannelId,\r\n          enableGroup,\r\n          ticketStateItems,\r\n          dynamicComboboxItems,\r\n          dynamicQueryOperators,\r\n        });\r\n    //   }, 1000)\r\n      \r\n\r\n      console.log(JSON.stringify(this.state));\r\n\r\n    }\r\n  }\r\n\r\n\tgetValueForDynamicCombobox = async (accountCode) => {\r\n    const response = await fetch(\r\n      `/mui/servicemanager/serviceManagerSettings/${accountCode}`\r\n    );\r\n      let dynamicComboboxItems = [];\r\n    const { serviceManagerSettings, dynamicQueryOperators } = await response.json();\r\n    if (serviceManagerSettings && serviceManagerSettings.length) {\r\n      if (serviceManagerSettings[0].incidentParamNames) {\r\n        dynamicComboboxItems =  Object.values(serviceManagerSettings[0].incidentParamNames).map(value => {\r\n            return value;\r\n          })\r\n        }\r\n      }\r\n      return {dynamicComboboxItems, dynamicQueryOperators}\r\n    }\r\n  getTicketState = async (accountCode, ruleDetails) => {\r\n    //Get states from ticketing tool\r\n    const response = fetch(`/mui/servicemanager/getTicketState/${accountCode}`);\r\n    const resTicketState = await response;\r\n    if(resTicketState.status === 200){\r\n      const {msStatusValues} = await resTicketState.json();\r\n      const ticketStateItems = [];\r\n      for(let ticketStateKey in msStatusValues ){\r\n        ticketStateItems.push({\r\n          id: ticketStateKey,\r\n          text: msStatusValues[ticketStateKey]\r\n        })\r\n      }\r\n      return ticketStateItems;\r\n    }\r\n\r\n  }\r\n  componentDidMount() {\r\n    this.getAccountDetail();\r\n    trackPromise(\r\n      fetch(\"/mui/fetchAllowedDomains\")\r\n      .then((res) => {\r\n          return res.json();\r\n      })\r\n      .then((domainData) => {\r\n          this.setState({ domainData });\r\n      })\r\n  );\r\n  }\r\n  onBlur = (e) => {\r\n    if (\r\n      (e.target.value &&\r\n        e.target.value.includes(\"script\") &&\r\n        e.target.value.includes(\"<\")) ||\r\n      e.target.value.includes(\">\")\r\n    ) {\r\n      this.setState({\r\n        [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n        isFormValid: false\r\n      });\r\n      return;\r\n    }\r\n    if(e.target.name === \"assignmentGroup\") {\r\n      this.setState({\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    } \r\n  }\r\n  onSelectChange = (e) => {\r\n    const selectedStates = e.selectedItems;\r\n    this.setState({ticketStates: selectedStates, isFormValid: true})\r\n  }\r\n  \r\n  \r\n  handleInputChange = (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      (e.target.value &&\r\n        e.target.value.includes(\"script\") &&\r\n        e.target.value.includes(\"<\")) ||\r\n      e.target.value.includes(\">\")\r\n    ) {\r\n      this.setState({\r\n        [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n        isFormValid: false\r\n      });\r\n      return;\r\n    }\r\n    if(e.target.name === \"sla\" || e.target.name === \"breachTime\"){\r\n      const re = /^[0-9\\b]+$/;\r\n      if (e.target.value === '' || !re.test(e.target.value)) {\r\n        this.setState({\r\n          [\"invalid_\" + e.target.name]:\r\n            \"Enter Number between 0-9\",\r\n            isFormValid: false\r\n        });\r\n        return;\r\n      }else {\r\n        this.setState({\r\n          [\"invalid_\" + e.target.name]:undefined,\r\n          isFormValid: true\r\n        });\r\n      }\r\n    }\r\n    if(e.target.name === \"userEmail\"){\r\n      // Validate User email for kyndryl Domain\r\n      var domainValues = this.state.domainData;\r\n      var domainArray = domainValues.domainData;\r\n      if(e.target.value.includes(\"@\")){\r\n          let splitUser = e.target.value.split(\"@\");\r\n          if(splitUser[1]) {\r\n            this.setState({\r\n              [\"invalid_\" + e.target.name]: undefined,\r\n              isFormValid: true\r\n            });\r\n\r\n            if (!domainArray.includes(splitUser[1].toLowerCase())) {\r\n              this.setState({\r\n                [\"invalid_\" + e.target.name]:\r\n                  \"Invalid email domain\",\r\n                  isFormValid: false\r\n              });\r\n              return;\r\n            }else {\r\n              this.setState({\r\n                [\"invalid_\" + e.target.name]: undefined,\r\n                isFormValid: true\r\n              });\r\n            }\r\n          }else {\r\n            this.setState({\r\n              [\"invalid_\" + e.target.name]:\r\n                \"Invalid email\",\r\n                isFormValid: false\r\n            });\r\n            return;\r\n          }         \r\n      }else {\r\n        this.setState({\r\n          [\"invalid_\" + e.target.name]: \"Invalid email\",\r\n          isFormValid: false\r\n        });\r\n      }\r\n    }else {\r\n      this.setState({\r\n        \"invalid_userEmail\": undefined,\r\n        isFormValid: true\r\n      });\r\n    }\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n\r\n  };\r\n\r\n  setUserEmail = () => {\r\n    let userEmail;\r\n    if(!this.state.enableUserEmail){\r\n      userEmail = this.state.userEmail\r\n    }else {\r\n      userEmail = \"\";\r\n    }\r\n    this.setState({enableUserEmail: !this.state.enableUserEmail, userEmail})\r\n  }\r\n  setChannelId = () => {\r\n    let channelId;\r\n    if(!this.state.enableChannelId){\r\n      channelId = this.state.channelId\r\n    }else {\r\n      channelId = \"\";\r\n    }\r\n    this.setState({enableChannelId: !this.state.enableChannelId, channelId})\r\n  }\r\n  setGroup = () => {\r\n    let groupName;\r\n    if(!this.state.enableGroup){\r\n      groupName = this.state.groupName\r\n    }else {\r\n      groupName = \"\";\r\n    }\r\n    this.setState({enableGroup: !this.state.enableGroup, groupName})\r\n  }\r\n\r\n  setOwnerNotification = () => {\r\n    this.setState({enableOwnerNotification: !this.state.enableOwnerNotification})\r\n  }\r\n  setIncidentChannel = () => {\r\n    this.setState({incidentChannelEnabled: !this.state.incidentChannelEnabled})\r\n  }\r\n  formSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if(this.state.isFormValid){\r\n      if(!(this.state.enableUserEmail || this.state.enableChannelId || this.state.enableGroup)){\r\n        this.setState({\r\n          \"invalid_ticketStates\": undefined,\r\n          isFormValid: true\r\n        });\r\n        this.setState({\r\n          \"invalid_action\": \"Choose at least one notification type\",\r\n          isFormValid: false\r\n        });\r\n        return;\r\n      }else {\r\n        this.setState({\r\n          \"invalid_action\": undefined,\r\n          isFormValid: true\r\n        });\r\n      }\r\n\r\n      if(this.state.ticketStates && this.state.ticketStates.length === 0){\r\n        this.setState({\r\n          \"invalid_ticketStates\": \"Select at least one State\",\r\n          isFormValid: false\r\n        });\r\n        return;\r\n      }else {\r\n        this.setState({\r\n          \"invalid_ticketStates\": undefined,\r\n          isFormValid: true\r\n        });\r\n      }\r\n\r\n      const queryParamsToSave = this.state.queryParameters.filter(queryParam => {\r\n        return (!(queryParam.paramName == null || queryParam.paramName === \"\"));\r\n       })\r\n        const ruleData = {\r\n          accountCode : this.state.accountCode,\r\n          priority: this.state.priority,\r\n          assignmentGroup: this.state.assignmentGroup,\r\n          slaUnit: this.state.slaUnit,\r\n          sla: this.state.sla,\r\n          breachType: this.state.breachType,\r\n          breachTimeUnit: this.state.breachTimeUnit,\r\n          breachTime : this.state.breachTime,\r\n          userEmail: this.state.userEmail,\r\n          channelId: this.state.channelId,\r\n          groupName: this.state.groupName,\r\n          enableOwnerNotification: this.state.enableOwnerNotification,\r\n          incidentChannelEnabled: this.state.incidentChannelEnabled,\r\n          ticketStates: this.state.ticketStates,\r\n          queryParameters: queryParamsToSave\r\n        };\r\n\r\n        // check for existing rule\r\n        const query = `accountCode=${ruleData.accountCode}&priority=${ruleData.priority}&assignmentGroup=${ruleData.assignmentGroup}&slaUnit=${ruleData.slaUnit}&sla=${ruleData.sla}&breachType=${ruleData.breachType}&breachTimeUnit=${ruleData.breachTimeUnit}&breachTime=${ruleData.breachTime}`;\r\n        const response = await fetch(`/mui/servicemanager/serachRule?${query}`)\r\n        const result = await response.json();\r\n        if(result && result.length > 0){\r\n          let validateDuplicate = true;\r\n          const {\r\n            accountCode,\r\n            priority,\r\n            assignmentGroup,\r\n            slaUnit,\r\n            sla,\r\n            breachType,\r\n            breachTimeUnit,\r\n            breachTime,\r\n            _id: ruleIdDB\r\n          } = result[0];\r\n          let ruleFromDB =  {\r\n            accountCode,\r\n            priority,\r\n            assignmentGroup,\r\n            slaUnit,\r\n            sla,\r\n            breachType,\r\n            breachTimeUnit,\r\n            breachTime\r\n          };\r\n          if(this.state.editMode){\r\n            if(this.state.ruleId && ruleIdDB === this.state.ruleId){\r\n              validateDuplicate = false;\r\n            }else {\r\n              validateDuplicate = true\r\n            }\r\n          }\r\n          if(validateDuplicate){\r\n            const incomingRuleData = {\r\n              accountCode: ruleData.accountCode,\r\n              priority: ruleData.priority,\r\n              assignmentGroup: ruleData.assignmentGroup,\r\n              slaUnit: ruleData.slaUnit,\r\n              sla: ruleData.sla,\r\n              breachType: ruleData.breachType,\r\n              breachTimeUnit: ruleData.breachTimeUnit,\r\n              breachTime: ruleData.breachTime\r\n            }\r\n            if(JSON.stringify(ruleFromDB) === JSON.stringify(incomingRuleData)){\r\n              this.setState({\r\n                invalid_rule: \"Rule already exists \",\r\n                isFormValid: false\r\n              });\r\n              return;\r\n            }else {\r\n              this.setState({\r\n                invalid_rule: undefined,\r\n                isFormValid: true\r\n              });\r\n            }\r\n          }\r\n        }else {\r\n          this.setState({\r\n            invalid_rule: undefined,\r\n            isFormValid: true\r\n          });\r\n        }\r\n\r\n        //Validate group name\r\n        if(this.state.groupName){\r\n          const responseGroup = await fetch(`/mui/group/getGroup/${this.state.groupName}`)\r\n          const resultGroup = await responseGroup.json();\r\n          if(!resultGroup || resultGroup.length === 0){\r\n            this.setState({\r\n              invalid_group: \"Invalid Group\",\r\n              isFormValid: false\r\n            });\r\n            return;\r\n          }else {\r\n            this.setState({\r\n              invalid_group: undefined,\r\n              isFormValid: true\r\n            });\r\n          }\r\n        }\r\n\r\n        ruleData[\"isRuleEnabled\"]=this.state.isRuleEnabled\r\n        if (this.state.editMode) {\r\n          \r\n            const data = {\r\n                ruleId: this.state.ruleId,\r\n                data:ruleData \r\n              }\r\n              trackPromise(\r\n                fetch('/mui/patchRule' , {\r\n                method: \"PATCH\",\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify(data)\r\n                })\r\n                .then((result) => {\r\n                    if(result.status === 200){\r\n                      this.props.history.push(`${this.links.ServiceManager}`);\r\n                    }\r\n                })\r\n                .catch(err => { \r\n                    // setErrorMessage({errorMessage: err.error});\r\n                })\r\n            );\r\n        } else {\r\n            trackPromise(\r\n              fetch(\"/mui/createRule\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                  \"Content-type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(ruleData),\r\n              })\r\n                .then((result) => {\r\n                  if (result.status === 404 || result.status === 400) {\r\n                    result.json().then((object) => {\r\n                      this.setState({ resErrMsg: object.errMsg });\r\n                    });\r\n                  } else if (result.status === 200) {\r\n                    this.props.history.push(`${this.links.ServiceManager}`);\r\n                  }\r\n                })\r\n                .catch((err) => {\r\n                  this.setState({ errorMessage: err.message });\r\n                })\r\n            );\r\n          }\r\n    }\r\n  };\r\n\r\n  breachTimeUnitList = [\"Minutes\", \"Hours\",];\r\n  slaUnitList = [\"Minutes\", \"Hours\", \"Days\"];\r\n  render() {\r\n   \r\n    const breachTypes = [\"Approaching\", \"Lapsed\"]\r\n    const priorityList = [\"1\", \"2\", \"3\", \"4\", \"5\"]\r\n    const priorityOptions = priorityList.map((priority) => {\r\n      return (\r\n        <option\r\n          className=\"bx--select-option\"\r\n          value={priority}\r\n          selected={priority === this.state.priority}\r\n\r\n        >\r\n          {priority}\r\n        </option>\r\n      );\r\n    });\r\n    const dynamicQueryParamOptions = this.state.dynamicComboboxItems.map((paramName) => {\r\n      return (\r\n        <option\r\n          className=\"bx--select-option\"\r\n          value={paramName}\r\n          // selected={paramName === this.state.priority}\r\n\r\n        >\r\n          {paramName}\r\n        </option>\r\n      );\r\n    });\r\n    const dynamicQueryOperatorptions = this.state.dynamicQueryOperators.map((operator) => {\r\n      return (\r\n        <option\r\n          className=\"bx--select-option\"\r\n          value={operator.value}\r\n\r\n        >\r\n          {operator.text}\r\n        </option>\r\n      );\r\n    });\r\n    const breachTypeOptions = breachTypes.map((breachType) => {\r\n      return (\r\n        <option\r\n          className=\"bx--select-option\"\r\n          value={breachType}\r\n          selected={breachType === this.state.breachType}\r\n\r\n        >\r\n          {breachType}\r\n          \r\n        </option>\r\n      );\r\n    });\r\n \r\n    const breachTimeUnitOptions = this.breachTimeUnitList.map((breachTimeUnit) => {\r\n      return (\r\n        <option\r\n          className=\"bx--select-option\"\r\n          value={breachTimeUnit}\r\n          selected={breachTimeUnit === this.state.breachTimeUnit}\r\n        >\r\n          {breachTimeUnit}\r\n        </option>\r\n      );\r\n    });\r\n    const slaUnitOptions = this.slaUnitList.map((slaUnit) => {\r\n      return (\r\n        <option\r\n          className=\"bx--select-option\"\r\n          value={slaUnit}\r\n          selected={slaUnit === this.state.slaUnit}\r\n        >\r\n          {slaUnit}\r\n        </option>\r\n      );\r\n    });\r\n    let inputFields = null;\r\n\r\n    if(this.state.queryParameters ){\r\n\r\n      inputFields =  this.state.queryParameters.map((input, index) => {\r\n        console.log(\"input\",JSON.stringify(input));\r\n        return (\r\n          <>\r\n            <Row>\r\n              <Column>\r\n                  <Select\r\n                      className=\"labelFont \"\r\n                      id={`paramName-${index}`}\r\n                      name=\"paramName\"\r\n                      labelText=\"Name\"\r\n                      defaultValue={input.paramName || ''}\r\n                      onChange={(event) => this.handleDynamicInputChange(event, index)}\r\n                      // required=\"required\"\r\n                    >\r\n                      <SelectItem\r\n                        value=\"\"\r\n                        text=\"Choose an Option\"\r\n                      />\r\n                      {dynamicQueryParamOptions}\r\n                  </Select>\r\n              </Column>\r\n              <Column>\r\n                <Select\r\n                      className=\"labelFont \"\r\n                      id={`operator-${index}`}\r\n                      name=\"operator\"\r\n                      labelText=\"Operator\"\r\n                      defaultValue={input.operator}\r\n                      onChange={(event) => this.handleDynamicInputChange(event, index)}\r\n                      // required=\"required\"\r\n                    >\r\n                      <SelectItem\r\n                        value=\"\"\r\n                        text=\"Choose an Option\"\r\n                      />\r\n                      {dynamicQueryOperatorptions}  \r\n                  </Select>\r\n              </Column>\r\n              <Column>\r\n                <TextInput\r\n                  labelText={\r\n                    <>\r\n                      Value{\" \"}\r\n                    </>\r\n                  }\r\n                  placeholder=\"Value\"\r\n                  name=\"paramValue\"\r\n                  id={`${input.paramValue}-${index}`}\r\n                  onChange={(event) => this.handleDynamicInputChange(event, index)}\r\n                  defaultValue={input.paramValue}\r\n                />\r\n              </Column>\r\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                <Button\r\n                  renderIcon={Add16}\r\n                  iconDescription=\"Add Query Parameter\"\r\n                  hasIconOnly\r\n                  size=\"md\"\r\n                  kind=\"ghost\"\r\n                  onClick={(event) => this.handleAddClick(event)}\r\n                ></Button>\r\n                {this.state.queryParameters.length !== 1 && (\r\n                  <Button\r\n                    renderIcon={Subtract16}\r\n                    iconDescription=\"Remove Query Parameter\"\r\n                    hasIconOnly\r\n                    size=\"md\"\r\n                    kind=\"ghost\"\r\n                    onClick={() => this.handleRemoveClick(index)}\r\n                  >\r\n                    \r\n                  </Button>\r\n                )}\r\n              </div>\r\n            </Row>\r\n          </>\r\n        );\r\n      });\r\n    }\r\n\r\n   \r\n    return (\r\n      <div>\r\n        <div className=\"headerDiv mainMargin sectionMargin\">\r\n          <Breadcrumb header=\"Add Rule\" links={this.links} />\r\n        </div>\r\n        <section className=\"sectionMargin mainMargin paddingCostom\">\r\n          <Form\r\n            className=\"formMain\"\r\n            onSubmit={(event) => this.formSubmit(event)}\r\n          >\r\n            <TextInput\r\n              labelText={\r\n                <>\r\n                  Account Code <b style={{ color: \"red\" }}>*</b>\r\n                </>\r\n              }\r\n              placeholder=\"Account Code\"\r\n              name=\"accountCode\"\r\n              id=\"accountCode\"\r\n              onChange={(event) => this.handleInputChange(event)}\r\n              defaultValue={this.state.accountCode}\r\n              readOnly={true}\r\n              required\r\n            />\r\n            {this.state[\"invalid_accountCode\"] && (\r\n              <small className=\"danger\">\r\n                <b className=\"errorMsg\">{this.state[\"invalid_accountCode\"]}</b>\r\n              </small>\r\n            )}\r\n            <TextInput\r\n              labelText={\r\n                <>\r\n                  Assignment Group{\" \"}\r\n                  <TooltipIcon\r\n                    renderIcon={InformationFilled16}\r\n                    direction=\"bottom\"\r\n                    tabIndex={0}\r\n                    tooltipText=\"Assignment group of the ticket that needs notification\"\r\n                  ></TooltipIcon>\r\n                </>\r\n              }\r\n              placeholder=\"Assignment Group\"\r\n              name=\"assignmentGroup\"\r\n              id=\"assignmentGroup\"\r\n              onChange={(event) => this.handleInputChange(event)}\r\n              onBlur={(event) => this.onBlur(event)}\r\n              defaultValue={this.state.assignmentGroup}\r\n            />\r\n            {this.state[\"invalid_assignmentGroup\"] && (\r\n              <small className=\"danger\">\r\n                <b className=\"errorMsg\">\r\n                  {this.state[\"invalid_assignmentGroup\"]}\r\n                </b>\r\n              </small>\r\n            )}\r\n            <Select\r\n              className=\"labelFont \"\r\n              id=\"priority\"\r\n              name=\"priority\"\r\n              labelText={\r\n                <>\r\n                  Priority <b style={{ color: \"red\" }}>*</b>\r\n                  <TooltipIcon\r\n                    renderIcon={InformationFilled16}\r\n                    direction=\"bottom\"\r\n                    tabIndex={0}\r\n                    tooltipText=\"Priority of the ticket\"\r\n                  ></TooltipIcon>\r\n                </>\r\n              }\r\n              defaultValue={this.state.priority}\r\n              onChange={(e) => this.handleInputChange(e)}\r\n              required=\"required\"\r\n            >\r\n              <SelectItem value=\"\" text=\"Choose an Option\" />\r\n              {priorityOptions}\r\n            </Select>\r\n\r\n            <MultiSelect\r\n              titleText={\r\n                <>\r\n                  State <b style={{ color: \"red\" }}>*</b>\r\n                </>\r\n              }\r\n              label=\"State\"\r\n              items={this.state.ticketStateItems}\r\n              onChange={(e) => this.onSelectChange(e)}\r\n              itemToString={(item) => (item ? item.text : \"\")}\r\n              initialSelectedItems={this.selectedTicketStates}\r\n            />\r\n            <div\r\n              style={{ marginBottom: \"3px\", marginTop: \"1rem\" }}\r\n              className=\"ticketingToolGroupDiv\"\r\n            >\r\n              <p style={{ marginBottom: \"3px\" }}>\r\n                Enter dynamic query parameters\r\n                <TooltipIcon\r\n                  renderIcon={InformationFilled16}\r\n                  direction=\"bottom\"\r\n                  tabIndex={0}\r\n                  tooltipText=\"Generate Parameters for dynamic query by clicking on settings button in the Service Manager home page. For fields with Date, enter value in YYYY-MM-DD HH:MM:SS format\"\r\n                ></TooltipIcon>\r\n              </p>\r\n              {inputFields}\r\n              \r\n            </div>\r\n\r\n            <Row>\r\n              <Column>\r\n                <Select\r\n                  className=\"labelFont \"\r\n                  id=\"slaUnit\"\r\n                  name=\"slaUnit\"\r\n                  labelText={\r\n                    <>\r\n                      SLA/SLO Unit <b style={{ color: \"red\" }}>*</b>\r\n                      <TooltipIcon\r\n                        renderIcon={InformationFilled16}\r\n                        direction=\"bottom\"\r\n                        tabIndex={0}\r\n                        tooltipText={`Specify the unit of time the SLA runs within which the ticket should move out of the initial state(Open/InProgress)`}\r\n                      ></TooltipIcon>\r\n                    </>\r\n                  }\r\n                  defaultValue={this.state.slaUnit || \"\"}\r\n                  onChange={(e) => this.handleInputChange(e)}\r\n                  required=\"required\"\r\n                >\r\n                  <SelectItem value=\"\" text=\"Choose an Option\" />\r\n                  {slaUnitOptions}\r\n                </Select>\r\n              </Column>\r\n              <Column>\r\n                <TextInput\r\n                  labelText={\r\n                    <>\r\n                      SLA/SLO Duration <b style={{ color: \"red\" }}>*</b>\r\n                      <TooltipIcon\r\n                        renderIcon={InformationFilled16}\r\n                        direction=\"bottom\"\r\n                        tabIndex={0}\r\n                        tooltipText={` Specify the length of time the SLA runs within which the ticket should move out of the initial state(Open/InProgress)`}\r\n                      ></TooltipIcon>\r\n                    </>\r\n                  }\r\n                  placeholder=\"SLA\"\r\n                  name=\"sla\"\r\n                  id=\"sla\"\r\n                  onChange={(event) => this.handleInputChange(event)}\r\n                  defaultValue={this.state.sla}\r\n                  maxLength={3}\r\n                  required\r\n                />\r\n\r\n                {this.state[\"invalid_sla\"] && (\r\n                  <small className=\"danger\">\r\n                    <b className=\"errorMsg\">{this.state[\"invalid_sla\"]}</b>\r\n                  </small>\r\n                )}\r\n              </Column>\r\n            </Row>\r\n            <Row>\r\n              <Column>\r\n                <Select\r\n                  className=\"labelFont \"\r\n                  id=\"breachType\"\r\n                  name=\"breachType\"\r\n                  labelText={\r\n                    <>\r\n                      Breach Detection Type <b style={{ color: \"red\" }}>*</b>\r\n                      <TooltipIcon\r\n                        renderIcon={InformationFilled16}\r\n                        direction=\"bottom\"\r\n                        tabIndex={0}\r\n                        tooltipText=\"Specify breach detection type, whether the breach should be detected before or after a breach occurs\"\r\n                      ></TooltipIcon>\r\n                    </>\r\n                  }\r\n                  defaultValue={this.state.breachType || \"\"}\r\n                  onChange={(e) => this.handleInputChange(e)}\r\n                  required=\"required\"\r\n                >\r\n                  <SelectItem value=\"\" text=\"Choose an Option\" />\r\n                  {breachTypeOptions}\r\n                </Select>\r\n              </Column>\r\n            </Row>\r\n            <Row>\r\n              <Column>\r\n                <Select\r\n                  className=\"labelFont \"\r\n                  id=\"breachTimeUnit\"\r\n                  name=\"breachTimeUnit\"\r\n                  labelText={\r\n                    <>\r\n                      Breach Detection Time Unit{\" \"}\r\n                      <b style={{ color: \"red\" }}>*</b>\r\n                      <TooltipIcon\r\n                        renderIcon={InformationFilled16}\r\n                        direction=\"bottom\"\r\n                        tabIndex={0}\r\n                        tooltipText=\"Specify the unit of time when breach must be notified once detected\"\r\n                      ></TooltipIcon>\r\n                    </>\r\n                  }\r\n                  defaultValue={this.state.breachTimeUnit || \"\"}\r\n                  onChange={(e) => this.handleInputChange(e)}\r\n                  required=\"required\"\r\n                >\r\n                  <SelectItem value=\"\" text=\"Choose an Option\" />\r\n                  {breachTimeUnitOptions}\r\n                </Select>\r\n              </Column>\r\n              <Column>\r\n                <TextInput\r\n                  labelText={\r\n                    <>\r\n                      Breach Detection Time <b style={{ color: \"red\" }}>*</b>\r\n                      <TooltipIcon\r\n                        renderIcon={InformationFilled16}\r\n                        direction=\"bottom\"\r\n                        tabIndex={0}\r\n                        tooltipText=\"Specify the length of time when breach must be notified once detected\"\r\n                      ></TooltipIcon>\r\n                    </>\r\n                  }\r\n                  placeholder=\"Breach Detection Time\"\r\n                  name=\"breachTime\"\r\n                  id=\"breachTime\"\r\n                  onChange={(event) => this.handleInputChange(event)}\r\n                  maxLength={3}\r\n                  defaultValue={this.state.breachTime}\r\n                  required\r\n                />\r\n                {this.state[\"invalid_breachTime\"] && (\r\n                  <small className=\"danger\">\r\n                    <b className=\"errorMsg\">\r\n                      {this.state[\"invalid_breachTime\"]}\r\n                    </b>\r\n                  </small>\r\n                )}\r\n              </Column>\r\n            </Row>\r\n            <div\r\n              style={{ marginBottom: \"3px\" }}\r\n              className=\"ticketingToolGroupDiv\"\r\n            >\r\n              <p style={{ marginBottom: \"3px\" }}>Choose notification type</p>\r\n              <Row>\r\n                <Column>\r\n                  <Checkbox\r\n                    labelText={\r\n                      <>\r\n                        User Email{\" \"}\r\n                        {this.state.enableUserEmail ? (\r\n                          <b style={{ color: \"red\" }}>*</b>\r\n                        ) : null} <TooltipIcon \r\n                        renderIcon={InformationFilled16} \r\n                        direction=\"bottom\" \r\n                        tabIndex={0} \r\n                        tooltipText=\"User email needs to be entered , user would get notification as a direct message\"\r\n                        >\r\n                        </TooltipIcon>\r\n                      </>\r\n                    }\r\n                    id=\"checkbox-userEmail\"\r\n                    checked={this.state.enableUserEmail}\r\n                    onChange={() => this.setUserEmail()}\r\n                  />\r\n\r\n                  <TextInput\r\n                    labelText=\"\"\r\n                    placeholder=\"User Email\"\r\n                    name=\"userEmail\"\r\n                    id=\"userEmail\"\r\n                    onChange={(event) => this.handleInputChange(event)}\r\n                    defaultValue={this.state.userEmail}\r\n                    required={this.state.enableUserEmail}\r\n                    disabled={!this.state.enableUserEmail}\r\n                  />\r\n                  {this.state[\"invalid_userEmail\"] && (\r\n                    <small className=\"danger\">\r\n                      <b className=\"errorMsg\">\r\n                        {this.state[\"invalid_userEmail\"]}\r\n                      </b>\r\n                    </small>\r\n                  )}\r\n                </Column>\r\n                <Column>\r\n                  <Checkbox\r\n                    labelText={\r\n                      <>\r\n                        Channel Id{\" \"}\r\n                        {this.state.enableChannelId ? (\r\n                          <b style={{ color: \"red\" }}>*</b>\r\n                        ) : null}{\" \"}\r\n                        <TooltipIcon\r\n                          renderIcon={InformationFilled16}\r\n                          direction=\"bottom\"\r\n                          tabIndex={0}\r\n                          tooltipText=\"Channel id of the collaboration tool where notifications needs to be posted\"\r\n                        ></TooltipIcon>\r\n                      </>\r\n                    }\r\n                    id=\"checkbox-channelId\"\r\n                    checked={this.state.enableChannelId}\r\n                    onChange={() => this.setChannelId()}\r\n                  />\r\n                  <TextInput\r\n                    labelText=\"\"\r\n                    placeholder=\"Channel ID\"\r\n                    name=\"channelId\"\r\n                    id=\"channelId\"\r\n                    onChange={(event) => this.handleInputChange(event)}\r\n                    defaultValue={this.state.channelId}\r\n                    required={this.state.enableChannelId}\r\n                    disabled={!this.state.enableChannelId}\r\n                  />\r\n                </Column>\r\n                <Column>\r\n                  <Checkbox\r\n                    labelText={\r\n                      <>\r\n                        Group Name{\" \"}\r\n                        {this.state.enableGroup ? (\r\n                          <b style={{ color: \"red\" }}>*</b>\r\n                        ) : null}{\" \"}\r\n                        <TooltipIcon\r\n                          renderIcon={InformationFilled16}\r\n                          direction=\"bottom\"\r\n                          tabIndex={0}\r\n                          tooltipText=\"ChatOps groups needs to be entered , all members would get notification as a direct message\"\r\n                        ></TooltipIcon>\r\n                      </>\r\n                    }\r\n                    id=\"checkbox-group\"\r\n                    checked={this.state.enableGroup}\r\n                    onChange={() => this.setGroup()}\r\n                  />\r\n                  <TextInput\r\n                    labelText=\"\"\r\n                    placeholder=\"Group Name\"\r\n                    name=\"groupName\"\r\n                    id=\"groupName\"\r\n                    onChange={(event) => this.handleInputChange(event)}\r\n                    defaultValue={this.state.groupName}\r\n                    required={this.state.enableGroup}\r\n                    disabled={!this.state.enableGroup}\r\n                  />\r\n                  {this.state[\"invalid_group\"] && (\r\n                    <small className=\"danger\">\r\n                      <b className=\"errorMsg\">{this.state[\"invalid_group\"]}</b>\r\n                    </small>\r\n                  )}\r\n                </Column>\r\n              </Row>\r\n            </div>\r\n            {this.state[\"invalid_action\"] && (\r\n              <small className=\"danger\">\r\n                <b className=\"errorMsg\">{this.state[\"invalid_action\"]}</b>\r\n              </small>\r\n            )}\r\n            {this.state[\"invalid_ticketStates\"] && (\r\n              <small className=\"danger\">\r\n                <b className=\"errorMsg\">{this.state[\"invalid_ticketStates\"]}</b>\r\n              </small>\r\n            )}\r\n            <Row>\r\n              <Column>\r\n                <Checkbox\r\n                  labelText={\r\n                    <>\r\n                      Send Notification to Ticket Owner{\" \"}\r\n                      <TooltipIcon\r\n                        renderIcon={InformationFilled16}\r\n                        direction=\"bottom\"\r\n                        tooltipText=\"Only kyndryl email ids are supported\"\r\n                      ></TooltipIcon>\r\n                    </>\r\n                  }\r\n                  id=\"checkbox-owner\"\r\n                  checked={this.state.enableOwnerNotification}\r\n                  onChange={() => this.setOwnerNotification()}\r\n                />\r\n              </Column>\r\n              <Column>\r\n                <Checkbox\r\n                  labelText=\"Enable creation of Incident Channel\"\r\n                  id=\"checkbox-incidentChannel\"\r\n                  checked={this.state.incidentChannelEnabled}\r\n                  onChange={() => this.setIncidentChannel()}\r\n                />\r\n              </Column>\r\n            </Row>\r\n            <Button className=\"addAccBtn addBtnCss addBtnPACss\" type=\"submit\">\r\n              Save Rule\r\n            </Button>\r\n            <br />\r\n            {this.state[\"invalid_rule\"] && (\r\n              <small className=\"danger\">\r\n                <b className=\"errorMsg\">{this.state[\"invalid_rule\"]}</b>\r\n              </small>\r\n            )}\r\n            <br />\r\n            <br />\r\n            <br />\r\n          </Form>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Assistants\\SAAssistants\\SAAssistatnsMain.jsx",["769","770","771","772","773","774","775","776","777","778"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SALandingSidebar from '../../SALandingSidebar';\r\nimport SAAssistatnsBreadCrump from './SAAssistatnsBreadcrump';\r\nimport SAAssistatnsList from './SAAssistantsList';\r\n// import SAWorkspace from './SAWorkspace/Workspace';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\n// import { Link, Route } from 'react-router-dom';\r\nimport { BrowserRouter, Switch, Route , Link} from 'react-router-dom';\r\nclass SuperAdminAssistants extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"divContainer\">\r\n            <section className=\"sectionGrid\">\r\n                <div class=\"bx--grid padding0\">\r\n                    <div class=\"rowWidth\">\r\n                        <div class=\"gridColulmnWidth3\">\r\n                            <SALandingSidebar />\r\n                        </div>\r\n                        <div class=\"gridColumn13\" style={{maxWidth: '20% !important', paddingRight: '0 !important'}}>\r\n                            <SAAssistatnsBreadCrump />\r\n                            <SAAssistatnsList />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n\r\n        </div>\r\n    );\r\n    }\r\n  }\r\n  export default SuperAdminAssistants; ","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\common\\header\\header.jsx",["779","780","781","782"],"import React, { Component } from \"react\";\r\nimport {\r\n  Header,\r\n  HeaderContainer,\r\n  HeaderName,\r\n  HeaderMenuButton,\r\n  HeaderMenuItem,\r\n  SkipToContent,\r\n  SideNav,\r\n  SideNavItems,\r\n  HeaderSideNavItems,\r\n  HeaderGlobalBar,\r\n  HeaderGlobalAction,\r\n  Button,\r\n} from \"carbon-components-react\";\r\nimport { User20 } from \"@carbon/icons-react\";\r\nimport \"./header.scss\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass UIHeader extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { users: [] };\r\n  }\r\n  componentDidMount() {\r\n    trackPromise(\r\n      fetch(\"/mui/getUserAccess\")\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((users) => {\r\n          this.setState({ users });\r\n          var loaderFlag = true;\r\n        })\r\n    );\r\n  }\r\n\r\n  blankFn = () => {}\r\n\r\n  render() {\r\n    var isAccAdmin = this.state.users;\r\n    var userObj = isAccAdmin.userAccessData;\r\n    var element = \"\";\r\n    var user = \"\";\r\n    var releaseNumber = \"\";\r\n    var namespace = \"\";\r\n    if (typeof userObj != \"undefined\") {\r\n      if (userObj.user) {\r\n        user = userObj.user.id;\r\n      }\r\n      releaseNumber = userObj.releaseNumber;\r\n      namespace = userObj.namespace;\r\n      var userPresent = userObj.user;\r\n    }\r\n    return (\r\n      <HeaderContainer\r\n        render={({ isSideNavExpanded, onClickSideNavExpand }) => (\r\n          <Header aria-label=\"Chatops\">\r\n            <SkipToContent />\r\n            { userPresent &&\r\n                <HeaderMenuButton\r\n                aria-label=\"Open menu\"\r\n                onClick={onClickSideNavExpand}\r\n                isActive={isSideNavExpanded}\r\n                />\r\n            }\r\n            <div>\r\n              <HeaderName prefix=\"\">\r\n                <Link to=\"/mui/home\" className=\"headerDivTitle\">\r\n                  CHATOPS&nbsp;\r\n                  <span className=\"spanHeaderTitle\">MANAGEMENT UI</span>\r\n                </Link>\r\n              </HeaderName>\r\n              <div className=\"versionHeader\">\r\n                {namespace}&nbsp;[ver:&nbsp;{releaseNumber}]\r\n              </div>\r\n            </div>\r\n            <HeaderGlobalBar>\r\n              <HeaderName prefix=\"\">\r\n                <p className=\"userTitle\">{userPresent}&nbsp;</p>\r\n                <User20 />\r\n              </HeaderName>\r\n              <HeaderGlobalAction aria-label=\"User\"></HeaderGlobalAction>\r\n            </HeaderGlobalBar>\r\n\r\n            \r\n              { userPresent &&\r\n                <SideNav\r\n              aria-label=\"Side navigation\"\r\n              expanded={isSideNavExpanded}\r\n              isPersistent={false}\r\n              isRail\r\n            >\r\n                <div>\r\n                    { userObj.isAccoutAdmin && <>\r\n                        <p className=\"SidebarTitle\">Account Admin</p>\r\n                        <SideNavItems>\r\n                            <HeaderSideNavItems>\r\n                            <HeaderMenuItem className=\"againTest\" onClick={isSideNavExpanded ? onClickSideNavExpand : this.blankFn}>\r\n                                <Link to=\"/mui/onboardAccount\">\r\n                                Onboard Account\r\n                                </Link>\r\n                            </HeaderMenuItem>\r\n                            </HeaderSideNavItems>\r\n                         </SideNavItems>\r\n                    </>}\r\n                    { userObj.isProgramAdmin && <>\r\n                        <p className=\"SidebarTitle\">Program Admin</p>\r\n                        <SideNavItems>\r\n                            <HeaderSideNavItems>\r\n                            <HeaderMenuItem className=\"againTest\" onClick={isSideNavExpanded ? onClickSideNavExpand : this.blankFn}>\r\n                                <Link to=\"/mui/addAccount\">Onboard Account</Link>\r\n                                </HeaderMenuItem>\r\n                            <HeaderMenuItem className=\"againTest\" onClick={isSideNavExpanded ? onClickSideNavExpand : this.blankFn}>\r\n                                <Link to=\"/mui/paFeatures\">Features</Link>\r\n                            </HeaderMenuItem>\r\n                            </HeaderSideNavItems>\r\n                        </SideNavItems>\r\n                    </>}\r\n                    { userObj.isSuperAdmin && <>\r\n                        <p className=\"SidebarTitle\">Super Admin</p>\r\n                        <SideNavItems>\r\n                            <HeaderSideNavItems>\r\n                            <HeaderMenuItem className=\"againTest\" onClick={isSideNavExpanded ? onClickSideNavExpand : this.blankFn}>\r\n                                <Link to=\"/mui/superAdmin\">Configure Settings</Link>\r\n                            </HeaderMenuItem>\r\n                            </HeaderSideNavItems>\r\n                        </SideNavItems>\r\n                    </>}\r\n                </div>\r\n                </SideNav>\r\n              }\r\n            \r\n          </Header>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default UIHeader;\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\EventStreams\\SAEventStreams\\SAEventStreamsMain.jsx",["783","784","785","786","787","788","789","790","791","792"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SALandingSidebar from '../../SALandingSidebar';\r\nimport SAEventStreamsBreadCrump from './SAEventStreamsBreadcrump';\r\nimport SAEventStreamsList from './SAEventStreamsList';\r\n// import SAWorkspace from './SAWorkspace/Workspace';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\n// import { Link, Route } from 'react-router-dom';\r\nimport { BrowserRouter, Switch, Route , Link} from 'react-router-dom';\r\nclass SuperAdminEventStreams extends React.Component {\r\n    \r\n  render() {\r\n    return (\r\n        <div className=\"divContainer\">\r\n            <section className=\"sectionGrid\">\r\n                <div class=\"bx--grid padding0\">\r\n                    <div class=\"rowWidth\">\r\n                        <div class=\"gridColulmnWidth3\">\r\n                            <SALandingSidebar />\r\n                        </div>\r\n                        <div class=\"gridColumn13\" style={{maxWidth: '20% !important', paddingRight: '0 !important'}}>\r\n                            <SAEventStreamsBreadCrump />\r\n                            <SAEventStreamsList />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            \r\n        </div>\r\n    );\r\n    }\r\n  }\r\n  export default SuperAdminEventStreams;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\EventStreams\\AddEventStreams\\AddEventStreams.jsx",["793","794"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport {  Button, Form, TextArea, TextInput } from 'carbon-components-react';\r\nimport SAEventStreamsBreadCrump from './AddEventStreamsBreadcrum';\r\nimport SALandingSidebar from '../../SALandingSidebar';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { validate } from '../../../../validation/validate.js';\r\nclass SAAddEventStreams extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = (\r\n            {\r\n                eventStreamDataFromDB:[],\r\n                verifiedEventStreamFetched:[],\r\n                eventStreamNameElement: '',\r\n                eventStreamConfigElement: '',\r\n                resErrMsg: ''\r\n            }\r\n        );\r\n        // this.saveWorkspace = this.saveWorkspace.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        trackPromise(fetch('/mui/addEventStreams')\r\n        .then(res => {\r\n            return res.json()\r\n        })\r\n        .then(ESData => { \r\n            this.setState({ ESData })\r\n        })\r\n        )\r\n    }\r\n    handleInputChange = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n    updateValue = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n    saveWorkspace = (e) => {\r\n\r\n    }\r\n\r\n    formSubmit= (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n        const eventStreamData = {\r\n            name: this.state.eventStreamName || this.state.ESData?.ESDataToEdit?.name ,\r\n            configuration: this.state.eventStreamsConfig || this.state.ESData?.ESDataToEdit?.configurations\r\n        };\r\n         // SpecialCharacter validation\r\n        var validateFields = validate(eventStreamData);\r\n        if(validateFields.length > 0){\r\n            var message = \"\";\r\n            for(var i =0; i<validateFields.length; i++){\r\n                var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n                if(element){\r\n                    message += element.title + \", \";\r\n                }else{\r\n                    message += validateFields[i] + ', '\r\n                }\r\n            }\r\n            this.setState({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n        }else{\r\n            trackPromise(\r\n                fetch('/mui/saveEventStreams' , {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify(eventStreamData)\r\n            })\r\n            .then((result) => {\r\n                if (result.status === 404 || result.status === 400 || result.status === 500)  {\r\n                    result.json().then((object)=> {\r\n                        this.setState({resErrMsg: object.eventStreamsError});\r\n                    })\r\n                } else if (result.status === 409) {\r\n                    result.json().then((object)=> {\r\n                        this.setState({resErrMsg: object.eventStreamsError});\r\n                    })\r\n                } else if(result.status == 200){\r\n                    this.props.history.push(\"/mui/eventStreams\");\r\n                }\r\n        })\r\n            .catch(err => { \r\n            this.setState({errorMessage: err.message});\r\n            })\r\n            )\r\n        }  \r\n    }\r\n    render() {\r\n        var eventStreamConfigElement = '';\r\n        var eventStreamNameElement = '';\r\n        if(this.state.ESData){\r\n            // EDIT FLOW------\r\n            var dataToFEtch = this.state.ESData.ESDataToEdit;\r\n            var configData = JSON.stringify(dataToFEtch.configurations) ;\r\n            eventStreamConfigElement = configData.replaceAll(\",\", \", \\n\")\r\n            eventStreamNameElement = dataToFEtch.name;\r\n        }else{\r\n            // CREATE FLOW-------\r\n            eventStreamConfigElement = '';\r\n            eventStreamNameElement = '';\r\n        }\r\n        return (\r\n            <div className=\"divContainer\">\r\n                <section className=\"sectionGrid\">\r\n                    <div class=\"bx--grid padding0\">\r\n                        <div class=\"rowWidth\">\r\n                            <div class=\"gridColulmnWidth3\">\r\n                                <SALandingSidebar />\r\n                            </div>\r\n                            <div class=\"gridColumn13\" style={{maxWidth: '20% !important', paddingRight: '0 !important'}}>\r\n                                <SAEventStreamsBreadCrump />\r\n                                <div className=\"formDivSATextAres\">\r\n                                    <Form  onSubmit={this.formSubmit}>\r\n                                        <TextInput className=\"bx--text-input bx--text__input\" id=\"eventStreamName\" name=\"eventStreamName\" labelText={ <> EventStream Name <b className=\"fontRed\">*</b> </> }  placeholder=\"EventStream Name\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={eventStreamNameElement} required />\r\n                                        <TextArea\r\n                                            cols={50}\r\n                                            id=\"eventStreamsConfig\"\r\n                                            name=\"eventStreamsConfig\"\r\n                                            helperText=\"Provide proper json with name/value pairs, that begins with { left brace and ends with } right brace. Each name should be followed by : colon and the name/value pairs separated by , comma\"\r\n                                            onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} \r\n                                            defaultValue={eventStreamConfigElement} \r\n                                            required\r\n                                            labelText={ <> Configurations<b className=\"fontRed\">*</b> </> }\r\n                                            placeholder=\"Enter EveentStream Configurations\"\r\n                                            rows={8}\r\n                                        />\r\n                                        {\r\n                                            this.state['resErrMsg'] && \r\n                                            <small className=\"fontRed\">\r\n                                            <b className=\"blgrperrorMsg\">{this.state.resErrMsg.jsonErr}</b>\r\n                                            </small>\r\n                                        }\r\n                                        {\r\n                                            this.state['specialCharacterErr'] &&\r\n                                            <small className=\"fontRed\">\r\n                                                <b className=\"errorMsg specialCharErr\">{this.state['specialCharacterErr']}</b>\r\n                                            </small>\r\n                                        }\r\n                                        <br></br> \r\n                                        <Button kind=\"primary\" type=\"submit\" className=\"btnSACss\" >Submit</Button>\r\n                                    </Form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default withRouter(SAAddEventStreams);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\GlobalAssignment\\SAGlobalAssignments\\SAGlobalAssignmentsMain.jsx",["795","796","797","798","799","800","801","802","803","804"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SALandingSidebar from '../../SALandingSidebar';\r\nimport SAGlobalAssignmentsBreadcrump from './SAGlobalAssignmentsBreadcrump';\r\nimport SAGlobalAssignmentsList from './SAGlobalAssignmentsList';\r\n// import SAWorkspace from './SAWorkspace/Workspace';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\n// import { Link, Route } from 'react-router-dom';\r\nimport { BrowserRouter, Switch, Route , Link} from 'react-router-dom';\r\nclass SAGlobalAssignments extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"divContainer\">\r\n            <section className=\"sectionGrid\">\r\n                <div class=\"bx--grid padding0\">\r\n                    <div class=\"rowWidth\">\r\n                        <div class=\"gridColulmnWidth3\">\r\n                            <SALandingSidebar />\r\n                        </div>\r\n                        <div class=\"gridColumn13\" style={{maxWidth: '20% !important', paddingRight: '0 !important'}}>\r\n                            <SAGlobalAssignmentsBreadcrump />\r\n                            <SAGlobalAssignmentsList />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n\r\n        </div>\r\n    );\r\n    }\r\n  }\r\n  export default SAGlobalAssignments; ","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\IndexChannel\\SAIndexChannel\\SAIndexChannelMain.jsx",["805","806","807","808","809","810","811","812","813","814"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SALandingSidebar from '../../SALandingSidebar';\r\n// import SAIndexChannelBreadCrump from './SAIndexChannelBreadCrump';\r\nimport SAIndexChannelBreadCrump from './SAIndexChannelBreadcrump';\r\nimport SAIndexChannelList from './SAIndexChannelList';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\n// import { Link, Route } from 'react-router-dom';\r\nimport { BrowserRouter, Switch, Route , Link} from 'react-router-dom';\r\nclass SuperAdminAssistants extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"divContainer\">\r\n            <section className=\"sectionGrid\">\r\n                <div class=\"bx--grid padding0\">\r\n                    <div class=\"rowWidth\">\r\n                        <div class=\"gridColulmnWidth3\">\r\n                            <SALandingSidebar />\r\n                        </div>\r\n                        <div class=\"gridColumn13\" style={{maxWidth: '20% !important', paddingRight: '0 !important'}}>\r\n                            <SAIndexChannelBreadCrump />\r\n                            <SAIndexChannelList />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n\r\n        </div>\r\n    );\r\n    }\r\n  }\r\n  export default SuperAdminAssistants; ","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Assistants\\AddAssistants\\AddAssistants.jsx",["815","816","817","818"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport {  Button, Form, TextInput  } from 'carbon-components-react';\r\nimport SAAddAssistantsBreadCrump from './AddAssistantsBreadcrump';\r\nimport SALandingSidebar from '../../SALandingSidebar';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { validate } from '../../../../validation/validate.js';\r\nclass SAAddAssistants extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = (\r\n            {\r\n                assistantsDataFromDB:[],\r\n                verifiedAssistantsFetched:[],\r\n                assistantsNameElement: '',\r\n                name: '',\r\n                url: '',\r\n                version: '',\r\n                groups: '',\r\n                apiKey: '',\r\n                resErrMsg: ''\r\n            }\r\n        );\r\n        // this.saveWorkspace = this.saveWorkspace.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        trackPromise(fetch('/mui/addAssistants')\r\n        .then(res => {\r\n            return res.json()\r\n        })\r\n        .then(assistantsData => { \r\n            this.setState({ assistantsData })\r\n        })\r\n        )\r\n    }\r\n    handleInputChange = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n    updateValue = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n    saveWorkspace = (e) => {\r\n\r\n    }\r\n\r\n    formSubmit= (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n        const eventStreamData = {\r\n            name: this.state.name || this.state.assistantsData?.assistantsDataToEdit?.name ,\r\n            url: this.state.url || this.state.assistantsData?.assistantsDataToEdit?.url,\r\n            version: this.state.version || this.state.assistantsData?.assistantsDataToEdit?.version,\r\n            groups: this.state.groups || this.state.assistantsData?.assistantsDataToEdit?.groups,\r\n            apiKey: this.state.apiKey || this.state.assistantsData?.assistantsDataToEdit?.apiKey,\r\n\r\n        };\r\n         // SpecialCharacter validation\r\n        var validateFields = validate(eventStreamData);\r\n        if(validateFields.length > 0){\r\n            var message = \"\";\r\n            for(var i =0; i<validateFields.length; i++){\r\n                var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n                message += element.title + \", \";\r\n            }\r\n            this.setState({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n        }else{\r\n            trackPromise(\r\n                fetch('/mui/saveAssistants' , {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify(eventStreamData)\r\n            })\r\n            .then((result) => {\r\n                if (result.status === 404 || result.status === 400 || result.status === 500)  {\r\n                    result.json().then((object)=> {\r\n                        this.setState({resErrMsg: object.assistantsError});\r\n                    })\r\n                } else if (result.status === 409) {\r\n                    result.json().then((object)=> {\r\n                        this.setState({resErrMsg: object.assistantsError});\r\n                    })\r\n                } else if(result.status == 200){\r\n                    this.props.history.push(\"/mui/assistants\");\r\n                }\r\n           })\r\n            .catch(err => { \r\n              this.setState({errorMessage: err.message});\r\n            })\r\n            )\r\n        }\r\n        \r\n          \r\n    }\r\n    render() {\r\n        var eventStreamConfigElement = '';\r\n        var assistantsNameElement = '';\r\n        var name = '';\r\n        var url = '';\r\n        var apiKey = '';\r\n        var version = '';\r\n        var groups = '';\r\n        if(this.state.assistantsData){\r\n            // EDIT FLOW------\r\n            var dataToFEtch = this.state.assistantsData.assistantsDataToEdit;\r\n            name = dataToFEtch.name;\r\n            url = dataToFEtch.url;\r\n            apiKey = dataToFEtch.apiKey;\r\n            version = dataToFEtch.version;\r\n            groups = dataToFEtch.groups;\r\n        }else{\r\n            // CREATE FLOW-------\r\n            name = '';\r\n            url = '';\r\n            apiKey = '';\r\n            version = '';\r\n            groups = '';\r\n        }\r\n        return (\r\n            <div className=\"divContainer\">\r\n                <section className=\"sectionGrid\">\r\n                    <div class=\"bx--grid padding0\">\r\n                        <div class=\"rowWidth\">\r\n                            <div class=\"gridColulmnWidth3\">\r\n                                <SALandingSidebar />\r\n                            </div>\r\n                            <div class=\"gridColumn13\" style={{maxWidth: '20% !important', paddingRight: '0 !important'}}>\r\n                                <SAAddAssistantsBreadCrump />\r\n                                <div className=\"formDivSA\">\r\n                                    <Form  onSubmit={this.formSubmit}>\r\n                                        <TextInput className=\"bx--text-input bx--text__input\" id=\"name\" name=\"name\" labelText={ <> Assistant Name <b className=\"fontRed\">*</b> </> }  placeholder=\"Assistant Name\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={name} required />\r\n                                        {\r\n                                            this.state['resErrMsg'] && \r\n                                            <small className=\"fontRed\">\r\n                                            <b className=\"blgrperrorMsg\">{this.state.resErrMsg.assistantNameErr}</b>\r\n                                            </small>\r\n                                        }\r\n                                        <TextInput className=\"bx--text-input bx--text__input\" id=\"url\" name=\"url\" labelText={ <> Assistant URL <b className=\"fontRed\">*</b> </> }  placeholder=\"Assistant URL\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={url} required />\r\n                                        {\r\n                                            this.state['resErrMsg'] && \r\n                                            <small className=\"fontRed\">\r\n                                            <b className=\"blgrperrorMsg\">{this.state.resErrMsg.assistantURLErr}</b>\r\n                                            </small>\r\n                                        }\r\n                                        <TextInput className=\"bx--text-input bx--text__input\" id=\"apiKey\" name=\"apiKey\" labelText={ <> API Key<b className=\"fontRed\">*</b> </> }  placeholder=\"API Key\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={apiKey} required />\r\n                                        <TextInput className=\"bx--text-input bx--text__input\" id=\"version\" name=\"version\" labelText={ <> Version <b className=\"fontRed\">*</b> </> } helperText=\"Version should be of format 'version=<value>'\" placeholder=\"Version\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={version} required />\r\n                                        {\r\n                                            this.state['resErrMsg'] && \r\n                                            <small className=\"fontRed\">\r\n                                            <b className=\"blgrperrorMsg\">{this.state.resErrMsg.assistantVersionErr}</b>\r\n                                            </small>\r\n                                        }\r\n                                        <TextInput className=\"bx--text-input bx--text__input\" id=\"groups\" name=\"groups\" labelText={ <> Group Name<b className=\"fontRed\">*</b> </> }  placeholder=\"Group Name \" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={groups} />\r\n                                        {\r\n                                            this.state['resErrMsg'] && \r\n                                            <small className=\"fontRed\">\r\n                                            <b className=\"blgrperrorMsg\">{this.state.resErrMsg.assistantSaveErr}</b>\r\n                                            </small>\r\n                                        }\r\n                                        {\r\n                                            this.state['specialCharacterErr'] &&\r\n                                            <small className=\"fontRed\">\r\n                                                <b className=\"errorMsg specialCharErr\">{this.state['specialCharacterErr']}</b>\r\n                                            </small>\r\n                                        }\r\n                                        <Button kind=\"primary\" type=\"submit\" className=\"addWorkspace\" >Submit</Button>\r\n                                    </Form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default withRouter(SAAddAssistants);\r\n\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\IndexChannel\\AddIndexChannel\\AddIndexChannel.jsx",["819","820","821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837","838","839","840","841","842","843","844","845","846","847","848","849"],"import React, {Component} from 'react';\r\nimport merge from \"lodash/merge\";\r\nimport {Query, Builder, BasicConfig,Widgets,Settings,\r\n    Utils as QbUtils} from 'react-awesome-query-builder';\r\n// import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport {  Button, Form, TextInput, Select, SelectItem, ComboBox  } from 'carbon-components-react';\r\nimport SAAddIndexChannelBreadCrump from './AddIndexChannelBreadcrump';\r\nimport SALandingSidebar from '../../SALandingSidebar';\r\nimport { withRouter } from 'react-router-dom';\r\nimport \"react-awesome-query-builder/css/antd.less\";\r\n// For Material-UI widgets only:\r\nimport MaterialConfig from 'react-awesome-query-builder/lib/config/material';\r\n\r\nimport 'react-awesome-query-builder/lib/css/styles.css';\r\nimport 'react-awesome-query-builder/lib/css/compact_styles.css'; //optional, for more compact styles\r\nimport { validate } from '../../../../validation/validate.js';\r\n// Choose your skin (ant/material/vanilla):\r\nconst InitialConfig = BasicConfig; // or MaterialConfig or BasicConfig\r\n\r\nvar config = {\r\n  ...InitialConfig,\r\n  \r\n  fields: {\r\n  }\r\n};\r\n\r\n// You can load query value from your backend storage (for saving see `Query.onChange()`)\r\nconst queryValue = {\"id\": QbUtils.uuid(), \"type\": \"group\"};\r\nclass SAAddIndexChannel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = (\r\n            {\r\n                indexChannelDataFromDB:[],\r\n                verifiedIndexChannelFetched:[],\r\n                indexChannelNameElement: '',\r\n                channel: '',\r\n                workspace: '',\r\n                rule: '',\r\n                minify: 'false',\r\n                resErrMsg: '',\r\n                tree: QbUtils.checkTree(QbUtils.loadTree(queryValue), config),\r\n                config: config,\r\n                rule: '',\r\n                ruleFlag: false,\r\n                workspaceItems:[]\r\n            }\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        trackPromise(fetch('/mui/addIndexChannel')\r\n        .then(res => {\r\n            return res.json()\r\n        })\r\n        .then(indexChannelData => { \r\n            this.setState({ indexChannelData })\r\n        })\r\n        )\r\n        trackPromise(fetch('/mui/addIndexChannelData')\r\n        .then(res => {\r\n            return res.json()\r\n        })\r\n        .then(addIndexChannelData => { \r\n            this.setState({ addIndexChannelData })\r\n            if(this.state.indexChannelData){\r\n                this.setState({\r\n                    'workspaceName':this.state.indexChannelData.indexChannelDataToEdit.workspaceName\r\n                });\r\n                this.setState({\r\n                    workspaceType:this.state.indexChannelData.indexChannelDataToEdit.workspaceType\r\n                })\r\n            }\r\n            var fromState = this.state.addIndexChannelData;\r\n            var geoObj = '';\r\n            var marketObj = '';\r\n            var industryObj = '';\r\n            var sectorObj = '';\r\n            var countryObj = '';\r\n            const itemsGeo = []; \r\n            const itemsMarket = [];\r\n            const itemsCountry = [];\r\n            const itemsIndustry = [];\r\n            const itemsSector = [];\r\n            var ticketPriorityArr =  [\r\n                { value: '1', title: '1' },\r\n                { value: '2', title: '2' },\r\n                { value: '3', title: '3' },\r\n                { value: '4', title: '4' }\r\n            ];\r\n            var ticketImpactArr = [\r\n                { value: 'Critical', title: 'Critical' },\r\n                { value: 'High', title: 'High' },\r\n                { value: 'Major', title: 'Major' },\r\n                { value: 'Medium', title: 'Medium' },\r\n                { value: 'Low', title: 'Low' },\r\n            ]\r\n            if(this.state.addIndexChannelData){\r\n                geoObj= fromState.geoList;\r\n                marketObj = fromState.marketList;\r\n                industryObj = fromState.industryList;\r\n                sectorObj = fromState.sectorList;\r\n                countryObj = fromState.countryList;\r\n                for(var i=0; i < geoObj.length ; i++){\r\n                    var geoListObj = {}\r\n                    geoListObj[\"value\"] = geoObj[i].geo\r\n                    geoListObj['title'] = geoObj[i].geo\r\n                    itemsGeo.push(geoListObj);\r\n                }\r\n                 for(var i=0; i < countryObj.length ; i++){\r\n                    var countryListObj = {}\r\n                    countryListObj[\"value\"] = countryObj[i].desc\r\n                    countryListObj['title'] = countryObj[i].desc\r\n                    itemsCountry.push(countryListObj);\r\n                }\r\n                 for(var i=0; i < industryObj.length ; i++){\r\n                    var industryListObj = {}\r\n                    industryListObj[\"value\"] = industryObj[i].desc\r\n                    industryListObj['title'] = industryObj[i].desc\r\n                    itemsIndustry.push(industryListObj);\r\n                }\r\n                 for(var i=0; i < sectorObj.length ; i++){\r\n                    var sectorListObj = {}\r\n                    sectorListObj[\"value\"] = sectorObj[i].desc\r\n                    sectorListObj['title'] = sectorObj[i].desc\r\n                    itemsSector.push(sectorListObj);\r\n                }\r\n                for(var i=0; i < marketObj.length ; i++){\r\n                    var marketListObj = {}\r\n                    marketListObj[\"value\"] = marketObj[i]\r\n                    marketListObj['title'] = marketObj[i]\r\n                    itemsMarket.push(marketListObj);\r\n                }\r\n                const operators = {\r\n                    ...InitialConfig.operators,\r\n                    INCLUDE: {\r\n                      label: \"INCLUDE\",\r\n                      labelForFormat: \"INCLUDE\",\r\n                      valueSources: ['value'],\r\n                      sqlFormatOp: (field, _op, values, valueSrc) => {\r\n                        if (valueSrc === 'value') {\r\n                            var removeQuate = values.replace(/'/g, \"\");;\r\n                            var splitVal = removeQuate.split(',');\r\n                            var joinSplit;\r\n                            var splitValArray = [];\r\n                            for (var i = 0; i < splitVal.length; i ++){\r\n                                joinSplit = \"'\"+splitVal[i]+\"'\";\r\n                                splitValArray.push(joinSplit)\r\n                            }\r\n                            var joinValue = splitValArray.join(\",\")\r\n                          return `( ${field}.INCLUDE([${joinValue}]) )`;\r\n                        } else return undefined; // not supported\r\n                      },\r\n                      sqlOp: \"INCLUDE\",\r\n                      jsonLogic: (field, _op, val) => ({ in: [val, field] }),\r\n                      mongoFormatOp: (field, _op, value, useExpr) => {\r\n                        const $field =\r\n                          typeof field === \"string\" && !field.startsWith(\"$\")\r\n                            ? \"$\" + field\r\n                            : field;\r\n                        const mv = value.replace(/[.*+?^${}()|[\\]\\\\/]/g, \"\\\\$&\");\r\n                        const mop = \"$regex\";\r\n                        return !useExpr ? { [field]: { [mop]: mv } } : { [mop]: [$field, mv] };\r\n                      }\r\n                    },\r\n                    PRESENT: {\r\n                      label: \"PRESENT\",\r\n                      labelForFormat: \"PRESENT\",\r\n                      valueSources: ['value'],\r\n                      sqlFormatOp: (field, _op, values, valueSrc) => {\r\n                        if (valueSrc === 'value') {\r\n                            var removeQuate = values.replace(/'/g, \"\");;\r\n                            var splitVal = removeQuate.split(',');\r\n                            var joinSplit;\r\n                            var splitValArray = [];\r\n                            for (var i = 0; i < splitVal.length; i ++){\r\n                                joinSplit = \"'\"+splitVal[i]+\"'\";\r\n                                splitValArray.push(joinSplit)\r\n                            }\r\n                            var joinValue = splitValArray.join(\",\")\r\n                            return `( ${field}.PRESENT([${joinValue}]) )`;\r\n                        } else return undefined; // not supported\r\n                      },\r\n                      sqlOp: \"PRESENT\",\r\n                      jsonLogic: (field, _op, val) => ({ in: [val, field] }),\r\n                      mongoFormatOp: (field, _op, value, useExpr) => {\r\n                        const $field =\r\n                          typeof field === \"string\" && !field.startsWith(\"$\")\r\n                            ? \"$\" + field\r\n                            : field;\r\n                        const mv = value.replace(/[.*+?^${}()|[\\]\\\\/]/g, \"\\\\$&\");\r\n                        const mop = \"$regex\";\r\n                        return !useExpr ? { [field]: { [mop]: mv } } : { [mop]: [$field, mv] };\r\n                      }\r\n                    },\r\n                    equal: {\r\n                      label: \"equal\",\r\n                      labelForFormat: \"equal\",\r\n                      valueSources: ['value'],\r\n                      sqlFormatOp: (field, _op, values, valueSrc) => {\r\n                        if (valueSrc === 'value') {\r\n                          return `( '${field}' = ${values} )`;\r\n                        } else return undefined; // not supported\r\n                      },\r\n                      sqlOp: \"=\",\r\n                      jsonLogic: (field, _op, val) => ({ in: [val, field] }),\r\n                      mongoFormatOp: (field, _op, value, useExpr) => {\r\n                        const $field =\r\n                          typeof field === \"string\" && !field.startsWith(\"$\")\r\n                            ? \"$\" + field\r\n                            : field;\r\n                        const mv = value.replace(/[.*+?^${}()|[\\]\\\\/]/g, \"\\\\$&\");\r\n                        const mop = \"$regex\";\r\n                        return !useExpr ? { [field]: { [mop]: mv } } : { [mop]: [$field, mv] };\r\n                      }\r\n                    },\r\n                    notequal: {\r\n                        label: \"not equal\",\r\n                        labelForFormat: \"not equal\",\r\n                        valueSources: ['value'],\r\n                        sqlFormatOp: (field, _op, values, valueSrc) => {\r\n                          if (valueSrc === 'value') {\r\n                            return `( '${field}' != ${values} )`;\r\n                          } else return undefined; // not supported\r\n                        },\r\n                        sqlOp: \"!=\",\r\n                        jsonLogic: (field, _op, val) => ({ in: [val, field] }),\r\n                        mongoFormatOp: (field, _op, value, useExpr) => {\r\n                          const $field =\r\n                            typeof field === \"string\" && !field.startsWith(\"$\")\r\n                              ? \"$\" + field\r\n                              : field;\r\n                          const mv = value.replace(/[.*+?^${}()|[\\]\\\\/]/g, \"\\\\$&\");\r\n                          const mop = \"$regex\";\r\n                          return !useExpr ? { [field]: { [mop]: mv } } : { [mop]: [$field, mv] };\r\n                        }\r\n                      },\r\n                  };\r\n                  \r\n                  const widgets = {\r\n                    ...InitialConfig.widgets\r\n                  };\r\n                  \r\n                  const types = {\r\n                    ...InitialConfig.types,\r\n                    // examples of  overriding\r\n                    text: {\r\n                      ...InitialConfig.types.text,\r\n                      widgets: {\r\n                        ...InitialConfig.types.text.widgets,\r\n                        text: {\r\n                          ...InitialConfig.types.text.widgets.text,\r\n                          operators: [\r\n                            ...InitialConfig.types.text.widgets.text.operators,\r\n                            \"INCLUDE\",\r\n                            \"PRESENT\",\r\n                            \"equal\",\r\n                            \"notequal\"\r\n                          ]\r\n                        },\r\n                      }\r\n                    },\r\n                    select: {\r\n                      ...InitialConfig.types.select,\r\n                      widgets: {\r\n                        ...InitialConfig.types.select.widgets,\r\n                        select: {\r\n                          ...InitialConfig.types.select.widgets.select,\r\n                          operators: [\r\n                            ...InitialConfig.types.select.widgets.select.operators,\r\n                            \"equal\",\r\n                            \"notequal\"\r\n                          ]\r\n                        },\r\n                      }\r\n                    },\r\n\r\n                  };\r\n                  \r\n                  const settings = {\r\n                    ...InitialConfig.settings\r\n                  };\r\n                this.setState({config: {\r\n                    ...InitialConfig,\r\n                    operators,\r\n                    widgets,\r\n                    types,\r\n                    fields: {\r\n                    GEOGRAPHY:{\r\n                        label: 'GEOGRAPHY',\r\n                        type: 'select',\r\n                        excludeOperators: [\"select_equals\", \"select_not_equals\",'select_any_in', 'select_not_any_in',\"is_empty\",\"is_not_empty\",],\r\n                        valueSources: ['value'],\r\n                        fieldSettings: {\r\n                            listValues: itemsGeo,\r\n                        }\r\n                    },\r\n                    MARKET:{\r\n                        label: 'MARKET',\r\n                        type: 'select',\r\n                        excludeOperators: [\"notequal\",\"select_equals\", \"select_not_equals\",\"select_equals\", \"select_not_equals\",'select_any_in', 'select_not_any_in',\"is_empty\",\"is_not_empty\", \"select_not_equals\"],\r\n                        valueSources: ['value'],\r\n                        fieldSettings: {\r\n                            listValues: itemsMarket,\r\n                        }\r\n                    },\r\n                    SECTOR:{\r\n                        label: 'SECTOR',\r\n                        type: 'select',\r\n                        excludeOperators: [\"notequal\",\"select_equals\", \"select_not_equals\",\"select_equals\", \"select_not_equals\",'select_any_in', 'select_not_any_in',\"is_empty\",\"is_not_empty\",\"select_not_equals\"],\r\n                        valueSources: ['value'],\r\n                        fieldSettings: {\r\n                            listValues: itemsSector,\r\n                        }\r\n                    },\r\n                    INDUSTRY:{\r\n                        label: 'INDUSTRY',\r\n                        type: 'select',\r\n                        excludeOperators: [\"notequal\",\"select_equals\", \"select_not_equals\",\"select_equals\", \"select_not_equals\",'select_any_in', 'select_not_any_in',\"is_empty\",\"is_not_empty\",\"select_not_equals\"],\r\n                        valueSources: ['value'],\r\n                        fieldSettings: {\r\n                            listValues: itemsIndustry,\r\n                        }\r\n                    },\r\n                    COUNTRYNAME:{\r\n                        label: 'COUNTRY',\r\n                        type: 'select',\r\n                        excludeOperators: [\"notequal\",\"select_equals\", \"select_not_equals\",'select_any_in', 'select_not_any_in',\"is_empty\",\"is_not_empty\",\"select_not_equals\"],\r\n                        valueSources: ['value'],\r\n                        fieldSettings: {\r\n                            listValues: itemsCountry,\r\n                        }\r\n                    },\r\n                    TICKETPRIORITY:{\r\n                        label: 'TICKET PRIORITY',\r\n                        type: 'select',\r\n                        excludeOperators: [\"notequal\",\"select_equals\", \"select_not_equals\",\"select_equals\", \"select_not_equals\",'select_any_in', 'select_not_any_in',\"is_empty\",\"is_not_empty\",\"select_not_equals\"],\r\n                        valueSources: ['value'],\r\n                        fieldSettings: {\r\n                            listValues: ticketPriorityArr,\r\n                        }\r\n                    },\r\n                    TICKETIMPACT:{\r\n                        label: 'TICKET IMPACT',\r\n                        type: 'select',\r\n                        excludeOperators: [\"notequal\",\"select_equals\", \"select_not_equals\",\"select_equals\", \"select_not_equals\",'select_any_in', 'select_not_any_in',\"is_empty\",\"is_not_empty\",\"select_not_equals\"],\r\n                        valueSources: ['value'],\r\n                        fieldSettings: {\r\n                            listValues: ticketImpactArr,\r\n                        }\r\n                    },\r\n                    BlueID: {\r\n                        label: 'BlueID',\r\n                        type: 'text',\r\n                        valueSources: ['value'],\r\n                        excludeOperators: [\"notequal\",\"INCLUDE\",\"PRESENT\",\"not_equal\",\"is_empty\", \"is_not_empty\", \"like\", \"not_like\", \"starts_with\", \"ends_with\", \"proximity\"],\r\n                        // excludeOperators: [ 'not_equal'],\r\n                        defaultOperator: [\"equal\"],\r\n                    },\r\n                    CDIC: {\r\n                        label: 'APIOS Client ID',\r\n                        type: 'text',\r\n                        valueSources: ['value'],\r\n                        excludeOperators: [\"notequal\",\"INCLUDE\",\"PRESENT\",\"not_equal\",\"is_empty\", \"is_not_empty\", \"like\", \"not_like\", \"starts_with\", \"ends_with\", \"proximity\"],\r\n                        defaultOperator: [\"equal\"],\r\n                    },\r\n                    CDIR: {\r\n                        label: 'CDIR',\r\n                        type: 'text',\r\n                        excludeOperators: [\"notequal\",\"INCLUDE\",\"PRESENT\",\"not_equal\",\"is_empty\", \"is_not_empty\", \"like\", \"not_like\", \"starts_with\", \"ends_with\", \"proximity\"],\r\n                        valueSources: ['value'],\r\n                        // excludeOperators: [ 'not_equal'],\r\n                        defaultOperator: [\"equal\"],\r\n                    },\r\n                    TICKETASSIGNMENTGROUPS : {\r\n                        label: 'TICKET ASSIGNMENT GROUPS ',\r\n                        type: 'text',\r\n                        excludeOperators: [\"notequal\",\"not_equal\",\"equal\",\"is_empty\", \"is_not_empty\", \"like\", \"not_like\", \"starts_with\", \"ends_with\", \"proximity\"],\r\n                        preferWidgets: [\"text\"],\r\n                        valueSources: ['value'],\r\n                    },\r\n                }}})\r\n\r\n                var workspaceListObj = addIndexChannelData.addIndexChannelData;\r\n                let workspaceItems = workspaceListObj.map(value => {\r\n                    return value.name;\r\n                });\r\n                this.setState({workspaceItems:workspaceItems});\r\n            }\r\n        })\r\n        )\r\n    }\r\n    handleInputChange = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n    updateValue = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n    updateComboValue = (e) => {\r\n        this.setState({ 'workspaceName': e.selectedItem});\r\n    };\r\n    changeWorkSpace =(e) => {\r\n        const collabTool = e.target.value;\r\n        this.setState({workspaceType:collabTool});\r\n        const indexChannelData = this.state.addIndexChannelData.addIndexChannelData;\r\n        const filteredWorkSpace = indexChannelData.filter(data => {\r\n            if(collabTool.toLowerCase() === 'teams'){\r\n                return data.workspaceType && data.workspaceType.toLowerCase() === collabTool.toLowerCase();\r\n            }\r\n            else {\r\n                return data.workspaceType === undefined || data.workspaceType.toLowerCase() === collabTool.toLowerCase();\r\n            }\r\n        });\r\n        const workspaceItems = filteredWorkSpace.map(value => {\r\n            return value.name;\r\n        })\r\n        this.setState({workspaceItems:workspaceItems});\r\n        this.setState({workspaceName:\"\"});\r\n    }\r\n    // handleCheckbox1(name, event) {\r\n    //     this.setState({\r\n    //         [event.target.name]: event.target.checked,\r\n    //     });\r\n    // };\r\n    formSubmit= (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n        this.setState({resErrMsg: ''});\r\n        var editFlag = false;\r\n        var ruleToSave ;\r\n        if(this.state.indexChannelData?.indexChannelDataToEdit){\r\n            editFlag = true;\r\n        }else{\r\n            editFlag = false;\r\n        }\r\n        if(this.state.rule.length > 0){\r\n            ruleToSave = this.state.rule\r\n        }else if(this.state.rule.length == 0){\r\n            ruleToSave = ''\r\n        }else if(this.state.globalAssignmentData?.globalAssignmentDataToEdit?.rule){\r\n            if(this.state.rule.length > 0 ){\r\n                ruleToSave = this.state.rule\r\n            }else if(this.state.rule.length == 0){\r\n                ruleToSave = ''\r\n            }else{\r\n                ruleToSave = this.state.globalAssignmentData?.globalAssignmentDataToEdit?.rule\r\n            }\r\n        }\r\n        var channelTOEdit = '';\r\n        const indexChannelData = {\r\n            channelID: this.state.channel || this.state.indexChannelData?.indexChannelDataToEdit?.channel,\r\n            rule: ruleToSave,\r\n            workspace: this.state.workspaceName || this.state.indexChannelData?.indexChannelDataToEdit?.workspaceName,\r\n            minify: this.state.minify || this.state.indexChannelData?.indexChannelDataToEdit?.minify,\r\n            editFlag: editFlag,\r\n            ruleFlag: this.state.ruleFlag,\r\n            channelTOEdit: this.state.indexChannelData?.indexChannelDataToEdit?.channel,\r\n            workspaceType: this.state.workspaceType\r\n        }\r\n        // SpecialCharacter validation\r\n        var validateFields = validate(indexChannelData);\r\n        if(validateFields.length > 0){\r\n            var message = \"\";\r\n            for(var i =0; i<validateFields.length; i++){\r\n                var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n                if(element){\r\n                    message += element.title + \", \";\r\n                }else{\r\n                    message += validateFields[i] + ', '\r\n                }\r\n            }\r\n            this.setState({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n        }else{\r\n            trackPromise(\r\n                fetch('/mui/saveIndexChannel' , {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify(indexChannelData)\r\n            })\r\n            .then((result) => {\r\n                if (result.status === 404 || result.status === 400 || result.status === 500)  {\r\n                    result.json().then((object)=> {\r\n                        this.setState({resErrMsg: object.fetchErrorfromIndexChannel});\r\n                    })\r\n                } else if (result.status === 409) {\r\n                    result.json().then((object)=> {\r\n                        this.setState({resErrMsg: object.fetchErrorfromIndexChannel});\r\n                    })\r\n                } else if(result.status == 200){\r\n                    this.props.history.push(\"/mui/indexChannels\");\r\n                }\r\n           })\r\n            .catch(err => { \r\n              this.setState({errorMessage: err.message});\r\n            })\r\n            )\r\n        }\r\n          \r\n    }\r\n    renderBuilder = (props) => {\r\n        return (<div className=\"query-builder-container\" style={{padding: '10px'}}>\r\n            <div className=\"query-builder qb-lite\">\r\n                <Builder {...props} />\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderResult = ({tree: immutableTree, config}) => {\r\n        return (\r\n            <div className=\"query-builder-result\">\r\n                <div>Query string: <pre>{JSON.stringify(QbUtils.queryString(immutableTree, config))}</pre></div>\r\n                <div>MongoDb query: <pre>{JSON.stringify(QbUtils.mongodbFormat(immutableTree, config))}</pre></div>\r\n                <div>SQL where: <pre>{JSON.stringify(QbUtils.sqlFormat(immutableTree, config))}</pre></div>\r\n                <div>JsonLogic: <pre>{JSON.stringify(QbUtils.jsonLogicFormat(immutableTree, config))}</pre></div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    onChange = (immutableTree, config) => {\r\n        // Tip: for better performance you can apply `throttle` - see `examples/demo`\r\n        this.setState({tree: immutableTree, config: config});\r\n        const jsonTree = QbUtils.getTree(immutableTree);\r\n        var ruleToSave;\r\n        var queryString = JSON.stringify(QbUtils.queryString(immutableTree, config));\r\n        var mongodbFormat = JSON.stringify(QbUtils.mongodbFormat(immutableTree, config));\r\n        var sqlFormat = JSON.stringify(QbUtils.sqlFormat(immutableTree, config));\r\n        var JsonLogic = JSON.stringify(QbUtils.jsonLogicFormat(immutableTree, config));\r\n        this.setState({rule: sqlFormat})\r\n        this.setState({ruleFlag: true})\r\n        // `jsonTree` can be saved to backend, and later loaded to `queryValue`\r\n    }\r\n    render() {\r\n        var stateObj = this.state;\r\n        const itemsWorkspace = [];\r\n        var formOptionWorkspace = \"\";\r\n        var configVal ;\r\n        var rules = '';\r\n        var workspaceNameFromDB = '';\r\n        let workspaceItems = [];\r\n        if(this.state.config){\r\n            configVal = this.state.config\r\n        }else{\r\n            configVal = config;\r\n        }\r\n        if(this.state.rule){\r\n            rules = this.state.rule;\r\n        }else{\r\n            rules = ''\r\n        }\r\n        if(this.state.indexChannelData){\r\n            var workspaceNameFromDB = this.state.indexChannelData.indexChannelDataToEdit.workspaceName\r\n        }\r\n        \r\n        var channel = '';\r\n        var minify = '';\r\n        var rule = '';\r\n        var workspaceName = '';\r\n        let workspaceType = '';\r\n        \r\n        if(this.state.indexChannelData){\r\n            // EDIT FLOW------\r\n            var dataToEdit = this.state.indexChannelData.indexChannelDataToEdit;\r\n            channel = dataToEdit.channel;\r\n            minify = dataToEdit.minify;\r\n            if(this.state.rule){\r\n                rules = this.state.rule;\r\n            }else{\r\n                rules = dataToEdit.rule;\r\n            }\r\n            \r\n            workspaceName = dataToEdit.workspaceName;\r\n            if(dataToEdit.workspaceType) {\r\n                workspaceType = dataToEdit.workspaceType;\r\n            } else {\r\n                workspaceType = 'SLACK';\r\n            }\r\n        }else{\r\n            // CREATE FLOW-------\r\n            channel = '';\r\n            minify = '';\r\n            rules = rules;\r\n            workspaceName = '';\r\n        }\r\n        return (\r\n            <div className=\"divContainer\">\r\n                 <section className=\"sectionGrid\">\r\n                    <div class=\"bx--grid padding0\">\r\n                         <div class=\"rowWidth\">\r\n                             <div class=\"gridColulmnWidth3\">\r\n                                 <SALandingSidebar />\r\n                            </div>\r\n                            <div class=\"gridColumn13\" style={{maxWidth: '20% !important', paddingRight: '0 !important'}}>\r\n                                 <SAAddIndexChannelBreadCrump />\r\n                                 <div className=\"formDivSA formDivSALg\">\r\n                                     <Form  onSubmit={this.formSubmit}>\r\n                                     <Select className=\"labelFont\" id=\"collabTool\" \r\n                                        labelText={<> Collaboration tool <b className=\"fontRed\">*</b> </>}\r\n                                        defaultValue={workspaceType.toUpperCase()}\r\n                                            onChange={(e) => this.changeWorkSpace(e)} required>\r\n                                            <SelectItem hidden\r\n                                                  value=\"\"\r\n                                                  text=\"Choose an option\"\r\n                                                />\r\n                                            <SelectItem\r\n                                                selected={workspaceType.toLowerCase()==='slack'}\r\n                                                value=\"SLACK\"\r\n                                                text=\"SLACK\"\r\n                                            />\r\n                                            <SelectItem\r\n                                                selected={workspaceType.toLowerCase()==='teams'}\r\n                                                value=\"TEAMS\"\r\n                                                text=\"TEAMS\"\r\n                                            />\r\n                                        </Select>\r\n                                        <TextInput className=\"bx--text-input bx--text__input\" id=\"channel\" name=\"channel\" labelText={ <> Channel ID <b className=\"fontRed\">*</b> </> }  placeholder=\"Channel ID\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={channel} required />\r\n                                        <ComboBox className=\"labelFont\" name=\"workspaceName\" id=\"workspaceName\"\r\n                                            titleText={ <> Select Workspace Name <b className=\"fontRed\">*</b> </> }\r\n                                            onChange={(e) => this.updateComboValue(e)}\r\n                                            items={this.state.workspaceItems} \r\n                                            // itemToString={(item) => (item ? item.text : '')}\r\n                                            placeholder=\"Select an option or type to filter\"\r\n                                            selectedItem={this.state.workspaceName}\r\n                                            shouldFilterItem={({item, inputValue}) =>\r\n                                                item && inputValue? item.toLowerCase().includes(inputValue.toLowerCase()):true\r\n                                            }\r\n                                            type=\"default\"\r\n                                            required\r\n                                            />\r\n                                        <Select className=\"labelFont\" id=\"minify\" name=\"minify\" labelText=\"Minify\" defaultValue=\"\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} >\r\n                                            <SelectItem\r\n                                                selected={minify == false}\r\n                                                value=\"false\"\r\n                                                text=\"false\"\r\n                                            />\r\n                                            <SelectItem\r\n                                                selected={minify == true}\r\n                                                value=\"true\"\r\n                                                text=\"true\"\r\n                                            />\r\n                                        </Select>\r\n                                        <div>\r\n                                            <Query\r\n                                                {...configVal}\r\n                                                value={this.state.tree}\r\n                                                onChange={this.onChange}\r\n                                                renderBuilder={this.renderBuilder}\r\n                                            />\r\n                                        </div>\r\n                                        <TextInput className=\"bx--text-input bx--text__input\" id=\"rule\" name=\"rule\" labelText= \"Rule\"  placeholder=\"Rule\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={rules} />\r\n                                        <br></br>\r\n                                        {\r\n                                            this.state['specialCharacterErr'] &&\r\n                                            <small className=\"fontRed\">\r\n                                                <b className=\"errorMsg specialCharErr\">{this.state['specialCharacterErr']}</b>\r\n                                            </small>\r\n                                        }\r\n                                        <br></br>\r\n                                        <Button kind=\"primary\" type=\"submit\" className=\"btnGeneral addWorkspace\" >Submit</Button>\r\n                                        {\r\n                                            this.state['resErrMsg'] && \r\n                                            <small className=\"fontRed\">\r\n                                            <b className=\"blgrperrorMsg\">{this.state.resErrMsg.validateChannelMsgNew}</b>\r\n                                            </small>\r\n                                        }\r\n                                    </Form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n\r\n            </div>\r\n           \r\n        )\r\n      \r\n    }\r\n}\r\nexport default withRouter(SAAddIndexChannel);\r\n\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\GlobalAssignment\\AddGlobalAssignments\\AddGlobalAssignments.jsx",["850","851","852","853","854","855","856","857","858","859","860","861","862","863","864","865","866","867","868","869","870","871","872","873"],"import React, {Component} from 'react';\r\nimport merge from \"lodash/merge\";\r\nimport {Query, Builder, BasicConfig,Widgets,Settings,\r\n    Utils as QbUtils} from 'react-awesome-query-builder';\r\n// import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport {  Button, Form, TextInput, Select, SelectItem  } from 'carbon-components-react';\r\nimport AddGlobalAssignmentsBreadcrump from './AddGlobalAssignmentsBreadcrump';\r\nimport SALandingSidebar from '../../SALandingSidebar';\r\nimport { withRouter } from 'react-router-dom';\r\nimport \"react-awesome-query-builder/css/antd.less\";\r\n// For Material-UI widgets only:\r\nimport MaterialConfig from 'react-awesome-query-builder/lib/config/material';\r\n\r\nimport 'react-awesome-query-builder/lib/css/styles.css';\r\nimport 'react-awesome-query-builder/lib/css/compact_styles.css'; //optional, for more compact styles\r\nimport { validate } from '../../../../validation/validate.js';\r\n// Choose your skin (ant/material/vanilla):\r\nconst InitialConfig = BasicConfig; // or MaterialConfig or BasicConfig\r\n\r\nvar config = {\r\n  ...InitialConfig,\r\n  \r\n  fields: {\r\n  }\r\n};\r\n\r\n// You can load query value from your backend storage (for saving see `Query.onChange()`)\r\nconst queryValue = {\"id\": QbUtils.uuid(), \"type\": \"group\"};\r\nclass SAAddGlobalAssignments extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = (\r\n            {\r\n                globalAssignmentFromDB:[],\r\n                verifiedglobalAssignmentFetched:[],\r\n                globalAssignmentNameElement: '',\r\n                name: '',\r\n                group: '',\r\n                rule: '',\r\n                resErrMsg: '',\r\n                tree: QbUtils.checkTree(QbUtils.loadTree(queryValue), config),\r\n                config: config,\r\n                ruleFlag: false\r\n            }\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        trackPromise(fetch('/mui/addGlobalAssignments')\r\n        .then(res => {\r\n            return res.json()\r\n        })\r\n        .then(globalAssignmentData => { \r\n            this.setState({ globalAssignmentData })\r\n        })\r\n        )\r\n        trackPromise(fetch('/mui/addglobalAssignmentData')\r\n        .then(res => {\r\n            return res.json()\r\n        })\r\n        .then(addglobalAssignmentData => { \r\n            this.setState({ addglobalAssignmentData })\r\n            var fromState = this.state.addglobalAssignmentData;\r\n            var geoObj = '';\r\n            var marketObj = '';\r\n            var industryObj = '';\r\n            var sectorObj = '';\r\n            var countryObj = '';\r\n            const itemsGeo = []; \r\n            const itemsMarket = [];\r\n            const itemsCountry = [];\r\n            const itemsIndustry = [];\r\n            const itemsSector = [];\r\n            var ticketPriorityArr =  [\r\n                { value: '1', title: '1' },\r\n                { value: '2', title: '2' },\r\n                { value: '3', title: '3' },\r\n                { value: '4', title: '4' }\r\n            ];\r\n            var ticketImpactArr = [\r\n                { value: 'Critical', title: 'Critical' },\r\n                { value: 'High', title: 'High' },\r\n                { value: 'Major', title: 'Major' },\r\n                { value: 'Medium', title: 'Medium' },\r\n                { value: 'Low', title: 'Low' },\r\n            ]\r\n            if(this.state.addglobalAssignmentData){\r\n                geoObj= fromState.geoList;\r\n                marketObj = fromState.marketList;\r\n                industryObj = fromState.industryList;\r\n                sectorObj = fromState.sectorList;\r\n                countryObj = fromState.countryList;\r\n                for(var i=0; i < geoObj.length ; i++){\r\n                    var geoListObj = {}\r\n                    geoListObj[\"value\"] = geoObj[i].geo\r\n                    geoListObj['title'] = geoObj[i].geo\r\n                    itemsGeo.push(geoListObj);\r\n                }\r\n                 for(var i=0; i < countryObj.length ; i++){\r\n                    var countryListObj = {}\r\n                    countryListObj[\"value\"] = countryObj[i].desc\r\n                    countryListObj['title'] = countryObj[i].desc\r\n                    itemsCountry.push(countryListObj);\r\n                }\r\n                 for(var i=0; i < industryObj.length ; i++){\r\n                    var industryListObj = {}\r\n                    industryListObj[\"value\"] = industryObj[i].desc\r\n                    industryListObj['title'] = industryObj[i].desc\r\n                    itemsIndustry.push(industryListObj);\r\n                }\r\n                 for(var i=0; i < sectorObj.length ; i++){\r\n                    var sectorListObj = {}\r\n                    sectorListObj[\"value\"] = sectorObj[i].desc\r\n                    sectorListObj['title'] = sectorObj[i].desc\r\n                    itemsSector.push(sectorListObj);\r\n                }\r\n                for(var i=0; i < marketObj.length ; i++){\r\n                    var marketListObj = {}\r\n                    marketListObj[\"value\"] = marketObj[i]\r\n                    marketListObj['title'] = marketObj[i]\r\n                    itemsMarket.push(marketListObj);\r\n                }\r\n                const operators = {\r\n                    ...InitialConfig.operators,\r\n                    INCLUDE: {\r\n                      label: \"INCLUDE\",\r\n                      labelForFormat: \"INCLUDE\",\r\n                      valueSources: ['value'],\r\n                      sqlFormatOp: (field, _op, values, valueSrc) => {\r\n                        if (valueSrc === 'value') {\r\n                            var removeQuate = values.replace(/'/g, \"\");;\r\n                            var splitVal = removeQuate.split(',');\r\n                            var joinSplit;\r\n                            var splitValArray = [];\r\n                            for (var i = 0; i < splitVal.length; i ++){\r\n                                joinSplit = \"'\"+splitVal[i]+\"'\";\r\n                                splitValArray.push(joinSplit)\r\n                            }\r\n                            var joinValue = splitValArray.join(\",\")\r\n                          return `( ${field}.INCLUDE([${joinValue}]) )`;\r\n                        } else return undefined; // not supported\r\n                      },\r\n                      sqlOp: \"INCLUDE\",\r\n                      jsonLogic: (field, _op, val) => ({ in: [val, field] }),\r\n                      mongoFormatOp: (field, _op, value, useExpr) => {\r\n                        const $field =\r\n                          typeof field === \"string\" && !field.startsWith(\"$\")\r\n                            ? \"$\" + field\r\n                            : field;\r\n                        const mv = value.replace(/[.*+?^${}()|[\\]\\\\/]/g, \"\\\\$&\");\r\n                        const mop = \"$regex\";\r\n                        return !useExpr ? { [field]: { [mop]: mv } } : { [mop]: [$field, mv] };\r\n                      }\r\n                    },\r\n                    PRESENT: {\r\n                      label: \"PRESENT\",\r\n                      labelForFormat: \"PRESENT\",\r\n                      valueSources: ['value'],\r\n                      sqlFormatOp: (field, _op, values, valueSrc) => {\r\n                        if (valueSrc === 'value') {\r\n                            var removeQuate = values.replace(/'/g, \"\");;\r\n                            var splitVal = removeQuate.split(',');\r\n                            var joinSplit;\r\n                            var splitValArray = [];\r\n                            for (var i = 0; i < splitVal.length; i ++){\r\n                                joinSplit = \"'\"+splitVal[i]+\"'\";\r\n                                splitValArray.push(joinSplit)\r\n                            }\r\n                            var joinValue = splitValArray.join(\",\")\r\n                            return `( ${field}.PRESENT([${joinValue}]) )`;\r\n                        } else return undefined; // not supported\r\n                      },\r\n                      sqlOp: \"PRESENT\",\r\n                      jsonLogic: (field, _op, val) => ({ in: [val, field] }),\r\n                      mongoFormatOp: (field, _op, value, useExpr) => {\r\n                        const $field =\r\n                          typeof field === \"string\" && !field.startsWith(\"$\")\r\n                            ? \"$\" + field\r\n                            : field;\r\n                        const mv = value.replace(/[.*+?^${}()|[\\]\\\\/]/g, \"\\\\$&\");\r\n                        const mop = \"$regex\";\r\n                        return !useExpr ? { [field]: { [mop]: mv } } : { [mop]: [$field, mv] };\r\n                      }\r\n                    },\r\n                    equal: {\r\n                      label: \"equal\",\r\n                      labelForFormat: \"equal\",\r\n                      valueSources: ['value'],\r\n                      sqlFormatOp: (field, _op, values, valueSrc) => {\r\n                        if (valueSrc === 'value') {\r\n                          return `( '${field}' = ${values} )`;\r\n                        } else return undefined; // not supported\r\n                      },\r\n                      sqlOp: \"=\",\r\n                      jsonLogic: (field, _op, val) => ({ in: [val, field] }),\r\n                      mongoFormatOp: (field, _op, value, useExpr) => {\r\n                        const $field =\r\n                          typeof field === \"string\" && !field.startsWith(\"$\")\r\n                            ? \"$\" + field\r\n                            : field;\r\n                        const mv = value.replace(/[.*+?^${}()|[\\]\\\\/]/g, \"\\\\$&\");\r\n                        const mop = \"$regex\";\r\n                        return !useExpr ? { [field]: { [mop]: mv } } : { [mop]: [$field, mv] };\r\n                      }\r\n                    },\r\n                    notequal: {\r\n                        label: \"not equal\",\r\n                        labelForFormat: \"not equal\",\r\n                        valueSources: ['value'],\r\n                        sqlFormatOp: (field, _op, values, valueSrc) => {\r\n                          if (valueSrc === 'value') {\r\n                            return `( '${field}' != ${values} )`;\r\n                          } else return undefined; // not supported\r\n                        },\r\n                        sqlOp: \"!=\",\r\n                        jsonLogic: (field, _op, val) => ({ in: [val, field] }),\r\n                        mongoFormatOp: (field, _op, value, useExpr) => {\r\n                          const $field =\r\n                            typeof field === \"string\" && !field.startsWith(\"$\")\r\n                              ? \"$\" + field\r\n                              : field;\r\n                          const mv = value.replace(/[.*+?^${}()|[\\]\\\\/]/g, \"\\\\$&\");\r\n                          const mop = \"$regex\";\r\n                          return !useExpr ? { [field]: { [mop]: mv } } : { [mop]: [$field, mv] };\r\n                        }\r\n                      },\r\n                  };\r\n                  \r\n                  const widgets = {\r\n                    ...InitialConfig.widgets\r\n                  };\r\n                  \r\n                  const types = {\r\n                    ...InitialConfig.types,\r\n                    // examples of  overriding\r\n                    text: {\r\n                      ...InitialConfig.types.text,\r\n                      widgets: {\r\n                        ...InitialConfig.types.text.widgets,\r\n                        text: {\r\n                          ...InitialConfig.types.text.widgets.text,\r\n                          operators: [\r\n                            ...InitialConfig.types.text.widgets.text.operators,\r\n                            \"INCLUDE\",\r\n                            \"PRESENT\",\r\n                            \"equal\",\r\n                            \"notequal\"\r\n                          ]\r\n                        },\r\n                      }\r\n                    },\r\n                    select: {\r\n                      ...InitialConfig.types.select,\r\n                      widgets: {\r\n                        ...InitialConfig.types.select.widgets,\r\n                        select: {\r\n                          ...InitialConfig.types.select.widgets.select,\r\n                          operators: [\r\n                            ...InitialConfig.types.select.widgets.select.operators,\r\n                            \"equal\",\r\n                            \"notequal\"\r\n                          ]\r\n                        },\r\n                      }\r\n                    },\r\n\r\n                  };\r\n                  \r\n                  const settings = {\r\n                    ...InitialConfig.settings\r\n                  };\r\n                this.setState({config: {\r\n                    ...InitialConfig,\r\n                    operators,\r\n                    widgets,\r\n                    types,\r\n                    fields: {\r\n                        GEOGRAPHY:{\r\n                        label: 'GEOGRAPHY',\r\n                        type: 'select',\r\n                        excludeOperators: [\"select_equals\", \"select_not_equals\",'select_any_in', 'select_not_any_in',\"is_empty\",\"is_not_empty\",],\r\n                        valueSources: ['value'],\r\n                        fieldSettings: {\r\n                            listValues: itemsGeo,\r\n                        }\r\n                    },\r\n                    MARKET:{\r\n                        label: 'MARKET',\r\n                        type: 'select',\r\n                        excludeOperators: [\"notequal\",\"select_equals\", \"select_not_equals\",\"select_equals\", \"select_not_equals\",'select_any_in', 'select_not_any_in',\"is_empty\",\"is_not_empty\", \"select_not_equals\"],\r\n                        valueSources: ['value'],\r\n                        fieldSettings: {\r\n                            listValues: itemsMarket,\r\n                        }\r\n                    },\r\n                    SECTOR:{\r\n                        label: 'SECTOR',\r\n                        type: 'select',\r\n                        excludeOperators: [\"notequal\",\"select_equals\", \"select_not_equals\",\"select_equals\", \"select_not_equals\",'select_any_in', 'select_not_any_in',\"is_empty\",\"is_not_empty\",\"select_not_equals\"],\r\n                        valueSources: ['value'],\r\n                        fieldSettings: {\r\n                            listValues: itemsSector,\r\n                        }\r\n                    },\r\n                    INDUSTRY:{\r\n                        label: 'INDUSTRY',\r\n                        type: 'select',\r\n                        excludeOperators: [\"notequal\",\"select_equals\", \"select_not_equals\",\"select_equals\", \"select_not_equals\",'select_any_in', 'select_not_any_in',\"is_empty\",\"is_not_empty\",\"select_not_equals\"],\r\n                        valueSources: ['value'],\r\n                        fieldSettings: {\r\n                            listValues: itemsIndustry,\r\n                        }\r\n                    },\r\n                    COUNTRYNAME:{\r\n                        label: 'COUNTRY',\r\n                        type: 'select',\r\n                        excludeOperators: [\"notequal\",\"select_equals\", \"select_not_equals\",'select_any_in', 'select_not_any_in',\"is_empty\",\"is_not_empty\",\"select_not_equals\"],\r\n                        valueSources: ['value'],\r\n                        fieldSettings: {\r\n                            listValues: itemsCountry,\r\n                        }\r\n                    },\r\n                    TICKETPRIORITY:{\r\n                        label: 'TICKET PRIORITY',\r\n                        type: 'select',\r\n                        excludeOperators: [\"notequal\",\"select_equals\", \"select_not_equals\",\"select_equals\", \"select_not_equals\",'select_any_in', 'select_not_any_in',\"is_empty\",\"is_not_empty\",\"select_not_equals\"],\r\n                        valueSources: ['value'],\r\n                        fieldSettings: {\r\n                            listValues: ticketPriorityArr,\r\n                        }\r\n                    },\r\n                    TICKETIMPACT:{\r\n                        label: 'TICKET IMPACT',\r\n                        type: 'select',\r\n                        excludeOperators: [\"notequal\",\"select_equals\", \"select_not_equals\",\"select_equals\", \"select_not_equals\",'select_any_in', 'select_not_any_in',\"is_empty\",\"is_not_empty\",\"select_not_equals\"],\r\n                        valueSources: ['value'],\r\n                        fieldSettings: {\r\n                            listValues: ticketImpactArr,\r\n                        }\r\n                    },\r\n                    BlueID: {\r\n                        label: 'BlueID',\r\n                        type: 'text',\r\n                        valueSources: ['value'],\r\n                        excludeOperators: [\"notequal\",\"INCLUDE\",\"PRESENT\",\"not_equal\",\"is_empty\", \"is_not_empty\", \"like\", \"not_like\", \"starts_with\", \"ends_with\", \"proximity\"],\r\n                        // excludeOperators: [ 'not_equal'],\r\n                        defaultOperator: [\"equal\"],\r\n                    },\r\n                    CDIC: {\r\n                        label: 'APIOS Client ID',\r\n                        type: 'text',\r\n                        valueSources: ['value'],\r\n                        excludeOperators: [\"notequal\",\"INCLUDE\",\"PRESENT\",\"not_equal\",\"is_empty\", \"is_not_empty\", \"like\", \"not_like\", \"starts_with\", \"ends_with\", \"proximity\"],\r\n                        defaultOperator: [\"equal\"],\r\n                    },\r\n                    CDIR: {\r\n                        label: 'CDIR',\r\n                        type: 'text',\r\n                        excludeOperators: [\"notequal\",\"INCLUDE\",\"PRESENT\",\"not_equal\",\"is_empty\", \"is_not_empty\", \"like\", \"not_like\", \"starts_with\", \"ends_with\", \"proximity\"],\r\n                        valueSources: ['value'],\r\n                        // excludeOperators: [ 'not_equal'],\r\n                        defaultOperator: [\"equal\"],\r\n                    },\r\n                    TICKETASSIGNMENTGROUPS : {\r\n                        label: 'TICKET ASSIGNMENT GROUPS ',\r\n                        type: 'text',\r\n                        excludeOperators: [\"notequal\",\"not_equal\",\"equal\",\"is_empty\", \"is_not_empty\", \"like\", \"not_like\", \"starts_with\", \"ends_with\", \"proximity\"],\r\n                        preferWidgets: [\"text\"],\r\n                        valueSources: ['value'],\r\n                    },\r\n                }}})\r\n            }\r\n        })\r\n        )\r\n    }\r\n    handleInputChange = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n    updateValue = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n    handleruleChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n    formSubmit= (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n        this.setState({resErrMsg: ''});\r\n        var editFlag = false;\r\n        var ruleToSave ;\r\n        if(this.state.globalAssignmentData?.globalAssignmentDataToEdit){\r\n            editFlag = true;\r\n        }else{\r\n            editFlag = false;\r\n        }\r\n        if(this.state.rule.length > 0){\r\n            ruleToSave = this.state.rule\r\n        }else if(this.state.rule.length == 0){\r\n            ruleToSave = ''\r\n        }else if(this.state.globalAssignmentData?.globalAssignmentDataToEdit?.rule){\r\n            if(this.state.rule.length > 0 ){\r\n                ruleToSave = this.state.rule\r\n            }else if(this.state.rule.length == 0){\r\n                ruleToSave = ''\r\n            }else{\r\n                ruleToSave = this.state.globalAssignmentData?.globalAssignmentDataToEdit?.rule\r\n            }\r\n        }\r\n        var channelTOEdit = '';\r\n        const globalAssignmentData = {\r\n            name: this.state.name || this.state?.globalAssignmentData?.globalAssignmentDataToEdit?.name,\r\n            rule: ruleToSave,\r\n            group: this.state.group || this.state?.globalAssignmentData?.globalAssignmentDataToEdit?.groups,\r\n            editFlag: editFlag,\r\n            ruleFlag: this.state.ruleFlag,\r\n        }\r\n         // SpecialCharacter validation\r\n        var validateFields = validate(globalAssignmentData);\r\n        if(validateFields.length > 0){\r\n            var message = \"\";\r\n            for(var i =0; i<validateFields.length; i++){\r\n                var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n                if(element){\r\n                    message += element.title + \", \";\r\n                }else{\r\n                    message += validateFields[i] + ', '\r\n                }\r\n            }\r\n            this.setState({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n        }else{\r\n\r\n            trackPromise(\r\n                fetch('/mui/saveGlobalAssignment' , {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify(globalAssignmentData)\r\n            })\r\n            .then((result) => {\r\n                if (result.status === 404 || result.status === 400 || result.status === 500)  {\r\n                    result.json().then((object)=> {\r\n                        this.setState({resErrMsg: object.fetchErrorfromGlobalAssignment});\r\n                    })\r\n                } else if (result.status === 409) {\r\n                    result.json().then((object)=> {\r\n                        this.setState({resErrMsg: object.fetchErrorfromGlobalAssignment});\r\n                    })\r\n                } else if(result.status == 200){\r\n                    this.props.history.push(\"/mui/globalAssignments\");\r\n                }\r\n           })\r\n            .catch(err => { \r\n              this.setState({errorMessage: err.message});\r\n            })\r\n            )\r\n        }\r\n          \r\n    }\r\n    renderBuilder = (props) => {\r\n        return (<div className=\"query-builder-container\" style={{padding: '10px'}}>\r\n            <div className=\"query-builder qb-lite\">\r\n                <Builder {...props} />\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderResult = ({tree: immutableTree, config}) => {\r\n        return (\r\n            <div className=\"query-builder-result\">\r\n                <div>Query string: <pre>{JSON.stringify(QbUtils.queryString(immutableTree, config))}</pre></div>\r\n                <div>MongoDb query: <pre>{JSON.stringify(QbUtils.mongodbFormat(immutableTree, config))}</pre></div>\r\n                <div>SQL where: <pre>{JSON.stringify(QbUtils.sqlFormat(immutableTree, config))}</pre></div>\r\n                <div>JsonLogic: <pre>{JSON.stringify(QbUtils.jsonLogicFormat(immutableTree, config))}</pre></div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    onChange = (immutableTree, config) => {\r\n        // Tip: for better performance you can apply `throttle` - see `examples/demo`\r\n        this.setState({tree: immutableTree, config: config});\r\n        const jsonTree = QbUtils.getTree(immutableTree);\r\n        var ruleToSave;\r\n        var queryString = JSON.stringify(QbUtils.queryString(immutableTree, config));\r\n        var mongodbFormat = JSON.stringify(QbUtils.mongodbFormat(immutableTree, config));\r\n        var sqlFormat = JSON.stringify(QbUtils.sqlFormat(immutableTree, config));\r\n        var JsonLogic = JSON.stringify(QbUtils.jsonLogicFormat(immutableTree, config));\r\n        this.setState({rule: sqlFormat})\r\n        this.setState({ruleFlag: true})\r\n        // `jsonTree` can be saved to backend, and later loaded to `queryValue`\r\n    }\r\n    render() {\r\n        var stateObj = this.state;\r\n        var configVal ;\r\n        var rules = '';\r\n        if(this.state.config){\r\n            configVal = this.state.config\r\n        }else{\r\n            configVal = config;\r\n        }\r\n        if(this.state.rule){\r\n            rules = this.state.rule;\r\n        }else{\r\n            rules = ''\r\n        }\r\n        var name = '';\r\n        var group = '';\r\n        var rule = '';\r\n        if(this.state.globalAssignmentData){\r\n            // EDIT FLOW------\r\n            var dataToEdit = this.state?.globalAssignmentData?.globalAssignmentDataToEdit;\r\n            name = dataToEdit.name;\r\n            group = dataToEdit.groups;\r\n            if(this.state.rule){\r\n                rules = this.state.rule;\r\n            }else{\r\n                rules = dataToEdit.rule;\r\n            }\r\n            \r\n        }else{\r\n            // CREATE FLOW-------\r\n            name = '';\r\n            group = '';\r\n            rules = rules;\r\n        }\r\n        return (\r\n            <div className=\"divContainer\">\r\n                 <section className=\"sectionGrid\">\r\n                    <div class=\"bx--grid padding0\">\r\n                         <div class=\"rowWidth\">\r\n                             <div class=\"gridColulmnWidth3\">\r\n                                 <SALandingSidebar />\r\n                            </div>\r\n                            <div class=\"gridColumn13\" style={{maxWidth: '20% !important', paddingRight: '0 !important'}}>\r\n                                 <AddGlobalAssignmentsBreadcrump />\r\n                                 <div className=\"formDivSA formDivSALg\">\r\n                                     <Form  onSubmit={this.formSubmit}>\r\n                                        <TextInput className=\"bx--text-input bx--text__input\" id=\"name\" name=\"name\" labelText={ <> Name <b className=\"fontRed\">*</b> </> }  placeholder=\"Name\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={name} required />\r\n                                        <TextInput className=\"bx--text-input bx--text__input\" id=\"group\" name=\"group\" labelText={ <> Group Name <b className=\"fontRed\">*</b> </> }  placeholder=\"Group Name\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={group} required />\r\n                                        <div>\r\n                                            <Query\r\n                                                {...configVal}\r\n                                                value={this.state.tree}\r\n                                                onChange={this.onChange}\r\n                                                renderBuilder={this.renderBuilder}\r\n                                            />\r\n                                        </div>\r\n                                        <TextInput className=\"bx--text-input bx--text__input\" id=\"rule\" name=\"rule\" labelText= \"Rule\"  placeholder=\"Rule\" onBlur={(e) => this.handleInputChange(e)} onKeyUp={(e) => this.handleruleChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={rules} />\r\n                                        <br></br>\r\n                                        {\r\n                                            this.state['specialCharacterErr'] &&\r\n                                            <small className=\"fontRed\">\r\n                                                <b className=\"errorMsg specialCharErr\">{this.state['specialCharacterErr']}</b>\r\n                                            </small>\r\n                                        }\r\n                                        <br></br>\r\n                                        <Button kind=\"primary\" type=\"submit\" className=\"btnGeneral addWorkspace\" >Submit</Button>\r\n                                        {\r\n                                            this.state['resErrMsg'] && \r\n                                            <small className=\"fontRed\">\r\n                                            <b className=\"blgrperrorMsg\">{this.state.resErrMsg.validateGAMsgNew}</b>\r\n                                            </small>\r\n                                        }\r\n                                    </Form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n\r\n            </div>\r\n           \r\n        )\r\n      \r\n    }\r\n}\r\nexport default withRouter(SAAddGlobalAssignments);\r\n\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Features\\SAFeatures\\SAFeatureMain.jsx",["874","875","876","877","878","879","880","881","882","883"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SALandingSidebar from '../../SALandingSidebar';\r\nimport SAFeatureBreadCrump from './SAFeatureBreadcrump';\r\nimport SAFeaturesList from './SAFeatureList';\r\n// import SAWorkspace from './SAWorkspace/Workspace';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\n// import { Link, Route } from 'react-router-dom';\r\nimport { BrowserRouter, Switch, Route , Link} from 'react-router-dom';\r\nclass SAFeatureMain extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"divContainer\">\r\n            <section className=\"sectionGrid\">\r\n                <div class=\"bx--grid padding0\">\r\n                    <div class=\"rowWidth\">\r\n                        <div class=\"gridColulmnWidth3\">\r\n                            <SALandingSidebar />\r\n                        </div>\r\n                        <div class=\"gridColumn13\" style={{maxWidth: '20% !important', paddingRight: '0 !important'}}>\r\n                            <SAFeatureBreadCrump />\r\n                            <SAFeaturesList />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n\r\n        </div>\r\n    );\r\n    }\r\n  }\r\n  export default SAFeatureMain; ","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Features\\PAFeatures\\PAFeatureMain.jsx",[],"C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\AnsibleInstance\\SAAnsibleInstances\\SAAnsibleInstancesMain.jsx",["884","885","886","887","888","889","890","891","892","893"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SALandingSidebar from '../../SALandingSidebar';\r\nimport SAAnsibleInstancesBreadcrump from './SAAnsibleInstancesBreadcrump';\r\nimport SAAnsibleInstancesList from './SAAnsibleInstancesList';\r\n// import SAWorkspace from './SAWorkspace/Workspace';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\n// import { Link, Route } from 'react-router-dom';\r\nimport { BrowserRouter, Switch, Route , Link} from 'react-router-dom';\r\nclass SAAnsibleInstances extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"divContainer\">\r\n            <section className=\"sectionGrid\">\r\n                <div class=\"bx--grid padding0\">\r\n                    <div class=\"rowWidth\">\r\n                        <div class=\"gridColulmnWidth3\">\r\n                            <SALandingSidebar />\r\n                        </div>\r\n                        <div class=\"gridColumn13\" style={{maxWidth: '20% !important', paddingRight: '0 !important'}}>\r\n                            <SAAnsibleInstancesBreadcrump />\r\n                            <SAAnsibleInstancesList />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n\r\n        </div>\r\n    );\r\n    }\r\n  }\r\n  export default SAAnsibleInstances; ","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Features\\AddFeature\\AddFeature.jsx",["894","895","896","897","898","899","900","901","902","903","904","905","906","907","908"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport {  Button, Form, TextInput, Select, SelectItem, TextArea ,Dropdown, FormGroup,Grid, Row, Checkbox,Column } from 'carbon-components-react';\r\nimport SAAddFeatureBreadCrump from './AddFeatureBreadcrump';\r\nimport SALandingSidebar from '../../SALandingSidebar';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { validate } from '../../../../validation/validate.js';\r\nclass SAAddFeature extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = (\r\n            {\r\n                featureDataFromDB:[],\r\n                verifiedfeatureFetched:[],\r\n                featureNameElement: '',\r\n                name: '',\r\n                publish: false,\r\n                publishType:'',\r\n                publishToSpecificAcount: [],\r\n                category: '',\r\n                description: '',\r\n                resErrMsg: '',\r\n                publishToAcount: false,\r\n                publishDisable: false,\r\n            }\r\n        );\r\n        // this.saveWorkspace = this.saveWorkspace.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        trackPromise(fetch('/mui/addFeature')\r\n            .then(res => {\r\n                return res.json()\r\n            })\r\n            .then(featureData => { \r\n                this.setState({ featureData })\r\n            })\r\n        )\r\n        trackPromise(\r\n            fetch(\"/mui/fetchfeatureData\")\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((featureData) => {\r\n                this.setState({ featureData });\r\n            })\r\n        );\r\n    }\r\n    handleInputChange = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n    updateValue = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n\r\n    handlePublishChange = e => {\r\n\r\n        const {name, value } = e.target;\r\n        let publishToSpecificAcount = false;\r\n        if(value === 'publishToSpecificAcount'){\r\n            publishToSpecificAcount = true;\r\n        }\r\n        this.setState({\r\n          [name] : value,\r\n          publish: !publishToSpecificAcount,\r\n          publishToAcount: publishToSpecificAcount\r\n        });\r\n      };\r\n    \r\n    handleAccounts = () => (e) => {\r\n        const {publishToSpecificAcount} = this.state;\r\n        let checkedAccounts = [];\r\n        checkedAccounts = [...publishToSpecificAcount]\r\n\r\n        const {value, checked} = e.target;\r\n        if (checked){\r\n            checkedAccounts.push(value)\r\n        }else{\r\n            const index = checkedAccounts.indexOf(value);\r\n            if (index > -1) {\r\n                checkedAccounts.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        this.setState({publishToSpecificAcount : checkedAccounts})\r\n       \r\n    };\r\n    \r\n    formSubmit= (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n        var editFlag = false;\r\n        if(this.state.featureData?.featureDataToEdit){\r\n            editFlag = true;\r\n        }else{\r\n            editFlag = false;\r\n        }\r\n        const eventStreamData = {\r\n            name : this.state.name ,\r\n            publishToAll : this.state.publish ,\r\n            publishToSpecificAcount : this.state.publishToSpecificAcount ,\r\n            category : this.state.category ,\r\n            description : this.state.description ,\r\n            editFlag: editFlag,\r\n        };\r\n         // SpecialCharacter validation\r\n        var validateFields = validate(eventStreamData);\r\n        if(validateFields.length > 0){\r\n            var message = \"\";\r\n            for(var i =0; i<validateFields.length; i++){\r\n                var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n                if(element){\r\n                    message += element.title + \", \";\r\n                }else{\r\n                    message += validateFields[i] + ', '\r\n                }\r\n            }\r\n            this.setState({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n        }else{\r\n            trackPromise(\r\n                fetch('/mui/saveFeature' , {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify(eventStreamData)\r\n            })\r\n            .then((result) => {\r\n                if (result.status === 404 || result.status === 400 || result.status === 500)  {\r\n                    result.json().then((object)=> {\r\n                        console.log(object);\r\n                        this.setState({resErrMsg: object.fetchErrorfromFeature});\r\n                    })\r\n                } else if (result.status === 409) {\r\n                    result.json().then((object)=> {\r\n                        this.setState({resErrMsg: object.fetchErrorfromFeature});\r\n                    })\r\n                } else if(result.status == 200){\r\n                    this.props.history.push(\"/mui/features\");\r\n                }\r\n           })\r\n            .catch(err => { \r\n              this.setState({errorMessage: err.message});\r\n            })\r\n            )\r\n        }\r\n          \r\n    }\r\n\r\n    isDisabled = () => {\r\n        const {publishToAcount, publishToSpecificAcount} = this.state;\r\n        let disabled = false\r\n        if(publishToAcount && publishToSpecificAcount.length === 0){\r\n            disabled = true\r\n        }\r\n        return disabled;\r\n    }\r\n\r\n    render() {\r\n        var eventStreamConfigElement = '';\r\n        var featureNameElement = '';\r\n        var name = '';\r\n        var publish = '';\r\n        var publishToAllAccount = '';\r\n        var publishToAcount = '';\r\n        var category = '';\r\n        var description = '';\r\n        var disabledLabel = false;\r\n        var diabledLabelForAllAcc = false;\r\n        if(this.state.publishDisable == true){\r\n            disabledLabel = true\r\n        }else{\r\n            disabledLabel = false\r\n        }\r\n        if(this.state.publishToAcount == true){\r\n            diabledLabelForAllAcc = true\r\n        }else{\r\n            diabledLabelForAllAcc = false\r\n        }\r\n        console.log(this.state);\r\n        var accountCodeItem = ''\r\n        const itemsAccCode = [];\r\n        if (this.state?.featureData?.accountCodes){\r\n            var accountCodes = this.state.featureData.accountCodes;\r\n            for (var i=0; i < accountCodes.length; i++) {\r\n                accountCodeItem = (\r\n                    <option\r\n                    className=\"bx--select-option\"\r\n                    value={accountCodes[i]}\r\n                    // selected={value.name == workspaceNameFromDB}\r\n                    >\r\n                    {accountCodes[i]}\r\n                    </option>\r\n                );\r\n                itemsAccCode.push(accountCodeItem);\r\n            }\r\n        }\r\n        if(this.state.featureData){\r\n            // EDIT FLOW------\r\n            var dataToFEtch = this.state.featureData.featureDataToEdit;\r\n        }else{\r\n            // CREATE FLOW-------\r\n            name = '';\r\n            publish = '';\r\n            publishToAllAccount = '';\r\n            publishToAcount = '';\r\n            category = '';\r\n            description = '';\r\n        }\r\n        console.log(this.state);\r\n        return (\r\n            <div className=\"divContainer\">\r\n                <section className=\"sectionGrid\">\r\n                    <div class=\"bx--grid padding0\">\r\n                        <div class=\"rowWidth\">\r\n                            <div class=\"gridColulmnWidth3\">\r\n                                <SALandingSidebar />\r\n                            </div>\r\n                            <div class=\"gridColumn13\" style={{maxWidth: '20% !important', paddingRight: '0 !important'}}>\r\n                                <SAAddFeatureBreadCrump />\r\n                                <div className=\"formDivSA\">\r\n                                    <Form  onSubmit={this.formSubmit}>\r\n                                        <TextInput className=\"bx--text-input bx--text__input\" id=\"name\" name=\"name\" labelText={ <> Feature Name <b className=\"fontRed\">*</b> </> }  placeholder=\"Feature Name\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={name} required />\r\n                                        {\r\n                                            this.state['resErrMsg'] && \r\n                                            <small className=\"fontRed\">\r\n                                            <b className=\"blgrperrorMsg\">{this.state.resErrMsg.validateFeatureMsgNew}</b>\r\n                                            </small>\r\n                                        }\r\n                                        <div className=\"checkbox\">\r\n                                            <label className=\"bx--checkbox-label-text checkboxClass\">\r\n                                            <input type=\"radio\" name=\"publishType\" value=\"publish\" className=\"checkboxInput\" \r\n                                            onChange={this.handlePublishChange} checked={this.state.publishType === 'publish'}/>\r\n                                              Publish\r\n                                            </label>\r\n                                        </div>  \r\n                                       <div className=\"checkbox\">\r\n                                            <label className=\"bx--checkbox-label-text checkboxClass\">\r\n                                            <input type=\"radio\"  name=\"publishType\" value=\"publishToSpecificAcount\"  \r\n                                            className=\"checkboxInput\"  checked={this.state.publishType === 'publishToSpecificAcount'}  onChange={this.handlePublishChange} />\r\n                                                Publish to Specific Account\r\n                                            </label>\r\n                                        </div> \r\n                                        {\r\n                                            \r\n                                            this.state.publishToAcount && \r\n                                            <FormGroup\r\n                                                name=\"accounts\"\r\n                                                legendText={\r\n                                                <>\r\n                                                    Accounts <b className=\"fontRed\">*</b>\r\n                                                </>\r\n                                                }\r\n                                                onChange={this.handleAccounts()}\r\n                                            >\r\n                                                <Grid className=\"mx-height-200\">\r\n                                                <Row>\r\n                                                    {this.state.featureData.accountForAddFeature.map((acc_code, i) => (\r\n                                                    <Column key={acc_code} lg={6}>\r\n                                                        <Checkbox\r\n                                                        id={acc_code}\r\n                                                        name={i}\r\n                                                        value={acc_code}\r\n                                                        labelText={acc_code}\r\n                                                        />\r\n                                                    </Column>\r\n                                                    ))}\r\n                                                </Row>\r\n                                                </Grid>\r\n                                            </FormGroup>\r\n                                            \r\n                                        }\r\n                                        <Select className=\"labelFont\" id=\"category\" name=\"category\" labelText=\"Category\" defaultValue=\"\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} >\r\n                                            <option\r\n                                                className=\"bx--select-option\"\r\n                                                value=\"\"\r\n                                                // selected={value.name == workspaceNameFromDB}\r\n                                                >\r\n                                                Choose an option\r\n                                            </option>\r\n                                            <option\r\n                                                className=\"bx--select-option\"\r\n                                                value=\"Incident Management\"\r\n                                                // selected={value.name == workspaceNameFromDB}\r\n                                                >\r\n                                                Incident Management\r\n                                            </option>\r\n                                            <option\r\n                                                className=\"bx--select-option\"\r\n                                                value=\"Knowledge Management\"\r\n                                                // selected={value.name == workspaceNameFromDB}\r\n                                                >\r\n                                                Knowledge Management\r\n                                            </option>\r\n                                            <option\r\n                                                className=\"bx--select-option\"\r\n                                                value=\"Change Management\"\r\n                                                // selected={value.name == workspaceNameFromDB}\r\n                                                >\r\n                                                Change Management\r\n                                            </option>\r\n                                            <option\r\n                                                className=\"bx--select-option\"\r\n                                                value=\"Problem Management\"\r\n                                                // selected={value.name == workspaceNameFromDB}\r\n                                                >\r\n                                                Problem Management\r\n                                            </option>\r\n                                            {/* <SelectItem\r\n                                                selected={category == \"Incident Management\"}\r\n                                                value=\"Incident Management\"\r\n                                                text=\"Incident Management\"\r\n                                            />\r\n                                            <SelectItem\r\n                                                selected={category == \"Knowledge Management\"}\r\n                                                value=\"KnowledgeManagement\"\r\n                                                text=\"Knowledge Management\"\r\n                                            /> */}\r\n                                            {/* <SelectItem\r\n                                                selected={category == \"Change Management\"}\r\n                                                value=\"ChangeManagement\"\r\n                                                text=\"Change Management\"\r\n                                            />\r\n                                            <SelectItem\r\n                                                selected={category == \"Problem Management\"}\r\n                                                value=\"ProblemManagement\"\r\n                                                text=\"Problem Management\"\r\n                                            /> */}\r\n                                        </Select>\r\n                                        <TextArea className=\"labelFont\" style={{marginBottom: \"16px\"}} cols={50} rows={5} labelText={<>Description <b style={{ color: \"red\" }}>*</b> <span className=\"specialCharacterLabel\">(Special characters &lt; &gt; # $ ^ & * \\ = {} ; \\\\ | ? ~ are not allowed)</span></>} placeholder=\"Description\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} name=\"description\" defaultValue={description} />\r\n                                        <br></br>\r\n                                        {\r\n                                            this.state['specialCharacterErr'] &&\r\n                                            <small className=\"fontRed\">\r\n                                                <b className=\"errorMsg specialCharErr\">{this.state['specialCharacterErr']}</b>\r\n                                            </small>\r\n                                        }\r\n                                        <br></br>\r\n                                        <Button kind=\"primary\" type=\"submit\" className=\"addWorkspace\" disabled={this.isDisabled()} >Submit</Button>\r\n                                    </Form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default withRouter(SAAddFeature);\r\n\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\AnsibleInstance\\AddAnsibleInstances\\AddAnsibleInstances.jsx",["909","910","911","912","913","914","915","916","917","918","919","920","921","922","923","924","925"],"import React, {Component} from 'react';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport {  Button, Form, TextInput, TextArea, Checkbox, Select, SelectItem, } from 'carbon-components-react';\r\nimport AddAnsibleInstancesBreadcrump from './AddAnsibleInstancesBreadcrump';\r\nimport SALandingSidebar from '../../SALandingSidebar';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { validate } from '../../../../validation/validate.js';\r\nclass SAAddAnsibleInstances extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = (\r\n            {\r\n                name: '',\r\n                url: '',\r\n                key: '',\r\n                resErrMsg: '',\r\n                resSuccessMsg:  '',\r\n                kafkaStream: '',\r\n                kafkaStreamEnabled: '',\r\n                autoStatus:'',\r\n                data:{}\r\n            }\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        trackPromise(fetch('/mui/ansibleInstance/add')\r\n        .then(res => {\r\n            return res.json()\r\n        })\r\n        .then(data => { \r\n\r\n            this.setState({ data });\r\n            if(this.state.data.edit){\r\n                let name = this.state.data.ansibleInstanceObject.name;\r\n                let url = this.state.data.ansibleInstanceObject.url;\r\n                let key = this.state.data.ansibleInstanceObject.userKey;\r\n                let autoStatus = this.state.data.ansibleInstanceObject.autoStatus;\r\n                let kafkaStream = {};\r\n                if(autoStatus == 'kafka'){\r\n                    kafkaStream = this.state.data.ansibleInstanceObject.kafkaStream;\r\n                }\r\n                this.setState({'name':name});\r\n                this.setState({'url':url});\r\n                this.setState({'key':key});\r\n                this.setState({'autoStatus':autoStatus});\r\n                this.setState({'kafkaStream':JSON.stringify(kafkaStream)})\r\n            }\r\n        })\r\n        )\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    handleChangeDropDown(name, e) {\r\n        this.setState({[e.target.name]: e.target.value });\r\n    };\r\n    \r\n    handleChangeCheckBox(name, event) {\r\n        this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    updateValue = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n\r\n    isValidURL = (urlString) => {\r\n        let url;\r\n        try {\r\n          url = new URL(urlString);\r\n        } catch (_) {\r\n          return false;  \r\n        }\r\n        return url.protocol === \"http:\" || url.protocol === \"https:\";\r\n      };\r\n\r\n    formSubmit= (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n        const edit = (this.state.data.edit)?true:false;\r\n        this.setState({resErrMsg: ''});\r\n        this.setState({resSuccessMsg: ''});\r\n        if(this.state.name.length < 1){\r\n            this.setState({resErrMsg: 'Invalid Name!!'});\r\n            return;\r\n        }else if(this.state.url.length < 8){\r\n            this.setState({resErrMsg: 'Invalid Url!!'});\r\n            return;\r\n        }else if(!this.isValidURL(this.state.url)){\r\n            this.setState({resErrMsg:'Invalid Url!!'});\r\n            return;\r\n        }else if(this.state.key.length < 1){\r\n            this.setState({resErrMsg: 'Invalid key!!'});\r\n            return;\r\n        }\r\n \r\n        let foundEdit = [];\r\n        let found = [];\r\n        if(edit){\r\n            foundEdit = this.state.data.ansibleList.filter(\r\n                (a) => a.name.toLowerCase() == this.state.name.toLowerCase() && \r\n                 a._id != this.state.data.ansibleInstanceObject._id\r\n            );\r\n        }else{\r\n            found = this.state.data.ansibleList.filter(\r\n                (a) => a.name.toLowerCase() == this.state.name.toLowerCase()\r\n            );\r\n        }\r\n        if((found && found.length > 0 && edit == false ) || (foundEdit && foundEdit.length > 0 && edit == true)){\r\n            this.setState({resErrMsg:'Ansible instance name already exists!!'});\r\n            return;\r\n        }   \r\n        if( this.state.autoStatus == 'kafka' && this.state.kafkaStream == ''){\r\n            this.setState({resErrMsg:'Invalid Kafka Stream!!'});\r\n            return;\r\n        }    \r\n\r\n        let validJson = this._validateJson();\r\n        if(!validJson){\r\n            this.setState({resErrMsg:'Invalid Kafka Stream configuration!!'});\r\n            return;\r\n        } \r\n\r\n        let ansibleInstanceData = {\r\n            name: this.state.name,\r\n            userKey: this.state.key,\r\n            threeScale: true,\r\n            url: this.state.url,\r\n            autoStatus : (this.state.autoStatus),\r\n            kafkaStream: {}\r\n        }\r\n        \r\n        if(this.state.autoStatus == 'kafka'){\r\n            ansibleInstanceData['kafkaStream'] = ( this.state.kafkaStream || '')\r\n        }\r\n\r\n        if(edit){\r\n            ansibleInstanceData['_id'] = this.state.data.ansibleInstanceObject._id;\r\n        }\r\n        // SpecialCharacter validation\r\n        var validateFields = validate(ansibleInstanceData);\r\n        if(validateFields.length > 0){\r\n            var message = \"\";\r\n            for(var i =0; i<validateFields.length; i++){\r\n                var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n                if(element){\r\n                    message += element.title + \", \";\r\n                }else{\r\n                    message += validateFields[i] + ', '\r\n                }\r\n            }\r\n            this.setState({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n        }else{\r\n            trackPromise(\r\n                fetch('/mui/ansibleInstance' , {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ ansibleInstanceData , edit })\r\n            })\r\n            .then((result) => {\r\n                if (result.status === 404 || result.status === 400 || result.status === 500)  {\r\n                    result.json().then((object)=> {\r\n                        this.setState({resErrMsg: object.fetchErrorfromansibleInstance});\r\n                    })\r\n                } else if (result.status === 409) {\r\n                    result.json().then((object)=> {\r\n                        this.setState({resErrMsg: object.fetchErrorfromansibleInstance});\r\n                    })\r\n                } else if(result.status == 200){\r\n                    result.json().then((object)=> {\r\n                        if(object.success){\r\n                            this.setState({resErrMsg:''})\r\n                            this.setState({resSuccessMsg:'Ansible Instance Saved!!'});\r\n                            setTimeout(() => {\r\n                                this.props.history.push(\"/mui/ansibleInstance\");\r\n                            }, 2000);\r\n                        }else{\r\n                            this.setState({resErrMsg:'Error Saving Instance!!'});\r\n                            this.setState({resSuccessMsg:''});\r\n                        }\r\n                    })\r\n                  \r\n                }\r\n           })\r\n            .catch(err => { \r\n              this.setState({errorMessage: err.message});\r\n            })\r\n            )\r\n        }\r\n          \r\n    }\r\n\r\n    _validateJson(){\r\n        \r\n        try{\r\n           \r\n            let success = true;\r\n            if(this.state.autoStatus != 'kafka' ){\r\n                return success;\r\n            }\r\n            let data = JSON.parse(this.state.kafkaStream);\r\n            if(!data['service_id'] || !data['role_id'] || !data['secret_id']){\r\n                success =  false;\r\n            }else if(!data['api_url'] || !data['topic']){\r\n                success = false;\r\n            }\r\n            return success;\r\n        }catch(e){\r\n            return false;\r\n        }\r\n    }\r\n\r\n     render() {\r\n\r\n        let name = '';\r\n        let url = '';\r\n        let key = '';\r\n        let kafkaStream = '';\r\n        let autoStatus = 'no';\r\n\r\n        if(this.state.data.edit){\r\n            name = this.state.data.ansibleInstanceObject.name;\r\n            url = this.state.data.ansibleInstanceObject.url;\r\n            key = this.state.data.ansibleInstanceObject.userKey;\r\n            autoStatus = this.state.data.ansibleInstanceObject.autoStatus;\r\n            if(this.state.data.ansibleInstanceObject.autoStatus == 'kafka'){\r\n                let configData = JSON.stringify(this.state.data.ansibleInstanceObject.kafkaStream);\r\n                kafkaStream = configData.replaceAll(\",\", \", \\n\");\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"divContainer\">\r\n                 <section className=\"sectionGrid\">\r\n                    <div class=\"bx--grid padding0\">\r\n                         <div class=\"rowWidth\">\r\n                             <div class=\"gridColulmnWidth3\">\r\n                                 <SALandingSidebar />\r\n                            </div>\r\n                            <div class=\"gridColumn13\" style={{maxWidth: '20% !important', paddingRight: '0 !important'}}>\r\n                                 <AddAnsibleInstancesBreadcrump />\r\n                                 <div className=\"formDivSA formDivSALg\">\r\n                                     <Form  onSubmit={this.formSubmit}>\r\n                                        <TextInput className=\"bx--text-input bx--text__input\" id=\"name\" name=\"name\" labelText={ <> Name <b className=\"fontRed\">*</b> </> }  placeholder=\"Name\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={name} required />\r\n                                        <TextInput className=\"bx--text-input bx--text__input\" id=\"url\" name=\"url\" labelText={ <> Url <b className=\"fontRed\">*</b> </> }  placeholder=\"Url\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={url} required />\r\n                                        <TextInput className=\"bx--text-input bx--text__input\" id=\"key\" name=\"key\" labelText={ <> Key <b className=\"fontRed\">*</b> </> }  placeholder=\"Key\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={key} required />\r\n                                        \r\n                                        <Select\r\n                                            className=\"labelFont\"\r\n                                            id=\"autoStatus\"\r\n                                            labelText={<>Auto Job Status <b className=\"fontRed\">*</b></>}\r\n                                            name=\"autoStatus\"\r\n                                            onChange={ (event) => { this.handleChangeDropDown('autoStatus', event) }}\r\n                                            defaultValue={autoStatus || \"no\"}\r\n                                            required\r\n                                            >\r\n                                            <SelectItem value=\"no\" text=\"none\" selected={autoStatus == \"no\"} /> \r\n                                            <SelectItem value=\"cron\" text=\"cron\" selected={autoStatus == \"cron\"} />\r\n                                            <SelectItem value=\"kafka\" text=\"kafka\" selected={autoStatus == \"kafka\"} />\r\n                                        </Select>\r\n                                        \r\n                                        {/* <div class=\"addAccBtn\">\r\n                                            <label className=\"displayInlineLabel\"><b>Enable Kafka Stream</b>\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    className=\"kafkaStreamEnabled\"\r\n                                                    name=\"kafkaStreamEnabled\"\r\n                                                    id=\"kafkaStreamEnabled\"\r\n                                                    onChange={ (event) => { this.handleChangeCheckBox('kafkaStreamEnabled', event) }}\r\n                                                    checked={(this.state.kafkaStreamEnabled != '')?this.state.kafkaStreamEnabled:kafkaStreamEnabled}\r\n                                                    />\r\n                                            </label>\r\n                                        </div> */}\r\n\r\n                                        {this.state.autoStatus == 'kafka' ? (\r\n                                        <TextArea\r\n                                            cols={50}\r\n                                            id=\"kafkaStream\"\r\n                                            name=\"kafkaStream\"\r\n                                            helperText=\"Provide proper json with name/value pairs, that begins with { left brace and ends with } right brace. Each name should be followed by : colon and the name/value pairs separated by , comma\"\r\n                                            onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} \r\n                                            defaultValue={kafkaStream} \r\n                                            required\r\n                                            labelText={ <> Configurations<b className=\"fontRed\">*</b> </> }\r\n                                            placeholder=\"Enter kafkaStream Configurations\"\r\n                                            rows={8}\r\n                                        />\r\n                                        )  : null }\r\n                                        <div class=\"cacf-instance-submit-div\">\r\n                                            <br></br>\r\n                                            {\r\n                                                this.state['specialCharacterErr'] &&\r\n                                                <small className=\"fontRed\">\r\n                                                    <b className=\"errorMsg specialCharErr\">{this.state['specialCharacterErr']}</b>\r\n                                                </small>\r\n                                            }\r\n                                            <br></br>\r\n                                            <div class=\"cacf-float-left\">\r\n                                                <Button kind=\"primary\" type=\"submit\" className=\"btnGeneral addWorkspace\" >Submit</Button>\r\n                                            </div>\r\n                                            <div class=\"cacf-instance-submit cacf-float-left\">\r\n                                            {\r\n                                                this.state['resErrMsg'] && \r\n                                                <small className=\"fontRed\">\r\n                                                <b className=\"blgrperrorMsg\">{this.state.resErrMsg}</b>\r\n                                                </small>\r\n                                            }\r\n                                            {\r\n                                                this.state['resSuccessMsg'] && \r\n                                                <small className=\"fontGreen\">\r\n                                                <b className=\"successMsg\">{this.state.resSuccessMsg}</b>\r\n                                                </small>\r\n                                            }\r\n                                            </div>\r\n                                        </div>\r\n                                    </Form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n\r\n            </div>\r\n           \r\n        )\r\n      \r\n    }\r\n}\r\nexport default withRouter(SAAddAnsibleInstances);\r\n\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ISTogether\\Admin\\AdminMain.jsx",["926","927","928","929","930","931","932"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport AdminLanding from './Admin';\r\nimport AdminBreadCrump from './AdminBreadCrump';\r\nclass AdminHome extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"divContainer\">\r\n            <AdminBreadCrump />\r\n            <section className=\"sectionMargin mainMargin paddingCostom\">\r\n                <AdminLanding />\r\n            </section>\r\n\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(AdminHome);","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ISTogether\\Volunteer\\VolunteerMain.jsx",["933","934","935","936","937","938","939"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport VolunteerForm from './Volunteer';\r\nimport VolunteerBreadCrump from './VolunteerBreadCrump';\r\nclass VolunteerHome extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"divContainer\">\r\n            <VolunteerBreadCrump />\r\n            <section className=\"sectionMargin mainMargin paddingCostom\">\r\n                <VolunteerForm />\r\n            </section>\r\n\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(VolunteerHome);","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ISTogether\\Requester\\RequesterMain.jsx",["940","941","942","943","944","945","946"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport ReqForm from './Requester';\r\nimport ReqBreadCrump from './ReqBreadCrump';\r\nclass ReqHome extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"divContainer\">\r\n            <ReqBreadCrump />\r\n            <section className=\"sectionMargin mainMargin paddingCostom\">\r\n                <ReqForm />\r\n            </section>\r\n\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(ReqHome);","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\Icon.js",["947"],"import benefit1  from '../images/benefits-1.svg';\r\nimport benefit2  from '../images/benefits-2.svg';\r\nimport benefit3  from '../images/benefits-3.svg';\r\nimport benefit4  from '../images/benefits-4.svg';\r\n\r\nexport default{\r\n    benefit1,\r\n    benefit2,\r\n    benefit3,\r\n    benefit4\r\n};","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\addAccount.jsx",["948","949","950","951","952","953","954","955","956","957","958","959","960","961","962","963","964","965"],"import {\r\n    Button,\r\n    Checkbox,\r\n    Select,\r\n    SelectItem,\r\n    Form,\r\n    FormGroup,\r\n    TextInput,\r\n  } from \"carbon-components-react\";\r\nimport { Tooltip } from \"carbon-components-react/lib/components/Tooltip/Tooltip\";\r\n  import React, { Component } from \"react\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { validate } from '../../validation/validate.js';\r\n  import \"./form.scss\";\r\n  class AddAccountForm extends Component {\r\n      constructor(props) {\r\n          super(props);\r\n          this.state = (\r\n              {accData: '',\r\n              accCode: '',\r\n              accName: '',\r\n              enterprise: '',\r\n              group: '',\r\n              createGroup:'',\r\n              dpeEmail:'',\r\n              globalRepEmail: '',\r\n              accountRepEmail: '',\r\n              globalConfig:'',\r\n              eventStream:'',\r\n              addChatopsAsAdmin:'',\r\n              maceDisabled: false,\r\n              directIntegEnabled:false,\r\n              }\r\n          );\r\n        }\r\n        componentDidMount() {\r\n            trackPromise(fetch('/mui/addAccountDetails')\r\n            .then(res => {\r\n                this.setState({disableGroupEmail : false});\r\n                return res.json()\r\n            })\r\n            .then(accData => { \r\n                if(accData.enterprisesDetails){\r\n                    this.setState({enterpriseData: accData.enterprisesDetails})\r\n                }\r\n                if(accData && accData.retrievedData.accountCode && accData.retrievedData.createGroup){\r\n                    this.setState({disableGroupEmail : true});}\r\n                else{ \r\n                    this.setState({disableGroupEmail : false});\r\n                }\r\n                if(accData && accData.retrievedData){\r\n                  this.setState({globalConfig:accData.retrievedData.eventStreams})\r\n                  this.setState({eventStream:accData.retrievedData.pushToEventStream })\r\n                }\r\n                this.setState({ accData: accData });\r\n                this.setState({createGroup : accData.retrievedData.createGroup});        \r\n                this.setState({maceDisabled : accData.retrievedData.maceDisabled});        \r\n                this.setState({directIntegEnabled : accData.retrievedData.directIntegEnabled});        \r\n            })\r\n            )\r\n        }\r\n        handleCheckbox(name, event) {\r\n            this.setState({\r\n                [event.target.name]: event.target.checked,\r\n              });\r\n        };\r\n        handleCheckbox1(name, event) {\r\n            this.setState({\r\n                [event.target.name]: event.target.checked,\r\n              });\r\n        };\r\n        handleCheckbox2(name, event) {\r\n            this.setState({\r\n                [event.target.name]: event.target.checked,\r\n              });\r\n        };\r\n        handleCheckbox3(name, event) {\r\n            this.setState({\r\n                [event.target.name]: event.target.checked,\r\n              });\r\n        };\r\n        handleCheckbox4(name, event) {\r\n          this.setState({\r\n              [event.target.name]: event.target.checked,\r\n            });\r\n      };\r\n\r\n\r\n\r\n\r\n\r\n        ///\r\n        validateEmail = async (email) => {\r\n          if(this.state.enterprise == undefined || this.state.enterprise  == ''){\r\n            this.state.enterprise = \"Kyndryl\";\r\n          }\r\n          var enterpriseName = this.state.enterprise;\r\n            try {\r\n              const response = await fetch(\"/mui/validateEmail\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                  \"Content-type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({email, enterpriseName}),\r\n              })\r\n              return response.json()\r\n            } catch (error) {\r\n              return {\r\n                valid: false,\r\n                message: \"Invalid value!\"\r\n              }\r\n            }\r\n          }\r\n        debouncer = (time) => {\r\n            let timer \r\n            return (e) => {\r\n              clearTimeout(timer)\r\n              timer = setTimeout(async () => {\r\n                const {value} = e.target\r\n              if(!value) {\r\n                e.target.setCustomValidity(\"\")\r\n                return \r\n              }\r\n              e.target.setCustomValidity(\"Verifying......\")\r\n              const response = await this.validateEmail(value.trim())\r\n              if(response.valid) {\r\n                this.setState({\r\n                  ['inValid_'+ e.target.name]: undefined\r\n              })\r\n                this.setState({\r\n                  [e.target.name]: e.target.value,\r\n                });\r\n                //this.handleInputChange(e.target.name)(e)\r\n                e.target.setCustomValidity(\"\")\r\n               \r\n  \r\n              } else {\r\n                e.target.setCustomValidity(response.errMsg)\r\n                this.setState({\r\n                  ['inValid_'+ e.target.name]: 'Please Provide Valid Email.'\r\n              })\r\n              }\r\n              }, time)\r\n            }\r\n          }\r\n        \r\n        handleInputChange = e => {\r\n            e.preventDefault();\r\n            if(e.target.value && e.target.value.includes('script') && e.target.value.includes('<') || e.target.value.includes('>')){\r\n                this.setState({\r\n                    ['inValid_'+ e.target.name]: 'Invalid Input.'\r\n                })\r\n                return\r\n            }\r\n            if(e.target.name === 'group' && e.target.value && e.target.value.match(/[!<>#%]/)) {\r\n                this.setState({\r\n                    ['inValid_' + e.target.name]: 'Value should not contain !<>#% Characters.'\r\n                });\r\n                return \r\n            }    \r\n            \r\n            this.setState({\r\n                ['inValid_' + e.target.name]: undefined\r\n            })  \r\n            if(e.target.name === 'group' && e.target.value){\r\n                var newGroup = e.target.value;\r\n                if(this.state && this.state.accData &&this.state.accData.retrievedData.groupName){\r\n                    var retrievedGroup = this.state.accData.retrievedData.groupName;\r\n                }\r\n\r\n                if(retrievedGroup && newGroup !== retrievedGroup)\r\n                {\r\n                    this.setState({disableGroupEmail : false});\r\n                }\r\n                \r\n                else if(!retrievedGroup)\r\n                {\r\n                    this.setState({disableGroupEmail : false});\r\n                }\r\n                 else {\r\n                    this.setState({disableGroupEmail : true});       \r\n                }\r\n                this.setState({\r\n                    [e.target.name]: e.target.value,\r\n                  });\r\n            }\r\n          this.setState({\r\n            [e.target.name]: e.target.value,\r\n          });\r\n        };\r\n    formSubmit= (e) => {\r\n        e.preventDefault();\r\n        var enterpriseVal = '';\r\n        var stateVal = this.state.accData;\r\n         \r\n        if(this.state.enterprise == undefined || this.state.enterprise  == ''){\r\n            enterpriseVal = \"Kyndryl\";\r\n        }\r\n        else{\r\n            enterpriseVal = this.state.enterprise;\r\n        }\r\n        if(stateVal.retrievedData){\r\n            if(stateVal.retrievedData.enterprise == \"IBM\" && this.state.enterprise  == '' ){\r\n                enterpriseVal = \"IBM\";\r\n            }\r\n        }\r\n        const accData = {\r\n              _id: this.state.accData?.retrievedData?._id,\r\n              accCode: this.state.accCode ||  this.state.accData?.retrievedData?.accountCode,\r\n              accName: this.state.accName ||  this.state.accData?.retrievedData?.accountName,\r\n              enterprise: enterpriseVal || this.state.accData?.retrievedData?.enterprise,\r\n              globalConfig: this.state.globalConfig , \r\n              eventStream: this.state.eventStream , \r\n              addChatopsAsAdmin: this.state.addChatopsAsAdmin,\r\n              group: this.state.group ||  this.state.accData?.retrievedData?.groupName,\r\n              createGroup: this.state.createGroup ||  this.state.accData?.retrievedData?.createGroup,\r\n              dpeEmail: this.state.dpeEmail ||  this.state.accData?.retrievedData?.dpeEmail,\r\n              globalRepEmail: this.state.globalRepEmail ||  this.state.accData?.retrievedData?.globalRepEmail,\r\n              accountRepEmail: this.state.accountRepEmail ||  this.state.accData?.retrievedData?.accountRepEmail,\r\n              disableCreateGroup: this.state.disableGroupEmail,\r\n              maceDisabled: this.state.maceDisabled,\r\n              directIntegEnabled:this.state.directIntegEnabled\r\n\r\n        };\r\n        // SpecialCharacter validation\r\n        var validateFields = validate(accData);\r\n        if(validateFields.length > 0){\r\n            var message = \"\";\r\n            for(var i =0; i<validateFields.length; i++){\r\n                var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n                message += element.title + \", \";\r\n            }\r\n            this.setState({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n        }else{\r\n            trackPromise(\r\n                    fetch('/mui/postAddAccountDetails' , {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        'Content-type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(accData)\r\n                })\r\n                .then((result) => {\r\n                        if (result.status === 404 || result.status === 400)  {\r\n                            result.json().then((object)=> {\r\n                            this.setState({resErrMsg:object.errMsg});\r\n                            })\r\n                        } else if (result.status === 409) {\r\n                            result.json().then((object)=> {\r\n                                this.setState({resErrMsg:object.errMsg[0]});\r\n                            })\r\n                        } else if(result.status == 200){\r\n                            this.props.history.push(\"/mui/addAccount\");\r\n                    }\r\n                })\r\n                .catch(err => { \r\n                    this.setState({errorMessage: err.message});\r\n                })\r\n            )\r\n        }\r\n            \r\n      }\r\n      render() {\r\n        const hidden = this.state.createGroup ? '' : 'hidden';\r\n            if((this.state )!== undefined){\r\n                var retrievedData = this.state.accData.retrievedData;\r\n                var enterpriseFromDb = this.state.enterpriseData;\r\n                var inputFieldAccCode = '';\r\n                var inputFieldAccName = '';\r\n                var selectEnterprise = '' ;\r\n                var inputFieldBG = '';\r\n                var pushToEventStream = '';\r\n                var event_stream = '';\r\n                var createGroup ='';\r\n                var maceDisabled ='';\r\n                var directIntegEnabled ='';\r\n                var dpeEmail='';\r\n                var itemEnterprise = [];\r\n                var globalRepEmail ='';\r\n                var formOptionEnterprise ='';\r\n                var accountRepEmail ='';\r\n                    if(enterpriseFromDb != undefined){\r\n                        itemEnterprise = [];\r\n                        for (var i = 0; i < enterpriseFromDb.length; i++) {\r\n                            if(retrievedData){\r\n                                if(enterpriseFromDb[i] == retrievedData.enterprise){\r\n                                    formOptionEnterprise = (\r\n                                        <option\r\n                                          className=\"bx--select-option\"\r\n                                          defaultValue={enterpriseFromDb[i]}\r\n                                          selected={enterpriseFromDb[i] == retrievedData.enterprise}\r\n                                        >\r\n                                          {enterpriseFromDb[i]}\r\n                                        </option>\r\n                                      );\r\n                                }else{\r\n                                    formOptionEnterprise = (\r\n                                        <option\r\n                                          className=\"bx--select-option\"\r\n                                          defaultValue={enterpriseFromDb[i]}\r\n                                        >\r\n                                          {enterpriseFromDb[i]}\r\n                                        </option>\r\n                                      );\r\n                                }\r\n                                itemEnterprise.push(formOptionEnterprise);\r\n                            }else{\r\n                                formOptionEnterprise = (\r\n                                    <option\r\n                                      className=\"bx--select-option\"\r\n                                      defaultValue={enterpriseFromDb[i]}\r\n                                    >\r\n                                      {enterpriseFromDb[i]}\r\n                                    </option>\r\n                                  );\r\n                            }\r\n                            itemEnterprise.push(formOptionEnterprise);\r\n                        }\r\n                        itemEnterprise = itemEnterprise.filter((v, i, a) => a.indexOf(v) === i);\r\n                    }\r\n                var addChatopsAsAdmin='';\r\n                if(retrievedData){\r\n                    inputFieldAccCode = <TextInput labelText={<>Account Code  <b style={{color: 'red'}}>*</b></>} defaultValue={retrievedData.accountCode} onChange={this.handleInputChange} placeholder=\"Account Code\" name=\"accCode\" id=\"accountCode\" required />\r\n                    inputFieldAccName = <TextInput labelText={<>Account Name <b style={{color: 'red'}}>*</b></>} defaultValue={retrievedData.accountName} onChange={this.handleInputChange} placeholder=\"Account Name\" name=\"accName\" id=\"accountName\" required />\r\n                    selectEnterprise = <Select\r\n                                        className=\"labelFont\"\r\n                                        id=\"enterprise\"\r\n                                        name=\"enterprise\"\r\n                                        labelText={\r\n                                        <>\r\n                                            Select Enterprise <b className=\"fontRed\">*</b>\r\n                                        </>\r\n                                        }\r\n                                        onChange={this.handleInputChange}\r\n                                        required\r\n                                    >\r\n                                      {itemEnterprise}\r\n                                    </Select>\r\n                    \r\n                    inputFieldBG = <TextInput defaultValue={retrievedData.groupName} name=\"group\" labelText={<>Account Admin Group Name <b style={{color: 'red'}}>*</b>(Special characters &lt; &gt; ! # % are not allowed)</>} onChange={this.handleInputChange} required />\r\n                        event_stream = <input type=\"checkbox\" name=\"globalConfig\" className=\"checkboxInput\" defaultChecked={retrievedData.eventStreams} onClick={ (event) => { this.handleCheckbox1('globalConfig', event) }} />\r\n                        pushToEventStream = <input type=\"checkbox\" name=\"eventStream\" className=\"checkboxInput\" defaultChecked={retrievedData.pushToEventStream} onClick={ (event) => { this.handleCheckbox2('eventStream', event) }} />\r\n                        \r\n                    createGroup =<input type=\"checkbox\" name=\"createGroup\" className=\"checkboxInput\" defaultChecked={retrievedData.createGroup} disabled ={this.state.disableGroupEmail} onClick={ (event) => { this.handleCheckbox('checkbox-1', event) }} />\r\n                    maceDisabled =<input type=\"checkbox\" name=\"maceDisabled\" className=\"checkboxInput\" defaultChecked={retrievedData.maceDisabled} onClick={ (event) => { this.handleCheckbox3('handleCheckbox3', event) }} />\r\n                    directIntegEnabled =<input type=\"checkbox\" name=\"directIntegEnabled\" className=\"checkboxInput\" defaultChecked={retrievedData.directIntegEnabled} onClick={ (event) => { this.handleCheckbox4('handleCheckbox4', event) }} />\r\n                    // maceDisabled = <input type=\"checkbox\" name=\"maceDisabled\" className=\"checkboxInput\" onClick={ (event) => { this.handleCheckbox('handleCheckbox3', event) }} />\r\n                    addChatopsAsAdmin =<input type=\"checkbox\" name=\"addChatopsAsAdmin\" className=\"checkboxInput\" defaultChecked={retrievedData.addChatopsAsAdmin} disabled ={this.state.disableGroupEmail} onClick={ (event) => { this.handleCheckbox('checkbox-2', event) }} />\r\n\r\n                    dpeEmail = <TextInput labelText={<>DPE Email <b style={{color: 'red'}}>*</b></>} defaultValue={retrievedData.dpeEmail} onChange={this.debouncer(200)}  placeholder=\"DPE Email\" disabled ={this.state.disableGroupEmail} name=\"dpeEmail\" id=\"dpeEmail\" required />\r\n                    globalRepEmail = <TextInput labelText=\"Global Representative Email\" defaultValue={retrievedData.globalRepEmail}  onChange={this.debouncer(200)}  disabled ={this.state.disableGroupEmail} placeholder=\"Global Representative Email\" name=\"globalRepEmail\" id=\"globalRepEmail\"  />\r\n                    accountRepEmail = <TextInput labelText=\"Account Representative Email\" defaultValue={retrievedData.accountRepEmail} onChange={this.debouncer(200)} disabled ={this.state.disableGroupEmail} placeholder=\"Account Representative Email\" name=\"accountRepEmail\" id=\"accountRepEmail\"  />\r\n                    \r\n                }else{\r\n                    inputFieldAccCode = <TextInput labelText={<>Account Code  <b style={{color: 'red'}}>*</b></>} onChange={this.handleInputChange} placeholder=\"Account Code\" name=\"accCode\" id=\"accountCode\" required />\r\n                    inputFieldAccName = <TextInput labelText={<>Account Name <b style={{color: 'red'}}>*</b></>} onChange={this.handleInputChange} placeholder=\"Account Name\" name=\"accName\" id=\"accountName\" required />\r\n                    selectEnterprise = <Select\r\n                                        className=\"labelFont\"\r\n                                        id=\"enterprise\"\r\n                                        name=\"enterprise\"\r\n                                        labelText={\r\n                                        <>\r\n                                            Select Enterprise <b className=\"fontRed\">*</b>\r\n                                        </>\r\n                                        }\r\n                                        // defaultValue={this.props.incidentChannelType || \"\"}\r\n                                        onChange={this.handleInputChange}\r\n                                        required\r\n                                    >\r\n                                      {itemEnterprise}\r\n                                    </Select>\r\n                    inputFieldBG = <TextInput  name=\"group\" labelText={<>Account Admin Group Name <b style={{color: 'red'}}>*</b>(Special characters &lt; &gt; ! # % are not allowed)</>} placeholder=\"Group Details\" id=\"groupDetails\" onChange={this.handleInputChange} required />\r\n                    event_stream = <input type=\"checkbox\" name=\"globalConfig\" className=\"checkboxInput\" onClick={ (event) => { this.handleCheckbox1('globalConfig', event) }} />\r\n                    pushToEventStream = <input type=\"checkbox\" name=\"eventStream\" className=\"checkboxInput\" onClick={ (event) => { this.handleCheckbox2('eventStream', event) }} />\r\n                    createGroup = <input type=\"checkbox\" name=\"createGroup\" className=\"checkboxInput\" onClick={ (event) => { this.handleCheckbox('checkbox-1', event) }} />\r\n                    maceDisabled = <input type=\"checkbox\" name=\"maceDisabled\" className=\"checkboxInput\" onClick={ (event) => { this.handleCheckbox3('handleCheckbox3', event) }} />\r\n                    directIntegEnabled =<input type=\"checkbox\" name=\"directIntegEnabled\" className=\"checkboxInput\"  onClick={ (event) => { this.handleCheckbox4('handleCheckbox4', event) }} />\r\n                    // maceDisabled = <input type=\"checkbox\" name=\"maceDisabled\" className=\"checkboxInput\" onClick={ (event) => { this.handleCheckbox('handleCheckbox3', event) }} />                   \r\n                    addChatopsAsAdmin = <input type=\"checkbox\" name=\"addChatopsAsAdmin\" className=\"checkboxInput\" defaultChecked=\"checked\" onClick={ (event) => { this.handleCheckbox('checkbox-2', event) }} />\r\n                    dpeEmail = <TextInput labelText={<>DPE Email <b style={{color: 'red'}}>*</b></>}  onChange={this.debouncer(200)}  placeholder=\"DPE Email\" name=\"dpeEmail\" id=\"dpeEmail\" required />                                       \r\n                    globalRepEmail = <TextInput labelText=\"Global Representative Email\"  onChange={this.debouncer(200)}  placeholder=\"Global Representative Email\" name=\"globalRepEmail\" id=\"globalRepEmail\"  />\r\n                    accountRepEmail = <TextInput labelText=\"Account Representative Email\" onChange={this.debouncer(200)}  placeholder=\"Account Representative Email\" name=\"accountRepEmail\" id=\"accountRepEmail\"  />\r\n                    \r\n                                    \r\n                }\r\n          }\r\n          return (\r\n          <Form onSubmit={this.formSubmit} className=\"formMain\">\r\n\r\n\r\n              {\r\n                    this.state['resErrMsg'] && \r\n                    <small className=\"fontRed\">\r\n                    <b className=\"blgrperrorMsg\">{this.state['resErrMsg']}</b>\r\n                    </small>\r\n              }\r\n              <br></br>\r\n              <br></br>\r\n                {inputFieldAccCode}\r\n              {\r\n                  this.state['inValid_accCode'] &&\r\n                  <small className=\"danger\">\r\n                      <b className=\"errorMsg\">{this.state['inValid_accCode']}</b>\r\n                  </small>\r\n              }\r\n                {inputFieldAccName}\r\n                {\r\n                  this.state['inValid_accName'] &&\r\n                  <small className=\"danger\">\r\n                      <b className=\"errorMsg\">{this.state['inValid_accName']}</b>\r\n                  </small>\r\n              }\r\n              {selectEnterprise}\r\n                {/* <TextInput labelText=\"Account Code\" value={retrievedData.accountCode} onChange={this.handleInputChange} placeholder=\"Account Code\" name=\"accCode\" id=\"accountCode\" />\r\n                <TextInput labelText=\"Account Name\" value={retrievedData.accountName} onChange={this.handleInputChange} placeholder=\"Account Name\" name=\"accName\" id=\"accountName\" /> */}\r\n\r\n                <div className=\"inlineCheckbox\">\r\n                    <FormGroup className=\"checkboxWrapper\">\r\n                            <div className=\"checkbox\">\r\n                                <label className=\"bx--checkbox-label-text checkboxClass checkboxClassBG\">\r\n                                {createGroup}\r\n                                    Create Group\r\n                                </label>\r\n                                <Tooltip className=\"tooltipBG\">Group is used for access control to the management user interface.<br></br>**Create group 'checked' option allows user to create a new group and add the dpe and respective people as members to the group<br></br>\r\n** Groups needs to be maintained by the DPE/respective account admin<br></br>\r\n** If a group already exists for the account, don't select this option but enter the group name directly in the 'Account admin group name' field.</Tooltip>\r\n                                {\r\n                                this.state.createGroup &&\r\n                                <><label className=\"bx--checkbox-label-text checkboxClass checkboxClassBG\">\r\n                                {/* {addChatopsAsAdmin} Add Chatops As Admin */}\r\n                                </label>   \r\n                                </>\r\n                                }\r\n                               \r\n                            </div>\r\n                            \r\n                    </FormGroup>\r\n                </div>\r\n                <br></br>\r\n                \r\n\r\n                {inputFieldBG}\r\n                {\r\n                  this.state['inValid_group'] &&\r\n                  <small className=\"danger\">\r\n                      <b className=\"errorMsg\">{this.state['inValid_group']}</b>\r\n                  </small>\r\n                }\r\n                 <div className=\"checkbox\">\r\n                    <label className=\"bx--checkbox-label-text checkboxClass checkboxClassBG\">\r\n                    {maceDisabled}\r\n                        Disable mace calls\r\n                    </label>\r\n                    <Tooltip className=\"tooltipBG\">If checked, all calls coming from mace will be disabled</Tooltip>\r\n                    {\r\n                    this.state.createGroup &&\r\n                    <><label className=\"bx--checkbox-label-text checkboxClass checkboxClassBG\">\r\n                    </label>   \r\n                    </>\r\n                    }\r\n                    \r\n                </div>\r\n                <div className=\"checkbox\">\r\n                    <label className=\"bx--checkbox-label-text checkboxClass checkboxClassBG\">\r\n                    {directIntegEnabled}\r\n                        Enable direct integration \r\n                    </label>\r\n                    <Tooltip className=\"tooltipBG\">Ticketing Tool to ChatOps direct integration enabled and if AIOPS is also enabled, only Insights would get posted in the channel</Tooltip>\r\n                </div>\r\n                \r\n              {\r\n                this.state.createGroup &&\r\n              <>{dpeEmail}\r\n              {\r\n                  this.state['inValid_dpeEmail'] &&\r\n                  <small className=\"fontRed\">\r\n                      <b className=\"errorMsg\">{this.state['inValid_dpeEmail']}</b>\r\n                  </small>\r\n              }\r\n              \r\n              {globalRepEmail}\r\n              {\r\n                  this.state['inValid_globalRepEmail'] &&\r\n                  <small className=\"fontRed\">\r\n                      <b className=\"errorMsg\">{this.state['inValid_globalRepEmail']}</b>\r\n                  </small>\r\n              }\r\n             {accountRepEmail}\r\n             {\r\n                  this.state['inValid_accountRepEmail'] &&\r\n                  <small className=\"fontRed\">\r\n                      <b className=\"errorMsg\">{this.state['inValid_accountRepEmail']}</b>\r\n                  </small>\r\n              }\r\n             \r\n            </>}\r\n\r\n              {/* <div className=\"inlineCheckbox\">\r\n                    <FormGroup className=\"checkboxWrapper\">\r\n                            <div className=\"checkbox\">\r\n                                <label className=\"bx--checkbox-label-text checkboxClass\">\r\n                                {pushToEventStream}                                \r\n                                    Event Streams Enable/Disable\r\n                                </label>\r\n                                <label className=\"bx--checkbox-label-text checkboxClass\">\r\n                                {event_stream}                               \r\n                                    Use Global Config (Event Streams)\r\n                                </label>\r\n                            </div>    \r\n                                        \r\n                             <Tooltip>More Information about event stream click-https://w3.ibm.com/w3publisher/chatops-for-ibm-services/key-features/dynamic-workflow</Tooltip>\r\n                        \r\n                    </FormGroup>\r\n                </div> */}\r\n                <br></br><br></br>\r\n                {\r\n                  this.state['specialCharacterErr'] &&\r\n                  <small className=\"fontRed\">\r\n                      <b className=\"errorMsg specialCharErr\">{this.state['specialCharacterErr']}</b>\r\n                  </small>\r\n              }\r\n              <div>\r\n                {/* {\r\n                    this.props['specialCharacterErr'] &&\r\n                    <small className=\"fontRed\" style={{width: '100% !important'}}>\r\n                        <b className=\"errorMsg specialCharErr\">{this.props['specialCharacterErr']}</b>\r\n                    </small>\r\n                } */}\r\n                </div>\r\n                <Button className=\"PAbtnCommon\" type=\"submit\" onClick={this.addAccountClick} disabled={this.state['inValid_accCode'] || this.state['inValid_accName'] || this.state['inValid_group'] || this.state['inValid_group'] || this.state['inValid_dpeEmail'] || this.state['inValid_accountRepEmail'] || this.state['inValid_globalRepEmail'] } >Submit</Button>\r\n          </Form>\r\n          );\r\n      }\r\n  }\r\n  \r\n  export default withRouter(AddAccountForm);\r\n  ","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\subscribeToMaintenanceSchedule.jsx",[],"C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\common\\table\\TablePA.jsx",["966","967","968","969","970","971","972","973","974","975","976","977","978","979","980","981","982","983","984","985","986","987","988"],"import React, { Component } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n  Tag,\r\n  OverflowMenu, \r\n  OverflowMenuItem,\r\n  Search,\r\n  TextInput,\r\n  Button\r\n} from \"carbon-components-react\";\r\nimport { Edit32 } from \"@carbon/icons-react\";\r\nimport { Search32 } from \"@carbon/icons-react\";\r\nimport { Reset32 } from \"@carbon/icons-react\";\r\nimport { searchIcon } from \"@carbon/icons-react\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport \"./table.scss\";\r\nimport { Link } from \"react-router-dom\";\r\n// import axios from 'axios';\r\n\r\n\r\nclass DataTablePA extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            accData: [],\r\n            accID: '',\r\n            feedStatusData:[],\r\n            filtered:[],\r\n            searchVal:''\r\n        };\r\n        this.loadFeedStatus = this.loadFeedStatus.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        trackPromise(fetch('/mui/onboardAccountDataPA')\r\n        .then(res => {\r\n            return res.json()\r\n        })\r\n        .then(accData => { \r\n            this.setState({\r\n                 accData,\r\n                filtered: accData.accountsData })\r\n        }))\r\n    }\r\n    handleReset = e => {\r\n        var searchValObj = {}\r\n        searchValObj[\"searchVal\"] = '';\r\n        trackPromise(\r\n            fetch('/mui/resetSearch' , {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify(searchValObj)\r\n            })\r\n            .then((result) => {result.json()\r\n                if(result.status == 200){\r\n                    e.preventDefault();\r\n                    this.loadSearchDara();\r\n                }\r\n            })\r\n            \r\n        )\r\n    }\r\n    editAccountClick= (e) => {\r\n        e.preventDefault();\r\n        var accID = e.currentTarget.id;\r\n        fetch('/mui/editAccountDetails' , {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"accID\": accID\r\n             })\r\n        })\r\n        .then((result) => {result.json()\r\n            if(result.status == 200){\r\n              window.location.href = \"/mui/addAccountDetails\";\r\n            }\r\n        })\r\n    }\r\n    handleSearch = e => {\r\n        this.setState({\r\n            searchVal: e.target.value\r\n        })\r\n        \r\n    };\r\n    handleSeachClick = e => {\r\n        const { accData, searchVal } = this.state\r\n        this.setState({\r\n            filtered: accData.accountsData.filter(({accountName}) => accountName && accountName.toLowerCase().startsWith(searchVal.toLowerCase()))\r\n        })\r\n    } ;\r\n    loadSearchDara = () => {\r\n        trackPromise(\r\n            fetch('/mui/onboardAccountDataPA')\r\n            .then(res => {\r\n                return res.json()\r\n            })\r\n            .then(accData => { \r\n                this.setState({ \r\n                    accData,\r\n                    filtered: accData.accountsData\r\n                })\r\n            })\r\n            \r\n        )\r\n    }\r\n    feedStatus = (e) => {\r\n        e.preventDefault();\r\n        var feedDtatusName = e.currentTarget.name;\r\n        const feedData = {\r\n            accCode: e.currentTarget.id,\r\n            feedStatusData: feedDtatusName\r\n        };\r\n        trackPromise(\r\n            fetch('/mui/addFeedStatus' , {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify(feedData)\r\n            })\r\n            .then((result) => {result.json()\r\n                if(result.status == 200){\r\n                    e.preventDefault();\r\n                    this.loadFeedStatus();\r\n                }\r\n            })\r\n        )\r\n    }\r\n    loadFeedStatus = () => {\r\n        trackPromise(\r\n            fetch('/mui/onboardAccountDataPA')\r\n            .then(res => {\r\n                return res.json()\r\n            })\r\n            .then(accData => { \r\n                this.setState({ accData })\r\n            })\r\n            \r\n        )\r\n    }\r\n\r\n\r\n    render() {\r\n        const items = []\r\n        var rows ;\r\n        var headers = [\r\n            \"Account Code\",\r\n            \"Account Name\",\r\n            \"Account Geo\",\r\n            \"Group Name\",\r\n            \"Created On (UTC)\",\r\n            \"Account Status\",\r\n            \"Feed Status\",\r\n            \"\"\r\n        ];\r\n        var feedStatus = '';\r\n        var feedAccCode = '';\r\n        const rowsData = this.state.accData;\r\n        if(this.state.feedStatusData){\r\n            var feedData = this.state.feedStatusData;\r\n            if(Object.keys(feedData).length != 0){\r\n                var feedDataFetched = feedData.statusList;\r\n                feedStatus = feedDataFetched.feedStatus;\r\n                feedAccCode = feedDataFetched.accCode;\r\n            }\r\n            \r\n        }\r\n        if(rowsData.length !==0 ){\r\n            var rowDataArr = rowsData.accountsData;\r\n            rows = this.state.filtered;\r\n            var tag = '';\r\n            var formSubmitted;\r\n            var feedTag = '';\r\n            var overflowMenu = '';\r\n            Object.entries(rows).map(([key, value]) => {\r\n                let tableTr = \"\";\r\n                var accID = value._id;\r\n                if (value.hasOwnProperty(\"geo\")) {\r\n                }else{\r\n                    value.geo = \"NA\";\r\n                }\r\n                if (value.hasOwnProperty(\"feedStatus\")) {\r\n                    if(value.feedStatus == \"active\"){\r\n                        feedTag = <Tag type=\"teal\" title=\"Clear Filter\">Active</Tag>\r\n                    }else if(value.feedStatus == \"deactive\"){\r\n                        feedTag = <Tag type=\"magenta\" title=\"Clear Filter\">Deactive</Tag>\r\n                    }else if(value.feedStatus == \"requestForFeed\"){\r\n                        feedTag = <Tag type=\"gray\" title=\"Clear Filter\">Requested for feed</Tag>\r\n                    }else if(value.feedStatus == \"hold\"){\r\n                        feedTag = <Tag type=\"cyan\" title=\"Clear Filter\">Hold</Tag>\r\n                    }\r\n                }\r\n                else{\r\n                    feedTag = <Tag type=\"warm-gray\" title=\"Clear Filter\"> NA </Tag>\r\n                }\r\n                if(value.submitted && (value.saved == true || value.saved == false)){\r\n                    tag = <Tag type=\"green\" title=\"Clear Filter\"> Submitted </Tag>\r\n                    overflowMenu =  <div className=\"overflowMenuPA\">\r\n                                        <OverflowMenu\r\n                                        ariaLabel=\"Feed Status\"\r\n                                        title=\"Feed Status\"\r\n                                        aria-label=\"Feed Status\"\r\n                                        aria-labelledby=\"Feed Status\"\r\n                                        iconDescription=\"Feed Status\"\r\n                                        className=\"overFlowIcon\"\r\n                                        selectorPrimaryFocus=\"option-two\"\r\n                                        > \r\n                                            <OverflowMenuItem\r\n                                                name=\"active\"\r\n                                                defaultValue=\"active\"\r\n                                                className=\"overflowMenuClass\"\r\n                                                itemText=\"Active\"\r\n                                                id={value.accountCode}\r\n                                                onClick={this.feedStatus}\r\n                                            />\r\n                                            <OverflowMenuItem\r\n                                                name=\"deactive\"\r\n                                                defaultValue=\"deactive\"\r\n                                                className=\"overflowMenuClass\"\r\n                                                itemText=\"Deactive\"\r\n                                                id={value.accountCode}\r\n                                                onClick={this.feedStatus}\r\n                                            />\r\n                                            <OverflowMenuItem\r\n                                                name=\"requestForFeed\"\r\n                                                defaultValue=\"requestForFeed\"\r\n                                                className=\"overflowMenuClass\"\r\n                                                itemText=\"Requested for feed\"\r\n                                                id={value.accountCode}\r\n                                                onClick={this.feedStatus}\r\n                                            />\r\n                                            <OverflowMenuItem\r\n                                                name=\"hold\"\r\n                                                defaultValue=\"hold\"\r\n                                                className=\"overflowMenuClass\"\r\n                                                itemText=\"Hold\"\r\n                                                id={value.accountCode}\r\n                                                onClick={this.feedStatus}\r\n                                            />\r\n                                        </OverflowMenu>\r\n                                    </div>\r\n                }else if(value.submitted == false && value.saved == true){\r\n                    tag = <Tag type=\"purple\" title=\"Clear Filter\">Saved as Draft</Tag>\r\n                    overflowMenu = \"\"\r\n                }else{\r\n                    tag = <Tag type=\"blue\" title=\"Clear Filter\">Not Submitted </Tag>\r\n                    overflowMenu = \"\"\r\n                }\r\n                var redirectUrl = \"/mui/addAccountDetails?\"+value._id;\r\n                tableTr = <tr >\r\n                            <td className=\"tdStyle\" style={{width: \"13% !important\",wordBreak: \"break-word\"}}>{value.accountCode}</td>\r\n                            <td className=\"tdStyle\">{value.accountName}</td>\r\n                            <td className=\"tdStyle\">{value.geo}</td>\r\n                            <td className=\"tdStyle\">{value.groupName}</td>\r\n                            <td className=\"tdStyle\">{value.date}</td>\r\n                            <td className=\"tdStyle\">{tag}</td>\r\n                            <td className=\"tdStyle\">{feedTag}</td>\r\n                            <td className=\"tdStyle\" style={{width: \"12%\"}}>\r\n                                <Link  id={value._id} to={redirectUrl} ><Edit32 className=\"iconEditSize editIconPA\" aria-label=\"Add\" /></Link>\r\n                                {overflowMenu}\r\n                            </td>\r\n                        </tr>\r\n                items.push( tableTr );\r\n            })\r\n        }\r\n       \r\n        return (\r\n            <div className=\"dataTableMainDiv\">\r\n            <div className=\"searchDivMain\">\r\n                <div className=\"mainHeaderDivPA\">\r\n                    <TextInput\r\n                        id=\"search-1\"\r\n                        labelText=\"\"\r\n                        placeholder=\"Search\"\r\n                        className=\"searchInput\"\r\n                        onChange={this.handleSearch}\r\n                        defaultValue=''\r\n                    />\r\n                    <a  id=\"searchIcon\" onClick={this.handleSeachClick}><Search32 className=\"iconEditSize editIconPA\" style={{margin: \"0 10px\"}} aria-label=\"Search\" /></a>\r\n                    <a  id=\"resetIcon\" onClick={this.handleReset}><Reset32 className=\"iconEditSize editIconPA\" aria-label=\"Reset\" /></a>\r\n                </div>\r\n                <Link class=\"addBtnPACss\" to=\"/mui/addAccountDetails\">\r\n                    <Button className=\"addAccBtn addBtnCss addBtnPACss\">\r\n                        <Link to=\"/mui/addAccountDetails\">Add Account</Link>\r\n                    </Button>\r\n                </Link>\r\n                {/* <Button className=\"addAccBtn addBtnCss\">\r\n                    <Link to=\"/mui/addAccountDetails\">Add Account</Link>\r\n                </Button> */}\r\n            </div>\r\n                <Table className=\"dataTablePA\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {headers.map((header) => (\r\n                            <TableHeader key={header}>{header}</TableHeader>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {items}\r\n                    </TableBody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DataTablePA;\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\common\\table\\table.jsx",["989","990","991","992","993","994","995","996","997","998","999","1000","1001"],"import React, { Component } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n  Tag,\r\n  OverflowMenu,\r\n  OverflowMenuItem,\r\n} from \"carbon-components-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\n\r\nclass DataTable extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { accData: [] };\r\n  }\r\n  componentDidMount() {\r\n    trackPromise(\r\n      fetch(\"/mui/onboardAccountData\")\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((accData) => {\r\n          this.setState({ accData });\r\n        })\r\n    );\r\n  }\r\n  handleCheck(e) {\r\n    this.setState({\r\n      clickedID: e.target.id,\r\n    });\r\n  }\r\n  render() {\r\n    const items = [];\r\n    var rows;\r\n    var headers = [\r\n      \"Account Code\",\r\n      \"Account Name\",\r\n      \"Account Geo\",\r\n      \"Group Name\",\r\n      \"Created On (UTC)\",\r\n      \"Account Status\",\r\n      \"Feed Status\",\r\n      \"\",\r\n    ];\r\n    const rowsData = this.state.accData;\r\n    var stateData = this.state;\r\n    if (rowsData.length !== 0) {\r\n      var rowDataArr = rowsData.accountsData;\r\n      rows = rowDataArr;\r\n      var tag = \"\";\r\n      var overflowMenu = \"\";\r\n      var formSubmitted;\r\n      var feedTag = \"\";\r\n\r\n      Object.entries(rows).map(([key, value]) => {\r\n        let tableTr = \"\";\r\n        var redirectUrl = \"/mui/onboardAccountDetails?\" + value._id;\r\n        var redirectAPIUrl = \"/mui/APIKeys?\" + value._id;\r\n        var redirectCmdRegUrl = \"/mui/commandRegistraton?\" + value._id;\r\n        var redirectSMUrl = \"/mui/servicemanager?\" + value._id;\r\n        const redirectCRFWEmailUrl = `/mui/cr-approval-followup?code=${value.accountCode}`;\r\n        var redirectWebhookUrl = \"/mui/webhooks/\" + value._id;\r\n        var redirectSettingsUrl = \"/mui/account-settings/\" + value._id; \r\n        var redirectEnrollWindowUrl = \"/mui/subscribeToMaintenanceSchedule?code=\" + value.accountCode;\r\n        if (value.hasOwnProperty(\"geo\")) {\r\n        } else {\r\n          value.geo = \"NA\";\r\n        }\r\n        if (value.hasOwnProperty(\"feedStatus\")) {\r\n          if (value.feedStatus == \"active\") {\r\n            feedTag = (\r\n              <Tag type=\"teal\" title=\"Clear Filter\">\r\n                Active\r\n              </Tag>\r\n            );\r\n          } else if (value.feedStatus == \"deactive\") {\r\n            feedTag = (\r\n              <Tag type=\"magenta\" title=\"Clear Filter\">\r\n                Deactive\r\n              </Tag>\r\n            );\r\n          } else if (value.feedStatus == \"requestForFeed\") {\r\n            feedTag = (\r\n              <Tag type=\"gray\" title=\"Clear Filter\">\r\n                Requested for feed\r\n              </Tag>\r\n            );\r\n          } else if (value.feedStatus == \"hold\") {\r\n            feedTag = (\r\n              <Tag type=\"cyan\" title=\"Clear Filter\">\r\n                Hold\r\n              </Tag>\r\n            );\r\n          }\r\n        } else {\r\n          feedTag = (\r\n            <Tag type=\"warm-gray\" title=\"Clear Filter\">\r\n              {\" \"}\r\n              NA{\" \"}\r\n            </Tag>\r\n          );\r\n        }\r\n        if (value.submitted && (value.saved == true || value.saved == false)) {\r\n          tag = (\r\n            <Tag type=\"green\" title=\"Clear Filter\">\r\n              {\" \"}\r\n              Submitted{\" \"}\r\n            </Tag>\r\n          );\r\n\r\n          overflowMenu = (\r\n            <div>\r\n              <Link className=\"width-full\" to={redirectUrl}>\r\n                <OverflowMenuItem\r\n                  className=\"overflowMenuClass\"\r\n                  itemText=\"Edit Account\"\r\n                  id=\"onboardAccount\"\r\n                />\r\n              </Link>\r\n              <Link className=\"width-full\" to={\"/mui/api-keys/\" + value._id}>\r\n                <OverflowMenuItem\r\n                  className=\"overflowMenuClass\"\r\n                  itemText=\"API Keys\"\r\n                  id=\"APIKeys\"\r\n                />\r\n              </Link>\r\n              <Link className=\"width-full\" to={\"/mui/event-streams/\" + value._id}>\r\n                <OverflowMenuItem\r\n                  className=\"overflowMenuClass\"\r\n                  itemText=\"Event Streams\"\r\n                  id=\"EventStreams\"\r\n                />\r\n              </Link>\r\n              <Link className=\"width-full\" to={redirectCmdRegUrl}>\r\n                <OverflowMenuItem\r\n                  className=\"overflowMenuClass\"\r\n                  itemText=\"Command Registration\"\r\n                  id=\"cmdReg\"\r\n                />\r\n              </Link>\r\n              {value.enableServiceManager && (<Link className=\"width-full\" to={redirectSMUrl}>\r\n                <OverflowMenuItem\r\n                  className=\"overflowMenuClass\"\r\n                  itemText=\"Service Manager\"\r\n                  id=\"serviceManager\"\r\n                />\r\n              </Link>)}\r\n\r\n              {value.enableCRFWEmail && (<Link className=\"width-full\" to={redirectCRFWEmailUrl}>\r\n                <OverflowMenuItem\r\n                  className=\"overflowMenuClass\"\r\n                  itemText=\"CR Follow Up Email\"\r\n                  id=\"crFWEmail\"\r\n                />\r\n              </Link>)}\r\n            \r\n              <Link className=\"width-full\" to={redirectWebhookUrl}>\r\n                <OverflowMenuItem\r\n                  className=\"overflowMenuClass\"\r\n                  itemText=\"Webhook\"\r\n                  id=\"wedhook\"\r\n                />\r\n              </Link>\r\n              <Link className=\"width-full\" to={redirectSettingsUrl}>\r\n                <OverflowMenuItem\r\n                  className=\"overflowMenuClass\"\r\n                  itemText=\"Settings\"\r\n                  id=\"settings\"\r\n                />\r\n              </Link>\r\n              {\r\n                value.enrollMaintenanceWindow && value.enrollMaintenanceWindow === true && (\r\n                  <Link to={redirectEnrollWindowUrl}>\r\n                    <OverflowMenuItem\r\n                      name=\"enrollForMaintenanceWindow\"\r\n                      defaultValue=\"enrollForMaintenanceWindow\"\r\n                      className=\"overflowMenuClass\"\r\n                      itemText=\"Maintenance Window Configuration\"\r\n                      id={value.accountCode}\r\n                    />\r\n                  </Link>\r\n                )\r\n              }\r\n            </div>\r\n          );\r\n        } else if (value.submitted == false && value.saved == true) {\r\n          tag = (\r\n            <Tag type=\"purple\" title=\"Clear Filter\">\r\n              Saved as Draft\r\n            </Tag>\r\n          );\r\n          overflowMenu = (\r\n            <Link className=\"width-full\" to={redirectUrl}>\r\n              <OverflowMenuItem\r\n                className=\"overflowMenuClass\"\r\n                itemText=\"Onboard Account\"\r\n              />\r\n            </Link>\r\n          );\r\n        } else {\r\n          tag = (\r\n            <Tag type=\"blue\" title=\"Clear Filter\">\r\n              Not Submitted{\" \"}\r\n            </Tag>\r\n          );\r\n          overflowMenu = (\r\n            <Link className=\"width-full\" to={redirectUrl}>\r\n              <OverflowMenuItem\r\n                className=\"overflowMenuClass\"\r\n                itemText=\"Onboard Account\"\r\n              />\r\n            </Link>\r\n          );\r\n        }\r\n\r\n        tableTr = (\r\n          <tr>\r\n            <td style={({ width: \"13%\" }, { wordBreak: \"break-word\" })}>\r\n              {value.accountCode}\r\n            </td>\r\n            <td>{value.accountName}</td>\r\n            <td>{value.geo}</td>\r\n            <td>{value.groupName}</td>\r\n            <td>{value.date}</td>\r\n            <td style={{ width: \"13%\" }}>{tag}</td>\r\n            <td>{feedTag}</td>\r\n            <td style={{ width: \"12%\" }}>\r\n              <OverflowMenu\r\n                ariaLabel=\"Onboard / Edit Account\"\r\n                title=\"Onboard Account\"\r\n                aria-label=\"Onboard / Edit Account\"\r\n                aria-labelledby=\"Onboard / Edit Account\"\r\n                iconDescription=\"Onboard / Edit Account\"\r\n                selectorPrimaryFocus=\"option-two\"\r\n              >\r\n                {overflowMenu}\r\n              </OverflowMenu>\r\n            </td>\r\n          </tr>\r\n        );\r\n        items.push(tableTr);\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              {headers.map((header) => (\r\n                <TableHeader key={header}>{header}</TableHeader>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>{items}</TableBody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataTable;\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\AAForm\\GeneralInfo.jsx",["1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","1016","1017","1018","1019","1020","1021","1022","1023","1024","1025","1026","1027"],"// GeneralInfo.jsx\r\nimport React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  Column,\r\n  Form,\r\n  Grid,\r\n  Row,\r\n  Select,\r\n  TextInput,\r\n  SelectItem,\r\n  FormLabel,\r\n} from \"carbon-components-react\";\r\nimport \"../form.scss\";\r\nimport \"../onboardForm.scss\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { Tooltip } from \"carbon-components-react/lib/components/Tooltip/Tooltip\";\r\n\r\nclass GeneralInfo extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      //AccData: [],\r\n    };\r\n  }\r\n  saveAndContinue = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(\"general\")\r\n    this.props.nextStep();\r\n  };\r\n  submitAndContinue = (e) => {\r\n    e.preventDefault();\r\n    var saved = false;\r\n    var submitted = false;\r\n    if (e.target.className.includes(\"saveData\")) {\r\n      saved = true;\r\n      submitted = false;\r\n    } else {\r\n      saved = false;\r\n      submitted = true;\r\n    }\r\n\r\n    this.props.submitForm(saved);\r\n  };\r\n  componentDidMount() {\r\n    // trackPromise(\r\n    //   fetch(\"/mui/onboardAccountFormData\")\r\n    //     .then((res) => {\r\n    //       return res.json();\r\n    //     })\r\n    //     .then((AccData) => {\r\n    //       this.setState({ AccData });\r\n    //     })\r\n    //     .catch((err) => {\r\n    //       console.log(\"error==============>\", err);\r\n    //     })\r\n    // );\r\n  }\r\n  handleChange = (e) => {};\r\n  render() {\r\n    const { values } = this.props;\r\n    var accData = this.props.AccData;\r\n    const itemsIndustry = [];\r\n    const itemsSector = [];\r\n    const itemsGeo = [];\r\n    const itemsCountry = [];\r\n    const itemsMarket = [];\r\n\r\n    var geoSelected = this.state.geo;\r\n    var formOptionMarket = \"\";\r\n    var formOptionSector = \"\";\r\n    var formOptionIndustry = \"\";\r\n    var formOptionCountry = \"\";\r\n    var formOptionGeo = \"\";\r\n    var showComponent = \"\";\r\n    var market = [];\r\n    var stateObj = this.state;\r\n    var continueFlag = false;\r\n    if (accData.length !== 0) {\r\n      var accountsData = accData.accountsData;\r\n      var submitted = accountsData.submitted;\r\n      var saved = accountsData.saved;\r\n      var industryArr = accountsData.industryList;\r\n      var sectorArr = accountsData.sectorList;\r\n      var geoArr = accountsData.geoList;\r\n      var countryArr = accountsData.countryList;\r\n      var enterprise = accountsData.enterprise;\r\n      var savedBtn = \"\";\r\n      if (submitted == false && (saved == true || saved == false)) {\r\n        savedBtn = (\r\n          <Button\r\n            className=\"btnMargin saveData\"\r\n            kind=\"secondary\"\r\n            key=\"saveData\"\r\n            onClick={this.submitAndContinue}\r\n          >\r\n            Save\r\n          </Button>\r\n        );\r\n      }\r\n      if (submitted == true && (saved == true || saved == false)) {\r\n        savedBtn = \"\";\r\n      }\r\n      Object.entries(industryArr).map(([key, value]) => {\r\n        formOptionIndustry = (\r\n          <option\r\n            className=\"bx--select-option\"\r\n            value={value.value}\r\n            selected={value.value == accountsData.industry}\r\n          >\r\n            {value.desc}\r\n          </option>\r\n        );\r\n        itemsIndustry.push(formOptionIndustry);\r\n      });\r\n      Object.entries(sectorArr).map(([key, value]) => {\r\n        formOptionSector = value.desc !== \"Choose an Option\" && (\r\n          <option\r\n            className=\"bx--select-option\"\r\n            value={value.value}\r\n            selected={value.value == accountsData.sector}\r\n          >\r\n            {value.desc}\r\n          </option>\r\n        );\r\n        itemsSector.push(formOptionSector);\r\n      });\r\n      Object.entries(geoArr).map(([key, value]) => {\r\n        formOptionGeo = value.geo !== \"Choose an Option\" && (\r\n          <option\r\n            className=\"bx--select-option\"\r\n            value={value.geo}\r\n            selected={value.geo == accountsData.geo}\r\n          >\r\n            {value.geo}\r\n          </option>\r\n        );\r\n        itemsGeo.push(formOptionGeo);\r\n      });\r\n      Object.entries(geoArr).map(([key, value]) => {\r\n        if (value.geo !== \"Choose an Option\") {\r\n          if (\r\n            value.geo == this.props.values.accGeo ||\r\n            value.geo == accountsData.geo\r\n          ) {\r\n            market = value.market;\r\n            for (var i = 0; i < market.length; i++) {\r\n              formOptionMarket = (\r\n                <option\r\n                  className=\"bx--select-option\"\r\n                  value={market[i]}\r\n                  selected={market[i] == accountsData.market}\r\n                >\r\n                  {market[i]}\r\n                </option>\r\n              );\r\n              itemsMarket.push(formOptionMarket);\r\n            }\r\n          }\r\n        }\r\n      });\r\n      Object.entries(countryArr).map(([key, value]) => {\r\n        formOptionCountry = (\r\n          <option\r\n            className=\"bx--select-option\"\r\n            data-iso={value.isocode}\r\n            data-country={value.desc}\r\n            value={value.desc}\r\n            selected={value.desc == accountsData.countryName}\r\n          >\r\n            {value.desc}\r\n          </option>\r\n        );\r\n        itemsCountry.push(formOptionCountry);\r\n      });\r\n    }\r\n    return (\r\n      <Form onSubmit={this.saveAndContinue}>\r\n        <Grid>\r\n          <Row>\r\n            <Column>\r\n              <Select\r\n                className=\"labelFont\"\r\n                id=\"accountContractGeo\"\r\n                labelText={\r\n                  <>\r\n                    Account Contract Geo <b className=\"fontRed\">*</b>\r\n                  </>\r\n                }\r\n                name=\"accGeo\"\r\n                onChange={this.props.handleChange(\"accGeo\")}\r\n                defaultValue={this.props.accGeo|| \"\"}\r\n                required\r\n              >\r\n                <SelectItem disabled hidden value=\"\" text=\"Choose an option\" />\r\n                {itemsGeo}\r\n              </Select>\r\n            </Column>\r\n            <Column>\r\n              <Select\r\n                className=\"labelFont\"\r\n                id=\"accountContractMarket\"\r\n                labelText={\r\n                  <>\r\n                    Account Contract Market <b className=\"fontRed\">*</b>{\" \"}\r\n                  </>\r\n                }\r\n                defaultValue={this.props.accMarket || \"\"}\r\n                name=\"accMarket\"\r\n                onChange={this.props.handleChange(\"accMarket\")}\r\n                required\r\n              >\r\n                <SelectItem disabled hidden value=\"\" text=\"Choose an option\" />\r\n                {itemsMarket}\r\n              </Select>\r\n            </Column>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Column>\r\n              <Select\r\n                className=\"labelFont\"\r\n                id=\"accountCountry\"\r\n                labelText={\r\n                  <>\r\n                    Account Country <b className=\"fontRed\">*</b>\r\n                  </>\r\n                }\r\n                defaultValue={this.props.countryName || values?.accountCountry || \"\"}\r\n                name=\"accountCountry\"\r\n                onChange={this.props.handleChange(\"accountCountry\")}\r\n                required\r\n              >\r\n                <SelectItem disabled hidden value=\"\" text=\"Choose an option\" />\r\n                {itemsCountry}\r\n              </Select>\r\n            </Column>\r\n            <Column>\r\n              <Select\r\n                className=\"labelFont\"\r\n                id=\"accountSector\"\r\n                labelText={\r\n                  <>\r\n                    Account Sector <b className=\"fontRed\">*</b>\r\n                  </>\r\n                }\r\n                defaultValue={this.props.accSector || values?.accSector || \"\"}\r\n                name=\"accSector\"\r\n                onChange={this.props.handleChange(\"accSector\")}\r\n                required\r\n              >\r\n                <SelectItem disabled hidden value=\"\" text=\"Choose an option\" />\r\n                {itemsSector}\r\n              </Select>\r\n            </Column>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Column>\r\n              <Select\r\n                className=\"labelFont\"\r\n                id=\"accountIndustry\"\r\n                labelText={\r\n                  <>\r\n                    Account Industry <b className=\"fontRed\">*</b>\r\n                  </>\r\n                }\r\n                defaultValue={this.props.accIndustry ||  \"\"}\r\n                name=\"accIndustry\"\r\n                onChange={this.props.handleChange(\"accIndustry\")}\r\n                required\r\n              >\r\n                <SelectItem disabled hidden value=\"\" text=\"Choose an option\" />\r\n                {itemsIndustry}\r\n              </Select>\r\n            </Column>\r\n            <Column>\r\n              <TextInput\r\n                className=\"labelFont classWithTitle\"\r\n                id=\"accountBlueId\"\r\n                name=\"blueID\"\r\n                labelText={\r\n                  <span>\r\n                    Account BlueID\r\n                    <Tooltip>Unique identifier for account</Tooltip>\r\n                  </span>\r\n                }\r\n                placeholder=\"Account BlueID\"\r\n                name=\"blueID\"\r\n                onChange={this.props.handleChange(\"blueID\")}\r\n                defaultValue={this.props.blueID } \r\n              />\r\n            </Column>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Column>\r\n              <TextInput\r\n                className=\"labelFont\"\r\n                id=\"accountCdir\"\r\n                name=\"CDIR\"\r\n                labelText={\r\n                  <>\r\n                    Account CDIR <b className=\"fontRed\">*</b>\r\n                  </>\r\n                }\r\n                placeholder=\"Account CDIR\"\r\n                onChange={this.props.handleChange(\"CDIR\")}\r\n                defaultValue={this.props.CDIR }\r\n                required\r\n              />\r\n            </Column>\r\n            <Column>\r\n            <TextInput\r\n                className=\"labelFont\"\r\n                id=\"accountGbgid\"\r\n                name=\"GBGID\"\r\n                labelText={\r\n                  <>\r\n                    Account GBGID <b className=\"fontRed\">*</b>\r\n                  </>\r\n                }\r\n                placeholder=\"Account GBGID\"\r\n                onChange={(e) => {\r\n                  let gbgidValue = e.target.value.trim();\r\n                  let RegEx = /^[a-z0-9]+$/i;\r\n                  let isInvalid = !(RegEx.test(gbgidValue));\r\n                  if(gbgidValue.length>15){\r\n                      //show error\r\n                      e.target.setCustomValidity(\r\n                        \"Only 15 characters are allowed\"\r\n                      );\r\n                  }\r\n                  if(isInvalid){\r\n                    e.target.setCustomValidity(\r\n                      \"Only alphanumeric data is allowed\"\r\n                    );\r\n                      \r\n                  }\r\n                  else e.target.setCustomValidity(\"\");\r\n                  this.props.handleChange(\"GBGID\")(e);\r\n                  \r\n                }}\r\n                defaultValue={this.props.GBGID }\r\n                length={15}\r\n                required\r\n              /></Column>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Column>\r\n              <TextInput\r\n                className=\"labelFont\"\r\n                id=\"accountDpeName\"\r\n                name=\"dpeAdminName\"\r\n                labelText={\r\n                  <>\r\n                    Account DPE Name <b className=\"fontRed\">*</b>\r\n                  </>\r\n                }\r\n                placeholder=\"Account DPE Name\"\r\n                onChange={this.props.handleChange(\"dpeAdminName\")}\r\n                defaultValue={this.props.dpeAdminName}\r\n                required\r\n              />\r\n            </Column>\r\n            <Column>\r\n              <TextInput\r\n                type=\"email\"\r\n                className=\"labelFont\"\r\n                id=\"accountDpeEmail\"\r\n                name=\"dpeAdminEmail\"\r\n                labelText={\r\n                  <>\r\n                    Account DPE Email <b className=\"fontRed\">*</b>\r\n                  </>\r\n                }\r\n                placeholder=\"Account DPE Email\"\r\n                onChange={(e) => {\r\n                  const email = e.target.value.trim();\r\n                  const allowedDomains = process.env.REACT_APP_ALLOWED_DOMAINS?.split(\",\") || []\r\n                  const validDomain = allowedDomains.find(domain => email.toLowerCase().includes(domain + \".\"));\r\n                  const validEmail = email.toLowerCase().includes(\".\" + enterprise.toLowerCase() + \".\") || email.toLowerCase().includes(\"@\" + enterprise.toLowerCase() + \".\");\r\n                  if (!validDomain || !validEmail)\r\n                    e.target.setCustomValidity(\r\n                      \"Please provide a valid \" + enterprise + \" email id\"\r\n                    );\r\n                  else e.target.setCustomValidity(\"\");\r\n                  this.props.handleChange(\"dpeAdminEmail\")(e);\r\n                }}\r\n                defaultValue={this.props.dpeAdminEmail}\r\n                required\r\n              />\r\n            </Column>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Column>\r\n              <TextInput\r\n                className=\"labelFont\"\r\n                id=\"ItsmAdminName\"\r\n                name=\"itsmAdminName\"\r\n                labelText={\r\n                  <>\r\n                    ITSM System Admin Name <b className=\"fontRed\">*</b>\r\n                  </>\r\n                }\r\n                placeholder=\"ITSM System Admin Name\"\r\n                onChange={this.props.handleChange(\"itsmAdminName\")}\r\n                defaultValue={this.props.itsmAdminName}\r\n                required\r\n              />\r\n            </Column>\r\n            <Column>\r\n              <TextInput\r\n                type=\"email\"\r\n                className=\"labelFont\"\r\n                name=\"itsmAdminEmail\"\r\n                id=\"ItsmAdminEmail\"\r\n                labelText={\r\n                  <>\r\n                    ITSM System Admin Email <b className=\"fontRed\">*</b>\r\n                  </>\r\n                }\r\n                placeholder=\"ITSM System Admin Email\"\r\n                onChange={(e) => {\r\n                  const email = e.target.value.trim();\r\n                  const allowedDomains = process.env.REACT_APP_ALLOWED_DOMAINS?.split(\",\") || []\r\n                  const validDomain = allowedDomains.find(domain => email.toLowerCase().includes(domain + \".\"));\r\n                  const validEmail = email.toLowerCase().includes(\".\" + enterprise.toLowerCase() + \".\") || email.toLowerCase().includes(\"@\" + enterprise.toLowerCase() + \".\");\r\n                  if (!validDomain || !validEmail)\r\n                    e.target.setCustomValidity(\r\n                      \"Please provide a valid \" + enterprise + \" email id\"\r\n                    );\r\n                  else e.target.setCustomValidity(\"\");\r\n                  this.props.handleChange(\"itsmAdminEmail\")(e);\r\n                }}\r\n                defaultValue={this.props.itsmAdminEmail}\r\n                required\r\n              />\r\n            </Column>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Column>\r\n              <TextInput\r\n                className=\"labelFont\"\r\n                id=\"networkAdminName\"\r\n                name=\"networkAdminName\"\r\n                labelText=\"Network Admin Name\"\r\n                placeholder=\"Network Admin Name\"\r\n                onChange={this.props.handleChange(\"networkAdminName\")}\r\n                defaultValue={values?.networkAdminName}\r\n              />\r\n            </Column>\r\n            <Column>\r\n              <TextInput\r\n                className=\"labelFont\"\r\n                id=\"networkAdminEmail\"\r\n                name=\"networkAdminEmail\"\r\n                labelText=\"Network Admin Email\"\r\n                placeholder=\"Network Admin Email\"\r\n                onChange={(e) => {\r\n                  const email = e.target.value.trim();\r\n                  const allowedDomains = process.env.REACT_APP_ALLOWED_DOMAINS?.split(\",\") || []\r\n                  const validDomain = allowedDomains.find(domain => email.toLowerCase().includes(domain + \".\"));\r\n                  const validEmail = email.toLowerCase().includes(\".\" + enterprise.toLowerCase() + \".\") || email.toLowerCase().includes(\"@\" + enterprise.toLowerCase() + \".\");\r\n                  if (!validDomain || !validEmail)\r\n                    e.target.setCustomValidity(\r\n                      \"Please provide a valid \" + enterprise + \" email id\"\r\n                    );\r\n                  else {\r\n                    e.target.setCustomValidity(\"\");\r\n                    this.props.handleChange(\"networkAdminEmail\")(e);\r\n                  }\r\n                }}\r\n                defaultValue={values?.networkAdminEmail}\r\n              />\r\n            </Column>\r\n          </Row>\r\n          <Row>\r\n            <div className=\"btnDivAA\"></div>\r\n          </Row>\r\n        </Grid>\r\n        <div className=\"btnCommon\">\r\n            <div>\r\n                {savedBtn}\r\n            </div>\r\n            <Button type=\"submit\" className=\"btnMargin btnLast\">\r\n            Continue{\" \"}\r\n            </Button>\r\n        </div>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GeneralInfo;\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\AAForm\\configInfoForm.jsx",["1028","1029","1030","1031","1032","1033","1034","1035","1036","1037","1038","1039","1040","1041","1042","1043","1044","1045","1046","1047","1048","1049","1050","1051","1052","1053","1054","1055","1056","1057","1058","1059","1060","1061","1062","1063","1064","1065","1066","1067","1068","1069","1070","1071","1072","1073","1074","1075","1076","1077","1078"],"// ConfigForm.jsx\r\nimport React, { Component } from \"react\";\r\nimport AddWorkspace from \"./AddWorkspace\";\r\nimport { throws } from \"assert\";\r\nimport {\r\n  Modal,\r\n  Button,\r\n  Checkbox,\r\n  Column,\r\n  FormGroup,\r\n  Grid,\r\n  Row,\r\n  Select,\r\n  SelectItem,\r\n  TextInput,\r\n  Form,\r\n  ModalWrapper,\r\n  FormLabel,\r\n} from \"carbon-components-react\";\r\n//   import React, { Component } from \"react\";\r\nimport \"../form.scss\";\r\nimport { Add32 } from \"@carbon/icons-react\";\r\nimport { TrashCan32 } from \"@carbon/icons-react\";\r\nimport { Close32 } from \"@carbon/icons-react\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport AddRules from \"./AddRulesModal\";\r\nimport { Tooltip } from \"carbon-components-react/lib/components/Tooltip/Tooltip\";\r\n//   import \"./validationForm.js\"\r\n//   import $ from 'jquery';\r\n//   import ButtonsForm from '../Buttons';\r\nclass ConfigForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      //     AccData: [],\r\n      showPopup: false,\r\n      workspaceData: [],\r\n      encryptedData: [],\r\n      groupField: [true],\r\n      channelField: [true],\r\n      collaborationTool: \"Slack\",\r\n      defaultassignments: '',\r\n      teamName: \"\",\r\n      teamId: \"\",\r\n      workspaceName: \"\",\r\n      region:\"\"\r\n    };\r\n    this.loadData = this.loadData.bind(this);\r\n    this.loadWorkspace = this.loadWorkspace.bind(this);\r\n  }\r\n\r\n  debouncer = (time) => {\r\n    let timer;\r\n    return (e) => {\r\n      clearTimeout(timer);\r\n      timer = setTimeout(async () => {\r\n        const { value } = e.target;\r\n        if (!value) {\r\n          e.target.setCustomValidity(\"\");\r\n          return;\r\n        }\r\n        if (\r\n          this.props.AccData.accountsData?.accountCDIC &&\r\n          value === this.props.AccData.accountsData?.accountCDIC\r\n        ) {\r\n          this.props.handleChange(\"aiopsAccIdentifier\")(e);\r\n          e.target.setCustomValidity(\"\");\r\n          return;\r\n        }\r\n        e.target.setCustomValidity(\"Verifying......\");\r\n        const response = await this.validateCdic(value.trim());\r\n        if (response.valid) {\r\n          this.props.handleChange(\"aiopsAccIdentifier\")(e);\r\n          e.target.setCustomValidity(\"\");\r\n        } else {\r\n          e.target.setCustomValidity(response.message);\r\n        }\r\n      }, time);\r\n    };\r\n  };\r\n\r\n  validateCdic = async (cdic) => {\r\n    try {\r\n      const response = await fetch(\"/mui/validateCdic\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ cdic }),\r\n      });\r\n\r\n      return response.json();\r\n    } catch (error) {\r\n      return {\r\n        valid: false,\r\n        message: \"Invalid value!\",\r\n      };\r\n    }\r\n  };\r\n\r\n  validateEmails = async (emailArr, collaborationToolUsed) => {\r\n\r\n    const { AccData, workspace } = this.props;\r\n    try {\r\n      var workspaceObj = AccData?.accountsData?.workspaceList?.find(\r\n        (value) => value?.name == workspace\r\n      );\r\n      if(!workspaceObj){\r\n        throw \"Please select workspace then enter email Ids\"\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        valid: false,\r\n        message: \"Please select workspace then enter email Ids\",\r\n      };\r\n    }\r\n    const data = {\r\n      emails: emailArr,\r\n      workspaceToken: workspaceObj?.bot?.tokens?.xoxb,\r\n      collaborationTool: collaborationToolUsed,\r\n      region:workspaceObj?.region\r\n    }\r\n    try {\r\n      const response = await fetch(\"/mui/validateEmails\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      return response.json();\r\n    } catch (error) {\r\n      return {\r\n        valid: false,\r\n        message: \"Invalid Email!\",\r\n      };\r\n    }\r\n  };\r\n\r\n  addGroup = () => {\r\n    const { groupField } = this.state;\r\n    groupField.push(true);\r\n    this.setState({\r\n      groupField,\r\n    });\r\n  };\r\n\r\n  deleteGroup = (index) => {\r\n    const { groupField } = this.state;\r\n\r\n    if ((groupField.deleted || 0) >= groupField.length - 1) return;\r\n\r\n    groupField[index] = false;\r\n    groupField.deleted = groupField.deleted + 1 || 1;\r\n    this.setState({\r\n      groupField,\r\n    });\r\n    delete this.props.values[\"groupName\" + index]\r\n    delete this.props.values[\"groupRules\" + index]\r\n  };\r\n\r\n  addChannel = () => {\r\n    const { channelField } = this.state;\r\n    channelField.push(true);\r\n    this.setState({\r\n      channelField,\r\n    });\r\n  };\r\n\r\n  deleteChannel = (index) => {\r\n    const { channelField } = this.state;\r\n\r\n    if ((channelField.deleted || 0) >= channelField.length - 1) return;\r\n\r\n    channelField[index] = false;\r\n    channelField.deleted = channelField.deleted + 1 || 1;\r\n    this.setState({\r\n      channelField,\r\n    });\r\n    delete this.props.values[\"indexChannel\" + index]\r\n    delete this.props.values[\"channelRules\" + index]\r\n    delete this.props.values[\"workspaceRules\" + index]\r\n  };\r\n\r\n  showModal = (e) => {\r\n    this.setState({\r\n      showPopup: true,\r\n    });\r\n  };\r\n  handleInputChange = (e) => {\r\n    if (\r\n      (e.target.value &&\r\n        e.target.value.includes(\"script\") &&\r\n        e.target.value.includes(\"<\")) ||\r\n      e.target.value.includes(\">\")\r\n    ) {\r\n      this.setState({\r\n        [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n      });\r\n      return;\r\n    }\r\n    // if (\r\n    //   e.target.name == \"signingSecret\" ||\r\n    //   e.target.name == \"xoxp\" ||\r\n    //   e.target.name == \"xoxb\"\r\n    // ) {\r\n    //   this.setState({\r\n    //     [e.target.name]: e.target.value,\r\n    //   });\r\n    //   const workspaceDataToEncrypt = {\r\n    //     signingSecret: this.state.signingSecret,\r\n    //     xoxb: this.state.xoxb,\r\n    //     xoxp: this.state.xoxp,\r\n    //   };\r\n    //   trackPromise(\r\n    //     fetch(\"/mui/encryptSecret\", {\r\n    //       method: \"POST\",\r\n    //       headers: {\r\n    //         \"Content-type\": \"application/json\",\r\n    //       },\r\n    //       body: JSON.stringify(workspaceDataToEncrypt),\r\n    //     }).then((result) => {\r\n    //       result.json();\r\n    //       if (result.status == 200) {\r\n    //         this.loadData();\r\n    //       }\r\n    //     })\r\n    //   );\r\n    // } else {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n    // }\r\n  };\r\n  updateValue = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  loadData = () => {\r\n    trackPromise(\r\n      fetch(\"/mui/encryptSecret\")\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((encryptedData) => {\r\n          this.setState({ encryptedData }, () => {});\r\n          // this.setState({ encryptedData }, function () {\r\n          // });\r\n          // this.setState({ encryptedData })\r\n        })\r\n    );\r\n  };\r\n  loadWorkspace = () => {\r\n    trackPromise(\r\n      fetch(\"/mui/onboardAccountFormData\")\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((AccData) => {\r\n          this.props.registerState(\"AccData\", AccData);\r\n        })\r\n    );\r\n  };\r\n  componentDidMount() {\r\n\r\n\r\n    //this.setState({ AccData })\r\n    let { groupList, workspaceIndexChannel } =\r\n      this.props.AccData.accountsData;\r\n      groupList = groupList && Object.entries(groupList);\r\n    workspaceIndexChannel =\r\n      workspaceIndexChannel && Object.entries(workspaceIndexChannel);\r\n    if (groupList && groupList.length) {\r\n      this.setState({\r\n        groupField: groupList,\r\n      });\r\n    }\r\n    if (workspaceIndexChannel && workspaceIndexChannel.length) {\r\n      this.setState({\r\n        channelField: workspaceIndexChannel,\r\n      });\r\n    }\r\n    //this.props.registerState(\"indexChannel\",(this.state.channelField))\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const collabConfig = this.props.values.collabConfig;\r\n    if(prevProps.values.collaborationTool !== this.props.values.collaborationTool && collabConfig){\r\n      let {  workspaceIndexChannel} = this.props.AccData.accountsData;\r\n      if(workspaceIndexChannel){  \r\n        workspaceIndexChannel = workspaceIndexChannel && Object.entries(workspaceIndexChannel);\r\n        let teamsCollabconfig, slackCollabconfig;\r\n\r\n        if(this.props.values.collaborationTool.toLowerCase() === 'teams'){\r\n          if(collabConfig['teams']){\r\n            teamsCollabconfig = collabConfig['teams'];\r\n          }\r\n          for(let i=0; i< workspaceIndexChannel.length; i++){\r\n            if(teamsCollabconfig && Object.keys(teamsCollabconfig).length > 0){\r\n              workspaceIndexChannel[i][0] = teamsCollabconfig.defaultindexchannels[i]['channel'];\r\n              workspaceIndexChannel[i][1][1] = teamsCollabconfig.defaultindexchannels[i]['workspaceName'];\r\n            }else {\r\n              // set blank values\r\n            }\r\n            \r\n          }\r\n        }else {\r\n          if(collabConfig['slack']){\r\n            slackCollabconfig = collabConfig['slack'];\r\n          }\r\n          for(let i=0; i< workspaceIndexChannel.length; i++){\r\n            if(slackCollabconfig && Object.keys(slackCollabconfig).length > 0){\r\n              workspaceIndexChannel[i][0] = slackCollabconfig.defaultindexchannels[i]['channel'];\r\n              workspaceIndexChannel[i][1][1] = slackCollabconfig.defaultindexchannels[i]['workspaceName'];\r\n            }else {\r\n              // set blank values\r\n            }\r\n            \r\n          }\r\n        }\r\n\r\n        this.setState({\r\n          channelField: workspaceIndexChannel,\r\n        });\r\n      }\r\n    }\r\n    \r\n  }\r\n  handleWorkspaceChange = () => {\r\n\r\n  }\r\n  saveAndContinue = (e) => {\r\n    e.preventDefault();\r\n    const {\r\n      defaultassignments,\r\n      assignmentServiceToAssignResource,\r\n      squadBasedAssignment,\r\n      groupAssignment,\r\n    } = this.props;\r\n      if (\r\n        !(\r\n          defaultassignments ||\r\n          assignmentServiceToAssignResource ||\r\n          squadBasedAssignment == \"yes\" ||\r\n          groupAssignment == \"yes\"\r\n        )\r\n      ) {\r\n        this.setState({\r\n          error: \"Please select atleast one Assignment Service\",\r\n        });\r\n        return;\r\n      }\r\n    // if(this.props.collaborationTool.toLowerCase() ===  'teams'){\r\n    //   this.props.setdefaultFunctionalId(defaultassignments)\r\n    // }\r\n    this.props.onSubmit(\"config\");\r\n    this.props.nextStep();\r\n  };\r\n  submitAndContinue = (e) => {\r\n    e.preventDefault();\r\n    var saved = false;\r\n    var submitted = false;\r\n    if (e.target.className.includes(\"saveData\")) {\r\n      saved = true;\r\n      submitted = false;\r\n    } else {\r\n      saved = false;\r\n      submitted = true;\r\n    }\r\n\r\n    this.props.submitForm(saved);\r\n    // this.props.submitForm();\r\n  };\r\n  cancelModal = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      showPopup: false,\r\n    });\r\n  };\r\n\r\n  saveWorkspace = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n      showPopup: false,\r\n    });\r\n\r\n    //Save workspace when Slack selected\r\n    if(this.props.values.collaborationTool === 'Slack'){\r\n    const workspaceData = {\r\n      _id: this.props.AccData.accountsData._id,\r\n      accCode: this.props.AccData.accountsData.accountCode,\r\n      accName: this.props.AccData.accountsData.accountName,\r\n      workspaceAdmin: this.state.workspaceAdmin,\r\n      workspaceEmail: this.state.workspaceEmail,\r\n      signingSecret: this.state.signingSecret,\r\n      xoxb: this.state.xoxb,\r\n      xoxp: this.state.xoxp,\r\n      workspaceType : \"SLACK\"\r\n    };\r\n\r\n    trackPromise(\r\n      fetch(\"/mui/addWorkspace\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(workspaceData),\r\n      }).then(async (result) => {\r\n        if (result.status == 200) {\r\n          e.preventDefault();\r\n          this.setState({\r\n            showPopup: false,\r\n            invalidMsg: undefined,\r\n          });\r\n          this.loadWorkspace();\r\n          //   window.location.href = \"/addAccount\";\r\n        } else {\r\n          const parsedMsz = await result.json();\r\n          this.setState({\r\n            showPopup: true,\r\n            invalidMsg: parsedMsz.message,\r\n          });\r\n        }\r\n        //   window.location.href = \"/addAccount\";\r\n      })\r\n    );\r\n  }\r\n  //Save workspace when Teams selected\r\n    if(this.props.values.collaborationTool === 'Teams'){\r\n      const teamsWorkspaceData = {\r\n        accCode: this.props.AccData.accountsData.accountCode,\r\n        teamName: this.state.teamName,\r\n        teamId: this.state.teamId,\r\n        // workspaceName: this.state.workspaceName,\r\n        workspaceType:\"TEAMS\",\r\n        region: this.state.region,\r\n      }\r\n      trackPromise(\r\n        fetch(\"/mui/addTeamsWorkspace\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(teamsWorkspaceData),\r\n        }).then(async (result) => {\r\n          if (result.status == 200) {\r\n            this.setState({\r\n              showPopup: false,\r\n              invalidMsg: undefined,\r\n            });\r\n            this.loadWorkspace();\r\n          } else {\r\n            const parsedMsz = await result.json();\r\n            this.setState({\r\n              showPopup: true,\r\n              invalidMsg: parsedMsz.message,\r\n            });\r\n          }\r\n          //   window.location.href = \"/addAccount\";\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  back = (e) => {\r\n    e.preventDefault();\r\n    this.props.prevStep();\r\n  };\r\n\r\n  handleWorkspaceRegion = (e) => {\r\n    console.log(e.target.value);\r\n    this.setState({region: e.target.value})\r\n  }\r\n\r\n  render() {\r\n    const { values } = this.props;\r\n    var accData = this.props.AccData;\r\n    const itemsLanguage = [];\r\n    var formOptionLang = \"\";\r\n    const itemsWorkspace = [];\r\n    const itemsSquadGeo = [];\r\n    var formOptionWorkspace = \"\";\r\n    var formOptionSquadGeo = \"\";\r\n    var signingSecret = \"\";\r\n    var xoxb = \"\";\r\n    var xoxp = \"\";\r\n    var signingSecretElement = \"\";\r\n    var xoxpElement = \"\";\r\n    var xoxbElement = \"\";\r\n    var p2Priority = false;\r\n    var p3Priority = false;\r\n    var p4Priority = false;\r\n    var checkboxChecked = \"\";\r\n    if (this.state.encryptedData.encrypted != undefined) {\r\n      var stateData = this.props.encryptedData.encrypted;\r\n      signingSecret = stateData.signingSecret;\r\n      xoxb = stateData.xoxb;\r\n      xoxp = stateData.xoxp;\r\n      signingSecretElement = (\r\n        <TextInput\r\n          className=\"bx--text-input bx--text__input\"\r\n          id=\"signingSecret\"\r\n          name=\"signingSecret\"\r\n          // type=\"password\"\r\n          labelText={\r\n            <>\r\n              Workspace Signing Secret <b className=\"fontRed\">*</b>\r\n            </>\r\n          }\r\n          placeholder={signingSecret}\r\n          onBlur={(e) => this.handleInputChange(e)}\r\n          onChange={(e) => this.updateValue(e)}\r\n          // defaultValue = {signingSecret}\r\n          defaultValue={signingSecret}\r\n          value={signingSecret}\r\n        />\r\n      );\r\n      xoxbElement = (\r\n        <TextInput\r\n          className=\"bx--text-input bx--text__input\"\r\n          id=\"xoxb\"\r\n          name=\"xoxb\"\r\n          // type=\"password\"\r\n          // defaultValue={xoxb}\r\n          labelText={\r\n            <>\r\n              Workspace xoxb Token <b className=\"fontRed\">*</b>\r\n            </>\r\n          }\r\n          placeholder={xoxb}\r\n          defaultValue={xoxb}\r\n          value={xoxb}\r\n          onBlur={(e) => this.handleInputChange(e)}\r\n          onChange={(e) => this.updateValue(e)}\r\n        />\r\n      );\r\n      xoxpElement = (\r\n        <TextInput\r\n          className=\"bx--text-input bx--text__input\"\r\n          id=\"xoxp\"\r\n          // type=\"password\"\r\n          name=\"xoxp\"\r\n          labelText={\r\n            <>\r\n              Workspace xoxp Token <b className=\"fontRed\">*</b>\r\n            </>\r\n          }\r\n          placeholder={xoxp}\r\n          onBlur={(e) => this.handleInputChange(e)}\r\n          onChange={(e) => this.updateValue(e)}\r\n          // defaultValue={xoxp}\r\n          defaultValue={xoxp}\r\n          value={xoxp}\r\n        />\r\n      );\r\n    } else {\r\n      signingSecret = \"\";\r\n      xoxb = \"\";\r\n      xoxp = \"\";\r\n      signingSecretElement = (\r\n        <TextInput\r\n          className=\"bx--text-input bx--text__input\"\r\n          id=\"signingSecret\"\r\n          name=\"signingSecret\"\r\n          // type=\"password\"\r\n          labelText={\r\n            <>\r\n              Workspace Signing Secret <b className=\"fontRed\">*</b>\r\n            </>\r\n          }\r\n          placeholder=\"Workspace Signing Secret\"\r\n          onBlur={(e) => this.handleInputChange(e)}\r\n          onChange={(e) => this.updateValue(e)}\r\n          defaultValue={signingSecret}\r\n        />\r\n      );\r\n      xoxbElement = (\r\n        <TextInput\r\n          className=\"bx--text-input bx--text__input\"\r\n          id=\"xoxb\"\r\n          name=\"xoxb\"\r\n          // type=\"password\"\r\n          defaultValue={xoxb}\r\n          labelText={\r\n            <>\r\n              Workspace xoxb Token <b className=\"fontRed\">*</b>\r\n            </>\r\n          }\r\n          placeholder={xoxb}\r\n          onBlur={(e) => this.handleInputChange(e)}\r\n          onChange={(e) => this.updateValue(e)}\r\n        />\r\n      );\r\n      xoxpElement = (\r\n        <TextInput\r\n          className=\"bx--text-input bx--text__input\"\r\n          id=\"xoxp\"\r\n          // type=\"password\"\r\n          name=\"xoxp\"\r\n          labelText={\r\n            <>\r\n              Workspace xoxp Token <b className=\"fontRed\">*</b>\r\n            </>\r\n          }\r\n          placeholder=\"Workspace xoxp Token\"\r\n          // onBlur={this.handleInputChange}\r\n          onBlur={(e) => this.handleInputChange(e)}\r\n          onChange={(e) => this.updateValue(e)}\r\n          defaultValue={xoxp}\r\n        />\r\n      );\r\n    }\r\n    var editFlag = false\r\n    var workspaceModal = \"\";\r\n    if (accData.length !== 0) {\r\n        editFlag= true;\r\n      var accountsData = accData.accountsData;\r\n      var languageArr = accountsData.languageList;\r\n      var submitted = accountsData.submitted;\r\n      var saved = accountsData.saved;\r\n      var workspaceArr = accountsData.workspaceList;\r\n      var squadGeoList = accountsData.squadGeoList;\r\n      var enterprise = accountsData.enterprise;\r\n      var priorityList = [];\r\n    if(accountsData.allowedPriorities != undefined){\r\n        priorityList = accountsData.allowedPriorities;\r\n    }else{\r\n        priorityList = [\"1\"];\r\n    }\r\n    for(var i = 0; i<priorityList.length;i++){\r\n        if(priorityList[i] == \"2\"){\r\n          p2Priority = true; \r\n        }\r\n        if(priorityList[i] == \"3\"){\r\n          p3Priority = true;\r\n        }else if(priorityList[i] == \"4\"){\r\n          p4Priority = true;\r\n        }\r\n    }\r\n      \r\n\r\n      var savedBtn = \"\";\r\n      if (submitted == false && (saved == true || saved == false)) {\r\n        savedBtn = (\r\n          <Button\r\n            className=\"btnMargin saveData\"\r\n            kind=\"secondary\"\r\n            onClick={this.submitAndContinue}\r\n          >\r\n            Save\r\n          </Button>\r\n        );\r\n      }\r\n      if (submitted == true && (saved == true || saved == false)) {\r\n        savedBtn = \"\";\r\n      }\r\n      Object.entries(languageArr).map(([key, value]) => {\r\n        if (value.languageName != \"English\") {\r\n          formOptionLang = (\r\n            <option\r\n              className=\"bx--select-option\"\r\n              defaultValue={value.languageName}\r\n              selected={value.languageName == accountsData.defaultLanguage}\r\n            >\r\n              {value.languageName}\r\n            </option>\r\n          );\r\n          itemsLanguage.push(formOptionLang);\r\n        }\r\n      });\r\n      \r\n      if(this.props.values.collaborationTool === \"Teams\" ){\r\n        workspaceArr = workspaceArr.filter(workspaceObj => {\r\n          if(workspaceObj.workspaceType){\r\n              if(workspaceObj.workspaceType.toLowerCase() === 'teams'){\r\n                  return workspaceObj;\r\n              }\r\n          }\r\n      })\r\n      }else {\r\n        workspaceArr = workspaceArr.filter(workspaceObj => {\r\n          if(workspaceObj.workspaceType){\r\n              if(workspaceObj.workspaceType.toLowerCase() !== 'teams'){\r\n                  return workspaceObj;\r\n              }\r\n          }else {\r\n              return workspaceObj;\r\n          }\r\n      })\r\n      }\r\n      Object.entries(workspaceArr).map(([key, value]) => {\r\n        if(this.props.values.collaborationTool === \"Teams\"){\r\n          if(value.workspaceType && value.workspaceType.toLowerCase() === 'teams'){\r\n            formOptionWorkspace = (\r\n              <option\r\n                className=\"bx--select-option\"\r\n                defaultValue={value.name}\r\n                selected={value.name == accountsData.is_GTSWorkspaceInUse}\r\n              >\r\n                {value.name}\r\n              </option>\r\n            );\r\n            itemsWorkspace.push(formOptionWorkspace);\r\n          }\r\n        }else {\r\n          \r\n          if(!value.workspaceType || value.workspaceType.toLowerCase() !== 'teams'){\r\n            formOptionWorkspace = (\r\n              <option\r\n                className=\"bx--select-option\"\r\n                defaultValue={value.name}\r\n                selected={value.name == accountsData.is_GTSWorkspaceInUse}\r\n              >\r\n                {value.name}\r\n              </option>\r\n            );\r\n            itemsWorkspace.push(formOptionWorkspace);\r\n          }\r\n        }\r\n      });\r\n      for (var i = 0; i < squadGeoList.length; i++) {\r\n        formOptionSquadGeo = (\r\n          <option\r\n            className=\"bx--select-option\"\r\n            defaultValue={squadGeoList[i]}\r\n            selected={squadGeoList[i] == accountsData.squadGeo}\r\n          >\r\n            {squadGeoList[i]}\r\n          </option>\r\n        );\r\n        itemsSquadGeo.push(formOptionSquadGeo);\r\n      }\r\n    }else{\r\n        editFlag = false;\r\n    }\r\n\r\n    const addWorkspaceSlackForm = (\r\n      <Form>\r\n        <TextInput\r\n          className=\"bx--text-input bx--text__input\"\r\n          id=\"workspaceAdmin\"\r\n          name=\"workspaceAdmin\"\r\n          labelText=\"Slack Workspace Admin Name\"\r\n          placeholder=\"Slack Workspace Admin Name\"\r\n          onBlur={this.handleInputChange}\r\n        />\r\n        <br />\r\n\r\n        <TextInput\r\n          className=\"bx--text-input bx--text__input\"\r\n          id=\"workspaceEmail\"\r\n          name=\"workspaceEmail\"\r\n          labelText=\"Slack Workspace Admin Email\"\r\n          placeholder=\"Slack Workspace Admin Email\"\r\n          onBlur={this.handleInputChange}\r\n        />\r\n        <br />\r\n        {signingSecretElement}\r\n        <br />\r\n        {xoxpElement}\r\n        <br />\r\n        {xoxbElement}\r\n      </Form>\r\n    );\r\n   const itemsWorkspaceRegion = this.props.AccData.accountsData.workspaceRegions.map(workspaceRegion => {\r\n    return formOptionWorkspace = (\r\n        <option\r\n          className=\"bx--select-option\"\r\n          defaultValue={workspaceRegion}\r\n          selected={workspaceRegion == this.state.region}\r\n        >\r\n          {workspaceRegion}\r\n        </option>\r\n      );\r\n    \r\n   });\r\n    const addWorkspaceTeamsForm = (\r\n      <Form>\r\n        <Select\r\n          className=\"labelFont\"\r\n          id=\"workspaceRegions\"\r\n          labelText={\r\n            <span>\r\n              Region <b className=\"fontRed\">*</b>\r\n              <Tooltip>Region</Tooltip>\r\n            </span>\r\n          }\r\n          name=\"workspaceRegions\"\r\n          // onChange={this.props.handleChange(\"workspaceRegions\")}\r\n          onChange={(e) => this.handleWorkspaceRegion(e)}\r\n          defaultValue={this.state.region || \"\"}\r\n          value={this.state.region}\r\n          required=\"required\"\r\n        >\r\n          {/* <SelectItem value=\"NA\" text=\"NA\" />\r\n          <SelectItem value=\"EU\" text=\"EU\" /> */}\r\n          <SelectItem hidden value=\"\" text=\"Choose an option\" />\r\n                      {itemsWorkspaceRegion}\r\n        </Select>\r\n        {/* <TextInput\r\n          className=\"bx--text-input bx--text__input\"\r\n          id=\"workspaceName\"\r\n          name=\"workspaceName\"\r\n          labelText={\r\n            <span>\r\n              Workspace Name <b className=\"fontRed\">*</b>\r\n              <Tooltip>Workspace Name</Tooltip>\r\n            </span>\r\n          }\r\n          placeholder=\"Workspace Name\"\r\n          value={this.state.workspaceName}\r\n          onBlur={(e) => this.handleInputChange(e)}\r\n          onChange={(e) => this.updateValue(e)}\r\n          // defaultValue = {signingSecret}\r\n          defaultValue={this.state.workspaceName}\r\n        /> */}\r\n        <TextInput\r\n          className=\"bx--text-input bx--text__input\"\r\n          id=\"teamName\"\r\n          name=\"teamName\"\r\n          labelText={\r\n            <span>\r\n              Team Name<b className=\"fontRed\">*</b>\r\n              <Tooltip>MS Team Name</Tooltip>\r\n            </span>\r\n          }\r\n          placeholder=\"Team Name\"\r\n          value={this.state.teamName}\r\n          onBlur={(e) => this.handleInputChange(e)}\r\n          onChange={(e) => this.updateValue(e)}\r\n          // defaultValue = {signingSecret}\r\n          defaultValue={this.state.teamName}\r\n          required\r\n        />\r\n        <TextInput\r\n          className=\"bx--text-input bx--text__input\"\r\n          id=\"teamId\"\r\n          name=\"teamId\"\r\n          labelText= {\r\n            <span>\r\n              Team Id<b className=\"fontRed\">*</b>\r\n              <Tooltip>MS Team Id</Tooltip>\r\n              <a className=\"addWorkspaceLink\" href={`/mui/extract-team-ids`} target=\"_blank\" rel=\"noreferrer\">Get Team Id</a>\r\n            </span>\r\n          }\r\n          placeholder=\"Team Id\"\r\n          value={this.state.teamId}\r\n          onBlur={(e) => this.handleInputChange(e)}\r\n          onChange={(e) => this.updateValue(e)}\r\n          // defaultValue = {signingSecret}\r\n          defaultValue={this.state.teamId}\r\n          required\r\n        />\r\n        <br />\r\n        <span>Click on the 'Get team id' link to fetch the team id and for instruction <a className=\"bx--link\" href={`https://kyndryl.sharepoint.com/sites/ChatOps/SitePages/MS-Teams.aspx`} target=\"_blank\" rel=\"noreferrer\">MS Teams (sharepoint.com)</a></span>\r\n        <br />\r\n        <br />\r\n        <br />\r\n      </Form>\r\n    );\r\n\r\n\r\n    return (\r\n      <div>\r\n        <Form color=\"blue\" onSubmit={this.saveAndContinue}>\r\n          <Grid>\r\n            <Row>\r\n              <Column>\r\n                <Select\r\n                  className=\"labelFont\"\r\n                  id=\"collaborationTool\"\r\n                  labelText={\r\n                    <span>\r\n                      Collaboration Tool <b className=\"fontRed\">*</b>\r\n                      <Tooltip>Collaborative Chat Plateform</Tooltip>\r\n                    </span>\r\n                  }\r\n                  name=\"collaborationTool\"\r\n                  onChange={this.props.handleChange(\"collaborationTool\")}\r\n                  defaultValue={this.props.collaborationTool}\r\n                  required\r\n                >\r\n                  <SelectItem value=\"Slack\" text=\"Slack\" />\r\n                  <SelectItem value=\"Teams\" text=\"Teams\" />\r\n                </Select>\r\n              </Column>\r\n              <Column>\r\n                <div className=\"addWorkspaceDivMain\">\r\n                  <div className=\"workspaceDiv\">\r\n                    <Select\r\n                      className=\"labelFont\"\r\n                      id=\"workspace\"\r\n                      labelText={\r\n                        <span>\r\n                          Select/Add Workspace <b className=\"fontRed\">*</b>\r\n                          <Tooltip>\r\n                            Workspace is made up of channels <br />\r\n                            where user can can communicate and work together.\r\n                            User either can select existing workspace or add new\r\n                            workspace by giving appropriate details\r\n                          </Tooltip>\r\n                          <a\r\n                            className=\"addWorkspaceLink\"\r\n                            onClick={(e) => {\r\n                              this.showModal();\r\n                            }}\r\n                          >\r\n                            Add Workspace\r\n                          </a>\r\n                        </span>\r\n                      }\r\n                      name=\"workspace\"\r\n                      onChange={this.props.handleChange(\"workspace\")}\r\n                      // onChange={() => this.handleWorkspaceChange()}\r\n                      defaultValue={this.props.workspace}\r\n                      value={this.props.workspace || ''}\r\n                      required\r\n                    >\r\n                      <SelectItem hidden value=\"\" text=\"Choose an option\" />\r\n                      {itemsWorkspace}\r\n                    </Select>\r\n                    {/* <button onClick={this.togglePopup}>show popup</button> */}\r\n                    {this.state.showPopup ? (\r\n                      <div className=\"popup\">\r\n                        <div className=\"bx--modal-container modal-css\">\r\n                          <div className=\"bx--modal-header\">\r\n                            <p\r\n                              className=\"bx--modal-header__label bx--type-delta\"\r\n                              id=\"modal-addWorkspace-label\"\r\n                            ></p>\r\n                            <p\r\n                              className=\"bx--modal-header__heading bx--type-beta\"\r\n                              id=\"modal-addWorkspace-heading\"\r\n                            >\r\n                              Add Workspace\r\n                            </p>\r\n                            <button\r\n                              className=\"bx--modal-close\"\r\n                              type=\"button\"\r\n                              data-modal-close\r\n                              aria-label=\"close modal\"\r\n                            >\r\n                              <Close32\r\n                                className=\"iconEditSize\"\r\n                                onClick={this.cancelModal}\r\n                              />\r\n                              {/* <TrashCan32 className=\"iconEditSize\" aria-label=\"Delete Rule\" title=\"Delete Rule\"/> */}\r\n                              {/* <svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" className=\"bx--modal-close__icon\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M12 4.7L11.3 4 8 7.3 4.7 4 4 4.7 7.3 8 4 11.3 4.7 12 8 8.7 11.3 12 12 11.3 8.7 8z\"></path></svg> */}\r\n                            </button>\r\n                          </div>\r\n                          <div className=\"bx--modal-content\">\r\n                            {this.state.invalidMsg && (\r\n                              <h4>\r\n                                <b className=\"fontRed\">\r\n                                  {this.state.invalidMsg}\r\n                                </b>\r\n                              </h4>\r\n                            )}\r\n                            {\r\n                              this.props.values.collaborationTool? this.props.values.collaborationTool === \"Slack\"?addWorkspaceSlackForm : addWorkspaceTeamsForm : null\r\n                            }\r\n                            {/* <Form>\r\n                              <TextInput\r\n                                className=\"bx--text-input bx--text__input\"\r\n                                id=\"workspaceAdmin\"\r\n                                name=\"workspaceAdmin\"\r\n                                labelText=\"Slack Workspace Admin Name\"\r\n                                placeholder=\"Slack Workspace Admin Name\"\r\n                                onBlur={this.handleInputChange}\r\n                              />\r\n                              <br />\r\n\r\n                              <TextInput\r\n                                className=\"bx--text-input bx--text__input\"\r\n                                id=\"workspaceEmail\"\r\n                                name=\"workspaceEmail\"\r\n                                labelText=\"Slack Workspace Admin Email\"\r\n                                placeholder=\"Slack Workspace Admin Email\"\r\n                                onBlur={this.handleInputChange}\r\n                              />\r\n                              <br />\r\n                              {signingSecretElement}\r\n                              <br />\r\n                              {xoxpElement}\r\n                              <br />\r\n                              {xoxbElement}\r\n                            </Form> */}\r\n                          </div>\r\n                          <div className=\"bx--modal-content--overflow-indicator\"></div>\r\n\r\n                          <div className=\"bx--modal-footer\">\r\n                            <Button\r\n                              kind=\"secondary\"\r\n                              className=\"addWorkspace\"\r\n                              onClick={this.cancelModal}\r\n                            >\r\n                              Cancel\r\n                            </Button>\r\n                            <Button\r\n                              kind=\"primary\"\r\n                              onClick={this.saveWorkspace}\r\n                              type=\"submit\"\r\n                              className=\"addWorkspace\"\r\n                            >\r\n                              Add Workspace\r\n                            </Button>\r\n                            {/* <button className=\"bx--btn bx--btn--secondary\" type=\"button\" data-modal-close>Cancel</button> */}\r\n                            {/* <button className=\"bx--btn bx--btn--primary\" type=\"button\"   data-modal-primary-focus>Add Workspace</button> */}\r\n                          </div>\r\n                        </div>\r\n                        <span tabindex=\"0\"></span>\r\n                      </div>\r\n                    ) : null}\r\n                    {/* <Button kind=\"tertiary\" className=\"addWorkspace\" onClick={e => {this.showModal();}}> \r\n                            Add Workspace\r\n                        </Button> */}\r\n\r\n                    {/* {workspaceModal} */}\r\n                  </div>\r\n                  {/* <a  className=\"addWorkspace\" onClick={e => {this.showModal();}}> \r\n                        Add Workspace\r\n                    </a> */}\r\n                </div>\r\n              </Column>\r\n            </Row>\r\n\r\n            <Row>\r\n              <Column>\r\n                <Select\r\n                  className=\"labelFont\"\r\n                  name=\"defaultLanguage\"\r\n                  id=\"defaultLanguage\"\r\n                  labelText={\r\n                    <span>\r\n                      Select Default Language\r\n                      <Tooltip>\r\n                        Message displayed in the channel will be with respect to\r\n                        the preferred language selected\r\n                      </Tooltip>\r\n                    </span>\r\n                  }\r\n                  // name=\"defaultLanguage\"\r\n                  onChange={this.props.handleChange(\"defaultLanguage\")}\r\n                  defaultValue={this.props.defaultLanguage}\r\n                >\r\n                  <SelectItem value=\"English\" text=\"English\" />\r\n                  {itemsLanguage}\r\n                </Select>\r\n              </Column>\r\n              <Column>\r\n                <Select\r\n                  className=\"labelFont\"\r\n                  id=\"incidentChannelType\"\r\n                  name=\"incidentChannelType\"\r\n                  labelText={\r\n                    <>\r\n                      Ticket Channel Type <b className=\"fontRed\">*</b>\r\n                    </>\r\n                  }\r\n                  defaultValue={this.props.incidentChannelType || \"\"}\r\n                  onChange={this.props.handleChange(\"incidentChannelType\")}\r\n                  required\r\n                >\r\n                  <SelectItem value=\"\" hidden text=\"Choose an option\" />\r\n                  <SelectItem\r\n                    selected={this.props.incidentChannelType == \"public\"}\r\n                    value=\"public\"\r\n                    text=\"Public\"\r\n                  />\r\n                  <SelectItem\r\n                    selected={this.props.incidentChannelType == \"private\"}\r\n                    value=\"private\"\r\n                    text=\"Private\"\r\n                  />\r\n                </Select>\r\n              </Column>\r\n            </Row>\r\n\r\n            <Row>\r\n              <Column>\r\n                <Select\r\n                  className=\"labelFont\"\r\n                  id=\"eventSource\"\r\n                  name=\"eventSource\"\r\n                  labelText={\r\n                    <FormLabel>\r\n                      What is the event source to be used with ChatOps?{\" \"}\r\n                      <b className=\"fontRed\">*</b>\r\n                      <Tooltip>External event source</Tooltip>\r\n                    </FormLabel>\r\n                  }\r\n                  onChange={this.props.handleChange(\"eventSource\")}\r\n                  defaultValue={this.props.eventSource || \"\"}\r\n                  required\r\n                >\r\n                  <SelectItem value=\"\" hidden text=\"Choose an option\" />\r\n                  <SelectItem\r\n                    value=\"CDI\"\r\n                    text=\"AIOPS\"\r\n                    selected={this.props.eventSource == \"CDI\"}\r\n                  />\r\n                  <SelectItem\r\n                    value=\"netcool\"\r\n                    text=\"Netcool\"\r\n                    selected={this.props.eventSource == \"netcool\"}\r\n                  />\r\n                  <SelectItem\r\n                    value=\"other\"\r\n                    text=\"Other\"\r\n                    selected={this.props.eventSource == \"other\"}\r\n                  />\r\n                </Select>\r\n              </Column>\r\n              <Column>\r\n                {this.props.eventSource &&\r\n                  (values.eventSource === \"CDI\" ? (\r\n                    <FormGroup\r\n                      className=\"displayInlineDIv\"\r\n                      legendText={\r\n                        <>\r\n                          Events that should trigger ChatOps processes{\" \"}\r\n                          <b className=\"fontRed\">*</b>\r\n                        </>\r\n                      }\r\n                    >\r\n                      <div className=\"checkbox\">\r\n                            \r\n                        <label className=\"bx--checkbox-label-text checkboxClass\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            className=\"checkboxInput\"\r\n                            name=\"p1\"\r\n                            data-value=\"1\"\r\n                            onChange={this.props.handleCheckboxPriority(\"allowedPriorities\")}\r\n                            defaultChecked={true}\r\n                            disabled\r\n                        />\r\n                        p 1\r\n                        </label>\r\n                        <label className=\"bx--checkbox-label-text checkboxClass\">\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                className=\"checkboxInput\"\r\n                                name=\"p2\"\r\n                                data-value=\"2\"\r\n                                onClick={this.props.handleCheckboxPriority(\"allowedPriorities\")}\r\n                                defaultChecked={p2Priority}\r\n                            />\r\n                            p 2\r\n                        </label>\r\n                        <label className=\"bx--checkbox-label-text checkboxClass\">\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                className=\"checkboxInput\"\r\n                                name=\"p3\"\r\n                                data-value=\"3\"\r\n                                onClick={this.props.handleCheckboxPriority(\"allowedPriorities\")}\r\n                                defaultChecked={p3Priority}\r\n                            />\r\n                            p 3\r\n                        </label>\r\n                        <label className=\"bx--checkbox-label-text checkboxClass\">\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                className=\"checkboxInput\"\r\n                                name=\"p4\"\r\n                                data-value=\"4\"\r\n                                onClick={this.props.handleCheckboxPriority(\"allowedPriorities\")}\r\n                                defaultChecked={p4Priority}\r\n                            />\r\n                            p 4\r\n                        </label>\r\n                      </div>\r\n                    </FormGroup>\r\n                  ) : (\r\n                    <Select\r\n                      className=\"labelFont\"\r\n                      id=\"accountUtilizingNetcool\"\r\n                      name=\"accountUtilizingNetcool\"\r\n                      onChange={this.props.handleChange(\r\n                        \"accountUtilizingNetcool\"\r\n                      )}\r\n                      defaultValue={this.props.accountUtilizingNetcool}\r\n                      labelText=\"Does the client Netcool env allow internet based call?\"\r\n                      // defaultValue=\"ops\"\r\n                    >\r\n                      <SelectItem value=\"ops\" text=\"Choose an option\" />\r\n                      <SelectItem value=\"yes\" text=\"Yes\" />\r\n                      <SelectItem value=\"no\" text=\"No\" />\r\n                    </Select>\r\n                  ))}\r\n              </Column>\r\n            </Row>\r\n\r\n            {values.eventSource === \"CDI\" && (\r\n              <Row>\r\n                <Column>\r\n                  <Select\r\n                    className=\"labelFont\"\r\n                    id=\"aboveCriteria\"\r\n                    labelText=\"If AIOPS is used as event source should ITSM created tickets and event management tickets drive ChatOps?\"\r\n                    name=\"triggerChatOpsProcess\"\r\n                    onChange={this.props.handleChange(\"triggerChatOpsProcess\")}\r\n                    defaultValue={this.props.triggerChatOpsProcess || \"\"}\r\n                  >\r\n                    <SelectItem hidden value=\"\" text=\"Choose an option\" />\r\n                    <SelectItem value=\"yes\" text=\"Yes\" />\r\n                    <SelectItem value=\"no\" text=\"No\" />\r\n                  </Select>\r\n                </Column>\r\n                <Column>\r\n                  <TextInput\r\n                    className=\"labelFont\"\r\n                    name=\"aiopsAccIdentifier\"\r\n                    labelText={\r\n                      <span>\r\n                        If Account is using AIOPS, provide account\r\n                        identifier(AIOPS client id) <b className=\"fontRed\">*</b>\r\n                        <Tooltip>Unique identifier for account</Tooltip>\r\n                      </span>\r\n                    }\r\n                    placeholder=\"AIOPS Client Id\"\r\n                    onChange={this.debouncer(500)}\r\n                    defaultValue={this.props.aiopsAccIdentifier}\r\n                    required\r\n                  />\r\n                </Column>\r\n              </Row>\r\n            )}\r\n            <Row>\r\n              <Column>\r\n                <div className=\"checkbox\">\r\n                  <label className=\"bx--checkbox-label-text checkboxClass checkboxClassBG\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"enrollMaintenanceWindow\"\r\n                      className=\"checkboxInput\"\r\n                      defaultChecked={this.props.AccData.accountsData.enrollMaintenanceWindow}\r\n                      onClick={this.props.handleCheckboxGsma(\"gsma\")}\r\n                    />\r\n                    Enable GSMA Maintenance Window\r\n                  </label>\r\n                  <Tooltip className=\"tooltipBG\">\r\n                    If checked, user can enroll account to receive maintenance window updates\r\n                  </Tooltip>\r\n                </div>\r\n              </Column>\r\n            </Row>\r\n            <Row>\r\n              <Column className=\"border my-2 py-2\">\r\n                <Row>\r\n                  <Column>\r\n                    <h4 className=\"bx--label bold\">\r\n                      Assignment Services\r\n                      <span class=\"bx--form__helper-text bold\">\r\n                        (Please select atleast one Assignment Service)\r\n                      </span>\r\n                    </h4>\r\n                  </Column>\r\n                </Row>\r\n                <Row>\r\n                  <Column>\r\n                    <Grid>\r\n                      <Row>\r\n                        <Column>\r\n                          <TextInput\r\n                            className=\"labelFont\"\r\n                            id=\"emails\"\r\n                            name=\"defaultassignments\"\r\n                            placeholder=\"Email id’s of the focal/dispatcher for handling incidents\"\r\n                            labelText=\"Email id’s of users to add to all incident channels(Email id's , comma separated)\"\r\n                            onBlur={async (e) => {\r\n                              \r\n                              if(e.target.value.trim() !== this.state.defaultassignments){\r\n                              this.setState({defaultassignments:e.target.value.trim()});\r\n                              e.target.setCustomValidity(\"\");\r\n                              if (e.target.value.length == 0)\r\n                                return this.props.handleChange(\r\n                                  \"defaultassignments\"\r\n                                )(e);\r\n                              const emaillArr = e.target.value\r\n                                .trim()\r\n                                .split(\",\");\r\n                              // if (\r\n                              //   emaillArr.length > 0 &&\r\n                              //   !emaillArr.every((email) =>\r\n                              //     {\r\n                              //       const allowedDomains = process.env.REACT_APP_ALLOWED_DOMAINS?.split(\",\") || []\r\n                              //       const validDomain = allowedDomains.find(domain => email.toLowerCase().includes(domain + \".\"))\r\n                              //       const validEmail = email.toLowerCase().includes(\".\" + enterprise.toLowerCase() + \".\") || email.toLowerCase().includes(\"@\" + enterprise.toLowerCase() + \".\");\r\n                              //       return validDomain, validEmail\r\n                              //     }\r\n                              //   )\r\n                              // )\r\n                              //   e.target.setCustomValidity(\r\n                              //     \"Please provide a valid \" + enterprise + \" email id\"\r\n                              //   );\r\n                              // else {\r\n                                e.target.setCustomValidity(\"Verifying...\");\r\n                                const { valid, message } = await this.validateEmails(emaillArr, this.props.values.collaborationTool);\r\n                                \r\n                                if (valid) {\r\n                                  // if(this.props.values.collaborationTool.toLowerCase() === 'teams'){\r\n                                    // To be uncommented ***********************************************\r\n                                    // if(emaillArr.length >= 3){\r\n                                    //   e.target.setCustomValidity(\"\");\r\n                                    //   this.props.handleChange(\"defaultassignments\")(e);\r\n                                    // }else {\r\n                                    //   e.target.setCustomValidity(\"Enter at least 3 Email Ids in case of Teams collaboration tool\");\r\n                                    // }\r\n                                  // }else {\r\n                                    e.target.setCustomValidity(\"\");\r\n                                    this.props.handleChange(\"defaultassignments\")(e);\r\n                                  // }\r\n                                  \r\n                                } else{\r\n                                  e.target.setCustomValidity(message);\r\n                                } \r\n                              // }\r\n                            }else{\r\n                              this.setState({defaultassignments:e.target.value.trim()});\r\n                            }\r\n                           }\r\n                          }\r\n                            defaultValue={this.props.defaultassignments}\r\n                            value={this.props.defaultassignments || \"\"}\r\n                            // value={this.state.defaultassignments || \"\"}\r\n                            // onChange={(e) => this.setState({defaultassignments:e.target.value.trim()})}\r\n                            onChange={(e) => this.props.handleChange(\"defaultassignments\")(e)}\r\n                          />\r\n                        </Column>\r\n                      </Row>\r\n                      <Row>\r\n                        <Column>\r\n                          <Select\r\n                            className=\"labelFont\"\r\n                            id=\"assignmentServiceToAssignResource\"\r\n                            labelText=\"Source for assigning incident channel owner\"\r\n                            // defaultValue=\"icd\"\r\n                            name=\"assignmentServiceToAssignResource\"\r\n                            onChange={this.props.handleChange(\r\n                              \"assignmentServiceToAssignResource\"\r\n                            )}\r\n                            defaultValue={\r\n                              this.props.assignmentServiceToAssignResource\r\n                            }\r\n                          >\r\n                            <SelectItem value=\"\" text=\"Choose an option\" />\r\n                            <SelectItem value=\"cdi\" text=\"AIOPS\" />\r\n                            <SelectItem value=\"service_now\" text=\"ServiceNow\" />\r\n                            <SelectItem value=\"icd\" text=\"ICD\" />\r\n                          </Select>\r\n                        </Column>\r\n\r\n                        <Column>\r\n                          {values.assignmentServiceToAssignResource ===\r\n                            \"cdi\" && (\r\n                            <TextInput\r\n                              className=\"labelFont\"\r\n                              id=\"CDITicketToolID\"\r\n                              labelText=\"AIOPS Ticket Tool ID\"\r\n                              placeholder=\"AIOPS Ticket Tool ID\"\r\n                              name=\"CDITicketToolID\"\r\n                              onChange={this.props.handleChange(\r\n                                \"CDITicketToolID\"\r\n                              )}\r\n                              defaultValue={this.props.CDITicketToolID}\r\n                            />\r\n                          )}\r\n                        </Column>\r\n                      </Row>\r\n                      {values.eventSource == \"CDI\" && (\r\n                        <Row>\r\n                          <Column>\r\n                            <Select\r\n                              className=\"labelFont\"\r\n                              id=\"squareAssignments\"\r\n                              labelText=\"Squad Based Assignments\"\r\n                              name=\"squadBasedAssignment\"\r\n                              onChange={this.props.handleChange(\r\n                                \"squadBasedAssignment\"\r\n                              )}\r\n                              defaultValue={values.squadBasedAssignment || \"\"}\r\n                            >\r\n                              <SelectItem\r\n                                hidden\r\n                                value=\"\"\r\n                                text=\"Choose an option\"\r\n                              />\r\n                              <SelectItem\r\n                                value=\"yes\"\r\n                                text=\"Yes\"\r\n                                selected={values.squadBasedAssignment == \"yes\"}\r\n                              />\r\n                              <SelectItem\r\n                                value=\"no\"\r\n                                text=\"No\"\r\n                                selected={values.squadBasedAssignment == \"no\"}\r\n                              />\r\n                            </Select>\r\n                          </Column>\r\n                          <Column>\r\n                            {values.squadBasedAssignment === \"yes\" && (\r\n                              <Select\r\n                                className=\"labelFont\"\r\n                                name=\"aiopsSquadGeo\"\r\n                                id=\"aiopsSquadGeo\"\r\n                                labelText={\r\n                                  <>\r\n                                    AIOPS Squad Geo <b className=\"fontRed\">*</b>\r\n                                  </>\r\n                                }\r\n                                defaultValue={this.props.aiopsSquadGeo}\r\n                                onChange={this.props.handleChange(\r\n                                  \"aiopsSquadGeo\"\r\n                                )}\r\n                                required\r\n                              >\r\n                                <SelectItem\r\n                                  disabled\r\n                                  defaultValue=\"noSquadGeo\"\r\n                                  text=\"Choose an option\"\r\n                                />\r\n                                {itemsSquadGeo}\r\n                              </Select>\r\n                            )}\r\n                          </Column>\r\n                        </Row>\r\n                      )}\r\n                      <Row>\r\n                        {/* <Column>\r\n                <Select\r\n                    className=\"labelFont\"\r\n                    id=\"gnmAssignments\"\r\n                    labelText=\"GNM Assignments\"\r\n                    defaultValue={accData.accountsData?.GNMAssignment}\r\n                    name=\"gnmAssignments\"\r\n                    onChange={this.props.handleChange('gnmAssignments')}\r\n                    disabled\r\n                >\r\n                    <SelectItem value=\"opts\" text=\"Choose an option\" />\r\n                </Select>\r\n              </Column> */}\r\n                        <Column>\r\n                          <Select\r\n                            className=\"labelFont\"\r\n                            id=\"groupAssignments\"\r\n                            labelText={\r\n                              <FormLabel>\r\n                                Group Assignments\r\n                                <Tooltip>\r\n                                  Group member gets assigned to Incident\r\n                                  channel\r\n                                </Tooltip>\r\n                              </FormLabel>\r\n                            }\r\n                            name=\"groupAssignment\"\r\n                            onChange={this.props.handleChange(\r\n                              \"groupAssignment\"\r\n                            )}\r\n                            defaultValue={values.groupAssignment || \"\"}\r\n                          >\r\n                            <SelectItem\r\n                              hidden\r\n                              value=\"\"\r\n                              text=\"Choose an option\"\r\n                            />\r\n                            <SelectItem value=\"yes\" text=\"Yes\" />\r\n                            <SelectItem value=\"no\" text=\"No\" />\r\n                          </Select>\r\n                        </Column>\r\n                        <Column></Column>\r\n                      </Row>\r\n                      {values.groupAssignment === \"yes\" && (\r\n                        <>\r\n                          <Row>\r\n                            <Column>\r\n                              {/* <div className=\"BGLabelDiv\"> */}\r\n                              <h4 className=\"bx--label\">\r\n                                Add Group Details(Group names's and\r\n                                rules) <b className=\"fontRed\">*</b>{\" \"}\r\n                                <Tooltip>\r\n                                  Group members get assigned according to\r\n                                  the rule set.\r\n                                </Tooltip>\r\n                              </h4>\r\n                              {/* </div> */}\r\n                            </Column>\r\n                            <Column>\r\n                              <a\r\n                                className=\"addBGBtn addWorkspaceLink\"\r\n                                onClick={this.addGroup}\r\n                              >\r\n                                Add Group\r\n                              </a>\r\n                            </Column>\r\n                          </Row>\r\n                          <Row>\r\n                            <Column>\r\n                              <div className=\"rulesDivStyle\">\r\n                                {this.state.groupField.map(\r\n                                  (v, i) =>\r\n                                    v && (\r\n                                      <Row key={\"b\" + i}>\r\n                                        <Column>\r\n                                          <div className=\"RulesDiv2\">\r\n                                            <div className=\"rulesSubDiv\">\r\n                                              <TextInput\r\n                                                style={{ margin: \"10px\" }}\r\n                                                id={\"groupName\" + i}\r\n                                                name={\"groupName\" + i}\r\n                                                onChange={this.props.handleChange(\r\n                                                  \"groupName\"\r\n                                                )}\r\n                                                defaultValue={\r\n                                                  typeof v === \"object\"\r\n                                                    ? v[0]\r\n                                                    : \"\"\r\n                                                }\r\n                                                value={this.props[\"groupName\" + i]}\r\n                                                className=\"labelFont\"\r\n                                                labelText=\"\"\r\n                                                placeholder=\"Group Name\"\r\n                                                required\r\n                                              />\r\n                                              <TextInput\r\n                                                style={{ margin: \"10px\" }}\r\n                                                readOnly\r\n                                                id={\"groupRules\" + i}\r\n                                                name={\"groupRules\" + i}\r\n                                                labelText=\"\"\r\n                                                onChange={this.props.handleChange(\r\n                                                  \"groupRules\"\r\n                                                )}\r\n                                                className=\"labelFont bgRulesTitle\"\r\n                                                placeholder=\"No Rules applied\"\r\n                                                defaultValue={\r\n                                                  typeof v === \"object\"\r\n                                                    ? v[1]\r\n                                                    : \"\"\r\n                                                }\r\n                                                value={\r\n                                                  this.props[\"groupRules\" + i]\r\n                                                }\r\n                                                required\r\n                                              />\r\n                                            </div>\r\n                                            <div className=\"iconDiv\">\r\n                                              <AddRules\r\n                                                key={\"group\" + i}\r\n                                                index={\"group\" + i}\r\n                                                rulesFor=\"group\"\r\n                                                accountsData={\r\n                                                  this.props.AccData\r\n                                                    .accountsData\r\n                                                }\r\n                                                onAddRules={(rules) =>\r\n                                                  this.props.registerState(\r\n                                                    \"groupRules\" + i,\r\n                                                    rules\r\n                                                  )\r\n                                                }\r\n                                              />\r\n                                              <TrashCan32\r\n                                                className=\"iconEditSize\"\r\n                                                aria-label=\"Delete Rule\"\r\n                                                title=\"Delete Rule\"\r\n                                                onClick={() =>\r\n                                                  this.deleteGroup(i)\r\n                                                }\r\n                                              />\r\n                                            </div>\r\n                                          </div>\r\n                                        </Column>\r\n                                      </Row>\r\n                                    )\r\n                                )}\r\n                              </div>\r\n                            </Column>\r\n                          </Row>\r\n                        </>\r\n                      )}\r\n                    </Grid>\r\n                  </Column>\r\n                </Row>\r\n              </Column>\r\n            </Row>\r\n\r\n            <Row>\r\n              <Column>\r\n                {/* <div className=\"BGLabelDiv\"> */}\r\n                <h4 className=\"bx--label\">\r\n                 <span>\r\n                  Workspace {this.props.collaborationTool.toLowerCase()}  channels that will act as index channel{\" \"}</span>\r\n                  <b className=\"fontRed\">*</b>{\" \"}\r\n                  <Tooltip>\r\n                    Index channel displays consolidated Ticket details.\r\n                  </Tooltip>\r\n                </h4>\r\n                {/* </div> */}\r\n              </Column>\r\n              <Column>\r\n                <a\r\n                  className=\"addBGBtn addWorkspaceLink\"\r\n                  onClick={this.addChannel}\r\n                >\r\n                  Add Channel\r\n                </a>\r\n              </Column>\r\n            </Row>\r\n            <Row>\r\n              <Column>\r\n                <div className=\"rulesDivStyle\">\r\n                  {this.state.channelField.map(\r\n                    (v, i) =>\r\n                      v && (\r\n                        <div key={\"ch\" + i}>\r\n                          <Row>\r\n                            <Column>\r\n                              <div className=\"RulesDiv2\">\r\n                                <div className=\"rulesSubDiv\">\r\n                                  <TextInput\r\n                                    style={{ margin: \"13px 10px\" }}\r\n                                    className=\"labelFont\"\r\n                                    id={\"channel-groupName\" + i}\r\n                                    name={\"indexChannel\" + i}\r\n                                    placeholder={`Workspace ${this.props.collaborationTool.toLowerCase()} Channel that will act as index channel`}\r\n                                    labelText=\"\"\r\n                                    onChange={this.props.handleChange(\r\n                                      \"indexChannel\"\r\n                                    )}\r\n                                    defaultValue={\r\n                                      typeof v === \"object\" ? v[0] : \"\"\r\n                                    }\r\n                                    value={this.props[\"indexChannel\" + i]}\r\n                                    required\r\n                                  />\r\n                                  <TextInput\r\n                                    style={{ margin: \"13px 10px\" }}\r\n                                    className=\"labelFont ruleTitle\"\r\n                                    name={\"channelRules\" + i}\r\n                                    onChange={this.props.handleChange(\r\n                                      \"channelRules\"\r\n                                    )}\r\n                                    labelText=\"\"\r\n                                    readOnly\r\n                                    id={\"channelRules\" + i}\r\n                                    placeholder=\"No Rules applied\"\r\n                                    value={this.props[\"channelRules\" + i]}\r\n                                    defaultValue={\r\n                                      typeof v === \"object\" &&\r\n                                      typeof v[1] === \"object\"\r\n                                        ? v[1][0]\r\n                                        : \"\"\r\n                                    }\r\n                                    required\r\n                                  />\r\n                                  <Select\r\n                                    style={{\r\n                                      margin: \"10px !important\",\r\n                                      padding: \"0 !important\",\r\n                                    }}\r\n                                    className=\"labelFont ruleTitle\"\r\n                                    id=\"workspace\"\r\n                                    labelText=\"\"\r\n                                    name={\"workspaceRules\" + i}\r\n                                    onChange={this.props.handleChange(\r\n                                      \"workspaceRules\"\r\n                                    )}\r\n                                    defaultValue={\r\n                                      typeof v ===\r\n                                      (\"object\" && typeof v[1] === \"object\")\r\n                                        ? v[1][1]\r\n                                        : \"\"\r\n                                    }\r\n                                    value={\r\n                                      this.props[\"workspaceRules\" + i] || \"\"\r\n                                    }\r\n                                    required\r\n                                  >\r\n                                    <SelectItem\r\n                                      value=\"\"\r\n                                      hidden\r\n                                      text=\"Choose an option\"\r\n                                    />\r\n                                    {itemsWorkspace}\r\n                                  </Select>\r\n                                </div>\r\n                                <div className=\"iconDiv\">\r\n                                  <AddRules\r\n                                    key={\"channel\" + i}\r\n                                    index={\"channel\" + i}\r\n                                    rulesFor=\"channel\"\r\n                                    accountsData={\r\n                                      this.props.AccData.accountsData\r\n                                    }\r\n                                    onAddRules={(rules) =>\r\n                                      this.props.registerState(\r\n                                        \"channelRules\" + i,\r\n                                        rules\r\n                                      )\r\n                                    }\r\n                                  />\r\n                                  <TrashCan32\r\n                                    className=\"iconEditSize\"\r\n                                    aria-label=\"Delete Rule\"\r\n                                    title=\"Delete Rule\"\r\n                                    onClick={() => this.deleteChannel(i)}\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                            </Column>\r\n                          </Row>\r\n                        </div>\r\n                      )\r\n                  )}\r\n                </div>\r\n              </Column>\r\n            </Row>\r\n          </Grid>\r\n          <div className=\"my-2\">\r\n            <b className=\"fontRed\">{this.state.error}</b>\r\n          </div>\r\n          <div className=\"btnCommon\">\r\n            <Button className=\"btnMargin\" onClick={this.back}>\r\n              Back\r\n            </Button>\r\n            <div>{savedBtn}</div>\r\n            <Button\r\n              type=\"submit\"\r\n              className=\"btnMargin btnLast\"\r\n              disabled={!this.props.generalFormSubmitted}\r\n            >\r\n              Continue{\" \"}\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ConfigForm;\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\AAForm\\MainForm.jsx",["1079","1080","1081","1082","1083","1084","1085","1086","1087","1088","1089","1090","1091","1092","1093","1094","1095","1096","1097","1098","1099","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1114","1115","1116","1117","1118","1119","1120","1121","1122","1123","1124","1125","1126","1127","1128","1129","1130","1131","1132","1133","1134","1135","1136","1137","1138","1139","1140","1141","1142","1143","1144","1145","1146","1147","1148","1149","1150","1151","1152","1153","1154","1155","1156","1157","1158","1159","1160","1161","1162","1163","1164","1165","1166"],"// MainForm.jsx\r\nimport React, { Component } from 'react';\r\nimport GeneralInfo from './GeneralInfo';\r\nimport ConfigForm from './configInfoForm';\r\nimport AdditionalInfoForm from './additionalInfoForm';\r\nimport OnboardAccount from '../../OnboardAccount.js';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { withRouter } from 'react-router-dom';\r\nimport { validate } from '../../../validation/validate.js';\r\n\r\n\r\nclass MainForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.submitForm = this.submitForm.bind(this);\r\n        this.isJSON = this.isJSON.bind(this);\r\n      }\r\n    //check all ID and check rules part >>> rules part input not added\r\n    state = {\r\n        AccData: [],\r\n        step: 1,\r\n        _id:'',\r\n        accGeo: '', accMarket: '', accSector: '', isoCountryCode: '', countryName: '', countryCode:'', accIndustry: '', accCountry: '', blueID:'', CDIR:'',GBGID:'', dpeAdminName:'', dpeAdminEmail:'', itsmAdminName:'', itsmAdminEmail:'', networkAdminName:'', networkAdminEmail:'',\r\n        collaborationTool: 'Slack', workspace:'', defaultLanguage:'', incidentChannelType:'public', eventSource: 'CDI',allowedPriorities:[\"1\"], accountUtilizingNetcool:'', severityList:'', triggerChatOpsProcess: '', aiopsAccIdentifier:'', defaultassignments:'', assignmentServiceToAssignResource:'', \r\n        squadBasedAssignment:'no', aiopsSquadGeo: '', gnmAssignments: '', groupAssignment:'', usingTicketingTool:'', chatopsCommandAuth:'', authType:'', ticketingToolUsed: '', enableServiceManager: false, typeOfAuthentication:'', tickertingRestURL:'', urlPath: '',tableName: 'sn_customerservice_case',companyName: '', basicAuthUserID:'',basicAuthPassword:'',oauthClientID:'', \r\n        oauthClientSecret:'',relatedInsights:'',dropletEnabled:'',csmEnabled: '',dedicatedDropletInstance: '', enableCiDetails:'',enableDescDetails:'',enableStackDetails:'',internetFacing:'',enableOwner:'',otherInformation: '', generalFormSubmitted: false, configFormSubmitted: false, dedicatedDropletInstance: true, \r\n        SnowDropletStatusFlowConf: '', SnowCsmStatusFlowConf: '', IcdDefaultStatusFlowConf: '', SnowDefaultStatusFlowConf: '',\r\n        enableWatsonAssistant:false,watsonURL:'',watsonApiKey:'',watsonVersion:'',\r\n        collabConfig: {}, workspaceRegions: [], teamsBotDetails: {}\r\n    }\r\n\r\n    componentDidMount() {\r\n        const loadData=fetch('/mui/onboardAccountFormData')\r\n        .then(res => {\r\n            return res.json()\r\n        })\r\n        .then(AccData => { \r\n            this.setState({ AccData })\r\n            AccData = AccData.accountsData  \r\n            this.props.updateParent('accName', AccData.accountName)\r\n            this.props.updateParent('accCode', AccData.accountCode)\r\n            if(AccData.submitted || AccData.saved) {\r\n                var dedicatedDropletInstanceVal;\r\n                if(AccData.dedicatedDropletInstance == undefined){\r\n                    dedicatedDropletInstanceVal = true\r\n                }else{\r\n                    dedicatedDropletInstanceVal = AccData.dedicatedDropletInstance;\r\n                }\r\n                let workspaceName;\r\n               \r\n                if(AccData.collabConfig){\r\n                    workspaceName = AccData.collabConfig[AccData.collaborationTool.toLowerCase()].workspaceName\r\n                }else {\r\n                    workspaceName = AccData.workspaceName;\r\n                }\r\n                this.setState({\r\n                    accGeo: AccData.geo,\r\n                    accMarket: AccData.market, \r\n                    accSector: AccData.sector,\r\n                    accountCountry: AccData.accountCountryCode, \r\n                    accIndustry: AccData.industry,\r\n                    blueID: AccData.accountBlueID, \r\n                    CDIR: AccData.cdir, \r\n                    GBGID: AccData.gbgid, \r\n                    dpeAdminName: AccData.ownername, \r\n                    dpeAdminEmail: AccData.owneremail, \r\n                    itsmAdminName:AccData.itsmadminname, \r\n                    itsmAdminEmail:AccData.itsmeadminemail, \r\n                    networkAdminName:AccData.networkadminName, \r\n                    networkAdminEmail: AccData.networkadminEmail,\r\n                    collaborationTool: AccData.collaborationTool, \r\n                    // workspace:AccData.is_GTSWorkspaceInUse,\r\n                    workspace:workspaceName,\r\n                    defaultLanguage: AccData.defaultLanguage,\r\n                    SnowDropletStatusFlowConf: AccData.SnowDropletStatusFlowConf,\r\n                    SnowCsmStatusFlowConf: AccData.SnowCsmStatusFlowConf,\r\n                    IcdDefaultStatusFlowConf: AccData.IcdDefaultStatusFlowConf,\r\n                    SnowDefaultStatusFlowConf: AccData.SnowDefaultStatusFlowConf,\r\n                    incidentChannelType: AccData.incidentChannelType,\r\n                    eventSource: AccData.accountUtilizingCDI,\r\n                    accountUtilizingNetcool: AccData.accountUtilizingNetcool,\r\n                    triggerChatOpsProcess: AccData.triggerChatOpsProcess,\r\n                    aiopsAccIdentifier: AccData.accountCDIC,\r\n                    defaultassignments: AccData.accmemberemail,\r\n                    assignmentServiceToAssignResource: AccData.assignmentServiceToAssignResource,\r\n                    CDITicketToolID: AccData.CDITktToolId,\r\n                    squadBasedAssignment: AccData.squadBasedAssignment,\r\n                    aiopsSquadGeo: AccData.squadGeo,\r\n                    gnmAssignments: AccData.GNMAssignment,\r\n                    groupAssignment: AccData.groupAssignment,\r\n                    usingTicketingTool: AccData.ticketingToolInUse,\r\n                    chatopsCommandAuth: AccData.chatopsCommandAuth, \r\n                    authType: AccData.authType,\r\n                    authGroup: AccData.authGroup,\r\n                    ticketingToolUsed: AccData.ticketingToolUsed, \r\n                    enableServiceManager: AccData.enableServiceManager, \r\n                    typeOfAuthentication: AccData.typeOfAuthentication, \r\n                    tickertingRestURL: AccData.ticketingRestApiUrl, \r\n                    basicAuthUserID: AccData.basicAuthUserID,\r\n                    basicAuthPassword: AccData.basicAuthPassword,\r\n                    oauthClientID: AccData.oauthClientID, \r\n                    oauthClientSecret: AccData.oauthClientSecret,\r\n                    relatedInsights: AccData.relatedInsights,\r\n                    dropletEnabled: AccData.dropletEnabled,\r\n                    csmEnabled: AccData.csmEnabled,\r\n                    urlPath: AccData.urlPath,\r\n                    dedicatedDropletInstance: dedicatedDropletInstanceVal,\r\n                    tableName: AccData.tableName || this.state.tableName,\r\n                    companyName: AccData.companyName,\r\n                    enableCiDetails: AccData.enableCiDetails,\r\n                    enableDescDetails: AccData.enableDescDetails,\r\n                    enableStackDetails: AccData.enableStackDetails,\r\n                    internetFacing: AccData.internetFacing,\r\n                    enableOwner: AccData.enableOwner,\r\n                    otherInformation: AccData.otherInformation,\r\n                    isoCountryCode: AccData.isoCountryCode,\r\n                    countryName: AccData.countryName,\r\n                    countryCode:  AccData.accountCountryCode,\r\n                    enableC3: AccData.enableC3,\r\n                    impersonateUser: AccData.impersonateUser,\r\n                    usingAnsibleIntegration: (AccData.ansibleInstance)?AccData.ansibleFeature:'no',\r\n                    ansibleInstance:AccData.ansibleInstance,\r\n                    SnowDropletStatusFlowConfEdit: AccData.SnowDropletStatusFlowConfEdit ,\r\n                    SnowCsmStatusFlowConfEdit: AccData.SnowCsmStatusFlowConfEdit ,\r\n                    IcdDefaultStatusFlowConfEdit: AccData.IcdDefaultStatusFlowConfEdit ,\r\n                    SnowDefaultStatusFlowConfEdit: AccData.SnowDropletStatusFlowConfEdit ,\r\n                    ansibleInstanceLogFlag: AccData.ansibleInstanceLog.logRequired,\r\n                    ansibleInstanceLogTemplate: AccData.ansibleInstanceLog.template,\r\n                    ansibleInstanceLogChannels: AccData.ansibleInstanceLog.channels,\r\n                    ansibleInstanceTemplateList: AccData.ansibleInstanceTemplateList,\r\n                    allowedPriorities: AccData.allowedPriorities,\r\n                    enableWatsonAssistant:AccData.watsonAssistant?AccData.watsonAssistant.enableWatsonAssistant:false,\r\n                    watsonURL:AccData.watsonAssistant?AccData.watsonAssistant.watsonURL:'',\r\n                    watsonApiKey:AccData.watsonAssistant?AccData.watsonAssistant.watsonApiKey:'',\r\n                    watsonVersion:AccData.watsonAssistant?AccData.watsonAssistant.watsonVersion:'',\r\n                    collabConfig: AccData.collabConfig,\r\n                    workspaceRegions: AccData.workspaceRegions,\r\n                    teamsBotDetails: AccData.teamsBotDetails\r\n                })\r\n                if(AccData.submitted) {\r\n                    this.setState({\r\n                        generalFormSubmitted: true,\r\n                        configFormSubmitted: true\r\n                    })\r\n                }\r\n                //loads initial state of BG rules                 \r\n                AccData.groupList && Object.keys(AccData.groupList).forEach((groupName,index)=>{\r\n                        this.setState({\r\n                            [`groupName${index}`]:groupName,\r\n                        });\r\n                        this.setState({\r\n                            [`groupRules${index}`]:AccData.groupList[groupName]\r\n                        })                                          \r\n                })\r\n                AccData.workspaceIndexChannel && Object.entries(AccData.workspaceIndexChannel).forEach(([indexChannel, rulesAndWorkspace],index)=>{\r\n                    this.setState({\r\n                        [`indexChannel${index}`]:indexChannel,\r\n                        [`channelRules${index}`]: rulesAndWorkspace[0],\r\n                        [`workspaceRules${index}`]: rulesAndWorkspace[1]\r\n                    });         \r\n                })\r\n\r\n            }\r\n\r\n        })\r\n        //spinner\r\n        trackPromise(loadData);\r\n    }\r\n\r\n    componentDidUpdate (pevProps, prevState) {\r\n        \r\n        if(prevState.collaborationTool !== this.state.collaborationTool){\r\n            console.log(this.state.collabConfig);\r\n            if(this.state.collabConfig && this.state.collabConfig[this.state.collaborationTool.toLowerCase()]){\r\n                const toolCollabConfig = this.state.collabConfig[this.state.collaborationTool.toLowerCase()];\r\n                if(toolCollabConfig && Object.keys(toolCollabConfig).length > 0){\r\n                    const workspaceIndexChannel = toolCollabConfig.defaultindexchannels;\r\n                    for(let i = 0; i< workspaceIndexChannel.length; i++){\r\n                            this.setState({\r\n                                [`indexChannel${i}`]:workspaceIndexChannel[i].channel,\r\n                                [`channelRules${i}`]: workspaceIndexChannel[i].rule,\r\n                                [`workspaceRules${i}`]: workspaceIndexChannel[i].workspaceName\r\n                            });\r\n                    }\r\n                    this.setState({\r\n                        workspace: toolCollabConfig.workspaceName,\r\n                        defaultassignments: toolCollabConfig?.defaultassignmentsEmail \r\n                    })\r\n                }else {\r\n                    this.setState({\r\n                        [`indexChannel${0}`]: \"\",\r\n                        [`channelRules${0}`]: \"\",\r\n                        [`workspaceRules${0}`]: \"\"\r\n                    });\r\n                    this.setState({\r\n                        workspace: \"\",\r\n                        defaultassignments: []\r\n                    })\r\n                }\r\n                \r\n            }else {\r\n                //if no collab config found, clear rule , channel and workspace\r\n                this.setState({\r\n                    [`indexChannel${0}`]: \"\",\r\n                    [`channelRules${0}`]: \"\",\r\n                    [`workspaceRules${0}`]: \"\"\r\n                });\r\n                this.setState({\r\n                    workspace: \"\",\r\n                    defaultassignments: []\r\n                })\r\n            }\r\n        }\r\n        \r\n    }\r\n    isJSON(str, key) {\r\n        try {\r\n            var data;\r\n            if(typeof str == \"object\"){\r\n                data = JSON.stringify(str)\r\n            }else{\r\n                data = str;\r\n            }\r\n            JSON.parse(data);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    submitForm = (e) => {\r\n        var saved = e;\r\n        var submitted = ''\r\n        const { step } = this.state\r\n        var stateValue = this.state.AccData;\r\n        var rulesArr = [];\r\n        var bgRulesArr = [];\r\n        let watsonAssistant = {enableWatsonAssistant:false};\r\n        const { accGeo, accMarket, accSector,isoCountryCode, countryName, countryCode, accIndustry, accCountry , blueID , CDIR ,GBGID, dpeAdminName , dpeAdminEmail , itsmAdminName , itsmAdminEmail , networkAdminName , networkAdminEmail, collaborationTool, workspace , defaultLanguage , incidentChannelType , eventSource ,allowedPriorities, accountUtilizingNetcool, severityList , tickertingRestURL, triggerChatOpsProcess, aiopsAccIdentifier , defaultassignments ,assignmentServiceToAssignResource, squadBasedAssignment ,  aiopsSquadGeo , gnmAssignments, groupAssignment , usingTicketingTool , chatopsCommandAuth , authType , ticketingToolUsed, enableServiceManager, typeOfAuthentication , basicAuthUserID, basicAuthPassword, oauthClientID , oauthClientSecret, internetFacing, relatedInsights, enableCiDetails, enableDescDetails, enableStackDetails, enableOwner, otherInformation, authGroup, CDITicketToolID, enableC3,  impersonateUser, ansibleInstance, usingAnsibleIntegration,dropletEnabled, csmEnabled, urlPath, tableName, dedicatedDropletInstance, companyName, SnowDropletStatusFlowConf, SnowCsmStatusFlowConf, IcdDefaultStatusFlowConf, SnowDefaultStatusFlowConf, SnowDropletStatusFlowConfEdit, SnowCsmStatusFlowConfEdit, IcdDefaultStatusFlowConfEdit, SnowDefaultStatusFlowConfEdit, enrollMaintenanceWindow, ansibleInstanceLogFlag, ansibleInstanceLogChannels, ansibleInstanceLogTemplate,enableWatsonAssistant,watsonURL,watsonApiKey,watsonVersion} = this.state;\r\n        const values = { accGeo, accMarket, accSector, isoCountryCode, countryName, countryCode, accIndustry, accCountry , blueID , CDIR,GBGID, dpeAdminName , dpeAdminEmail , itsmAdminName , itsmAdminEmail , networkAdminName , networkAdminEmail, collaborationTool, workspace , defaultLanguage , incidentChannelType , eventSource ,allowedPriorities, accountUtilizingNetcool, severityList ,tickertingRestURL,  triggerChatOpsProcess, aiopsAccIdentifier , defaultassignments ,assignmentServiceToAssignResource, squadBasedAssignment ,  aiopsSquadGeo , gnmAssignments, groupAssignment , usingTicketingTool , chatopsCommandAuth , authType , ticketingToolUsed, enableServiceManager, typeOfAuthentication , basicAuthUserID, basicAuthPassword, oauthClientID , oauthClientSecret, internetFacing, relatedInsights, enableCiDetails, enableDescDetails, enableStackDetails, enableOwner, otherInformation, authGroup, CDITicketToolID, enableC3, impersonateUser, ansibleInstance, usingAnsibleIntegration,dropletEnabled, csmEnabled, urlPath, tableName, dedicatedDropletInstance, companyName, SnowDropletStatusFlowConf, SnowCsmStatusFlowConf, IcdDefaultStatusFlowConf, SnowDefaultStatusFlowConf, SnowDropletStatusFlowConfEdit, SnowCsmStatusFlowConfEdit, IcdDefaultStatusFlowConfEdit, SnowDefaultStatusFlowConfEdit, enrollMaintenanceWindow, ansibleInstanceLogFlag, ansibleInstanceLogChannels, ansibleInstanceLogTemplate,watsonAssistant};\r\n\r\n        var ruleTitle = document.getElementsByClassName('ruleTitle');\r\n        var bgRuleTitle = document.getElementsByClassName('bgRulesTitle');\r\n        var ruleValue = ruleTitle.value\r\n        var count = 0;\r\n        var rulesObj = {};\r\n        var bgRulesObj = {};        \r\n        var indexChannelObj = {}\r\n        var indexChannelWorkspaceObj = {}\r\n        var groupObj = {}\r\n        var indexChannelWorkspaceObj = {};\r\n        let validJson = true;\r\n        Object.entries(this.state).map(([key, value]) => {\r\n            if(key.includes(\"indexChannel\")){\r\n                let index = key.replace(\"indexChannel\",\"\");\r\n                indexChannelObj[value]= {\r\n                    rule: this.state[`channelRules${index}`],\r\n                    workspace:this.state[`workspaceRules${index}`],\r\n                    channel:value\r\n                }\r\n            }\r\n            if(key.includes(\"workspaceRules\")){\r\n                indexChannelWorkspaceObj[key] = value\r\n            }\r\n            if(key.includes(\"groupName\")){\r\n                let index = key.replace(\"groupName\",\"\");\r\n                groupObj[value]= {\r\n                    rule: this.state[`groupRules${index}`]\r\n                }\r\n            }\r\n            \r\n        });  \r\n        \r\n        \r\n        \r\n        values[\"_id\"] = stateValue.accountsData._id;\r\n        values[\"accCode\"] = stateValue.accountsData.accountCode;\r\n        values[\"accName\"] = stateValue.accountsData.accountName;\r\n        values[\"collabConfig\"] = stateValue.accountsData.collabConfig;\r\n        values[\"saved\"] = saved;\r\n        values[\"submitted\"] = submitted;\r\n        values[\"channelRules\"] = rulesObj;\r\n        values[\"groupRules\"] = bgRulesObj;\r\n        values[\"indexChannel\"] = indexChannelObj;\r\n        values[\"groupNameRules\"] = groupObj;\r\n        values[\"indexChannelWorkspace\"] = indexChannelWorkspaceObj;\r\n        \r\n        if(enableWatsonAssistant){\r\n            watsonAssistant = {\r\n                enableWatsonAssistant:enableWatsonAssistant,\r\n                watsonURL:watsonURL,\r\n                watsonApiKey:watsonApiKey,\r\n                watsonVersion:watsonVersion\r\n            }\r\n            values.watsonAssistant = watsonAssistant;\r\n        }\r\n        \r\n        if(values.usingTicketingTool == \"Yes\" || values.usingTicketingTool == \"yes\"){\r\n            if(values.ticketingToolUsed == \"icd\"){\r\n                if(values.IcdDefaultStatusFlowConf != '' && values.IcdDefaultStatusFlowConf != undefined){\r\n                    values[\"snowStatusEdit\"] = false;\r\n                    values[\"IcdDefaultStatusConf\"] = values.IcdDefaultStatusFlowConf ;\r\n                    var toCHeck = values.IcdDefaultStatusFlowConf\r\n                }else{\r\n                    values[\"statusEdit\"] = true;\r\n                    if(this.state.AccData.accountsData.IcdDefaultStatusFlowConf == undefined){\r\n                        values[\"IcdDefaultStatusFlowConf\"] = this.state.AccData.accountsData.IcdDefaultStatusFlowConfEdit;\r\n                        var toCHeck = this.state.AccData.accountsData.IcdDefaultStatusFlowConfEdit;\r\n                    }else if(this.state.AccData.accountsData.IcdDefaultStatusFlowConfEdit == undefined){\r\n                        values[\"IcdDefaultStatusFlowConf\"] = this.state.AccData.accountsData.IcdDefaultStatusFlowConf;\r\n                        var toCHeck = this.state.AccData.accountsData.IcdDefaultStatusFlowConf;\r\n                    }\r\n                    \r\n                }\r\n                if(toCHeck != undefined || toCHeck != \"\"){\r\n                    validJson = this.isJSON(toCHeck, \"icd\");\r\n                }else{\r\n                    validJson = false;\r\n                }\r\n            }\r\n            if(values.ticketingToolUsed == \"service_now\" && values.dropletEnabled == true && (values.csmEnabled == false || values.csmEnabled == undefined)){\r\n                if(values.SnowDropletStatusFlowConf != '' && values.SnowDropletStatusFlowConf != undefined){\r\n                    values[\"statusEdit\"] = false;\r\n                    values[\"SnowDropletStatusConf\"] = values.SnowDropletStatusFlowConf ;\r\n                    var toCHeck = values.SnowDropletStatusFlowConf\r\n                }else{\r\n                    values[\"statusEdit\"] = true;\r\n                    if(this.state.AccData.accountsData.SnowDropletStatusFlowConf == undefined){\r\n                        values[\"SnowDropletStatusFlowConf\"] = this.state.AccData.accountsData.SnowDropletStatusFlowConfEdit;\r\n                        var toCHeck = this.state.AccData.accountsData.SnowDropletStatusFlowConfEdit;\r\n                    }else if(this.state.AccData.accountsData.SnowDropletStatusFlowConfEdit == undefined){\r\n                        values[\"SnowDropletStatusFlowConf\"] = this.state.AccData.accountsData.SnowDropletStatusFlowConf;\r\n                        var toCHeck = this.state.AccData.accountsData.SnowDropletStatusFlowConf;\r\n                    }\r\n                }\r\n                if(toCHeck != undefined || toCHeck != \"\"){\r\n                    validJson = this.isJSON(toCHeck, \"snowDroplet\");\r\n                }else{\r\n                    validJson = false;\r\n                }\r\n            }\r\n            if(values.ticketingToolUsed == \"service_now\" && (values.dropletEnabled == false || values.dropletEnabled == undefined) && values.csmEnabled == true){\r\n                if(values.SnowCsmStatusFlowConf != '' && values.SnowCsmStatusFlowConf != undefined){\r\n                    values[\"statusEdit\"] = false;\r\n                    values[\"SnowCsmStatusConf\"] = values.SnowCsmStatusFlowConf ;\r\n                    var toCHeck = values.SnowCsmStatusFlowConf\r\n                }else{\r\n                    values[\"statusEdit\"] = true;\r\n                    if(this.state.AccData.accountsData.SnowCsmStatusFlowConf == undefined){\r\n                        values[\"SnowCsmStatusFlowConf\"] = this.state.AccData.accountsData.SnowCsmStatusFlowConfEdit;\r\n                        var toCHeck = this.state.AccData.accountsData.SnowCsmStatusFlowConfEdit;\r\n                    }else if(this.state.AccData.accountsData.SnowCsmStatusFlowConfEdit == undefined){\r\n                        values[\"SnowCsmStatusFlowConf\"] = this.state.AccData.accountsData.SnowCsmStatusFlowConf;\r\n                        var toCHeck = this.state.AccData.accountsData.SnowCsmStatusFlowConf;\r\n                    }\r\n                }\r\n                if(toCHeck != undefined || toCHeck != \"\"){\r\n                    validJson = this.isJSON(toCHeck, \"snowCSM\");\r\n                }else{\r\n                    validJson = false;\r\n                }\r\n            }\r\n            if(values.ticketingToolUsed == \"service_now\" && (values.dropletEnabled == false || values.dropletEnabled == undefined) && (values.csmEnabled == false || values.csmEnabled == undefined)){\r\n                // if(values.SnowDropletStatusFlowConf != '' && values.SnowDropletStatusFlowConf != undefined){\r\n                if(values.SnowDefaultStatusFlowConf != '' && values.SnowDefaultStatusFlowConf != undefined){\r\n                    values[\"statusEdit\"] = false;\r\n                    values[\"SnowDefaultStatusConf\"] = values.SnowDefaultStatusFlowConf ;\r\n                    var toCHeck = values.SnowDefaultStatusFlowConf\r\n                }else{\r\n                    values[\"statusEdit\"] = true;\r\n                    if(this.state.AccData.accountsData.SnowDefaultStatusFlowConf == undefined){\r\n                        values[\"SnowDefaultStatusFlowConf\"] = this.state.AccData.accountsData.SnowDefaultStatusFlowConfEdit;\r\n                        var toCHeck = this.state.AccData.accountsData.SnowDefaultStatusFlowConfEdit;\r\n                    }else if(this.state.AccData.accountsData.SnowDefaultStatusFlowConfEdit == undefined){\r\n                        values[\"SnowDefaultStatusFlowConf\"] = this.state.AccData.accountsData.SnowDefaultStatusFlowConf;\r\n                        var toCHeck = this.state.AccData.accountsData.SnowDefaultStatusFlowConf;\r\n                    }\r\n                }\r\n                if(toCHeck != undefined || toCHeck != \"\"){\r\n                    validJson = this.isJSON(toCHeck, \"snowDefault\"); \r\n                }else{\r\n                    validJson = false;\r\n                }\r\n            }\r\n            if(values.enrollMaintenanceWindow === undefined){\r\n                values.enrollMaintenanceWindow = false;\r\n            }\r\n        }else{\r\n            validJson = true;\r\n        }\r\n        \r\n        \r\n        if(validJson === true){\r\n            this.setState({\r\n                isvalidJSon: false,\r\n                invalidJsonErr: \"\"\r\n            });\r\n            // SpecialCharacter validation\r\n            var validateFields = validate(values);\r\n            if(validateFields.length > 0){\r\n                var message = \"\";\r\n                for(var i =0; i<validateFields.length; i++){\r\n                    var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n                    if(element){\r\n                        message += element.title + \", \";\r\n                    }else{\r\n                        message += validateFields[i] + ', '\r\n                    }\r\n                }\r\n                this.setState({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n            }\r\n            else if(values.usingTicketingTool.toLowerCase() === \"yes\" && values.ticketingToolUsed === 'noTicketingTool'){\r\n                this.setState({\r\n                    isvalidJSon: false,\r\n                    invalidJsonErr: \"\"\r\n                });\r\n                this.setState({\r\n                    isInvalidData: true,\r\n                    invalidData: 'Ticketing Tool Used should be selected'\r\n                });\r\n            }\r\n            else if(values.assignmentServiceToAssignResource === 'icd' && values.ticketingToolUsed !== 'icd'){\r\n                this.setState({\r\n                    isvalidJSon: false,\r\n                    invalidJsonErr: \"\"\r\n                });\r\n                this.setState({\r\n                    isInvalidData: true,\r\n                    invalidData: '[Configure Information] -> Source for assigning incident channel owner and [Additional Information] -> Ticketing tool used - should be same'\r\n                });\r\n                \r\n            } else if(values.assignmentServiceToAssignResource === 'service_now' && values.ticketingToolUsed !== 'service_now'){\r\n                this.setState({\r\n                    isvalidJSon: false,\r\n                    invalidJsonErr: \"\"\r\n                });\r\n                this.setState({\r\n                    isInvalidData: true,\r\n                    invalidData: '[Configure Information] -> Source for assigning incident channel owner and [Additional Information] -> Ticketing Tool used - should be same'\r\n                });\r\n            }\r\n            else{\r\n                this.setState({\r\n                    isInvalidData: false,\r\n                    invalidData: ''\r\n                })\r\n                trackPromise(\r\n                    fetch('/mui/postOnboardAccountDetails' , {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            'Content-type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify(values)\r\n                    })\r\n                    .then((result) => {result.json()\r\n                        if(result.status == 200){\r\n                        this.props.history.push(\"/mui/onboardAccount\");\r\n                        }\r\n                    })\r\n                ) \r\n            }\r\n        }else{\r\n            this.setState({\r\n                isvalidJSon: true,\r\n                invalidJsonErr: \"Invalid JSON. Please enter proper JSON\"\r\n            })\r\n        }\r\n    }\r\n    registerState = (stateName,data) => {  \r\n        this.setState({\r\n            [stateName]: data,\r\n        });        \r\n    }\r\n\r\n    setServiceManager = event => {\r\n        this.setState({enableServiceManager: !this.state.enableServiceManager})\r\n    }\r\n\r\n    handleCheckbox = form => input => event => {\r\n    // handleCheckbox(name, event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.checked,\r\n          });\r\n    };\r\n    handleCheckbox3 = form => input => event => {\r\n    // handleCheckbox3(name, event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.checked,\r\n          });\r\n    };\r\n    // handleCheckboxPriority(event) {\r\n        handleCheckboxPriority = form => input => event => {\r\n        if(event.target.checked == true) {\r\n            this.setState({\r\n                allowedPriorities: [...this.state.allowedPriorities, event.target.getAttribute(\"data-value\")]\r\n            })\r\n        }else{\r\n            var index = this.state.allowedPriorities.indexOf(event.target.getAttribute(\"data-value\"));\r\n            if (index > -1) {\r\n                this.state.allowedPriorities.splice(index, 1);\r\n                this.setState({\r\n                    allowedPriorities: this.state.allowedPriorities\r\n                })\r\n            } \r\n        }\r\n    };\r\n    handleCheckboxGsma = (form) => (input) => (event) => {\r\n        this.setState({\r\n          enrollMaintenanceWindow: event.target.checked,\r\n        });\r\n    };\r\n\r\n    setdefaultFunctionalId = (defaultassignments) => {\r\n        let emailStr = defaultassignments\r\n        const workspaceList = this.state.AccData.accountsData.workspaceList;\r\n        const selectedWorkspaceData = workspaceList.filter(workspaceData => {\r\n            if(workspaceData.name === this.state.workspace){\r\n                return true;\r\n            }else {\r\n                return false;\r\n            }\r\n           })\r\n        const selectedRegion = selectedWorkspaceData[0].region;\r\n        const functionalEmailId = this.state.AccData.accountsData.teamsBotDetails[selectedRegion].functionalEmailId\r\n        if(!emailStr.includes(functionalEmailId)){\r\n            if(!emailStr || emailStr === ''){\r\n                emailStr = functionalEmailId;\r\n            }else {\r\n                emailStr = `${emailStr},${functionalEmailId}`\r\n            }\r\n        }\r\n        this.setState({\r\n            \"defaultassignments\": emailStr,\r\n        });\r\n    }\r\n    handleChange = form => input => event => {\r\n        if(form && this.state[[form]]) this.setState({[form]: false})\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n        });\r\n        if(event.target.name.startsWith(\"channelRules\")){\r\n        }\r\n        if(event.target.name === \"defaultassignments\"){\r\n            let emailStr =  event.target.value;\r\n            if(this.state.collaborationTool.toLowerCase() === 'teams'){\r\n               \r\n               const workspaceList = this.state.AccData.accountsData.workspaceList;\r\n               const selectedWorkspaceData = workspaceList.filter(workspaceData => {\r\n                if(workspaceData.name === this.state.workspace){\r\n                    return true;\r\n                }else {\r\n                    return false;\r\n                }\r\n               })\r\n               const selectedRegion = selectedWorkspaceData.region;\r\n               const functionalEmailId = this.state.AccData.accountsData.teamsBotDetails[selectedRegion].functionalEmailId\r\n               if(emailStr === ''){\r\n                emailStr = functionalEmailId;\r\n               }else {\r\n                emailStr = `${emailStr},${functionalEmailId}`\r\n               }\r\n            }\r\n            this.setState({\r\n                [event.target.name]: emailStr,\r\n            });\r\n        }\r\n        if(event.target.name == \"accGeo\"){\r\n            var geoSelected = event.target.value;\r\n            if( geoSelected == \"APAC\"){\r\n                this.setState({\r\n                    geo: \"APAC\",\r\n                });\r\n            }else if(geoSelected == \"Americas\"){\r\n                this.setState({\r\n                    geo: \"Americas\",\r\n                });\r\n            }else if(geoSelected == \"EMEA\"){\r\n                this.setState({\r\n                    geo: \"EMEA\",\r\n                });\r\n            }else if(geoSelected == \"Japan\"){\r\n                this.setState({\r\n                    geo: \"Japan\",\r\n                });\r\n            }else if(geoSelected == \"Choose an Option\"){\r\n                this.setState({\r\n                    geo: \"Choose an Option\",\r\n                });\r\n            }\r\n        }\r\n        if(event.target.name == \"eventSource\" && event.target.value != \"CDI\") {\r\n            this.setState({\r\n                squadBasedAssignment: \"no\",\r\n                aiopsSquadGeo: \"\"\r\n            })\r\n        }\r\n        if(event.target.name == \"eventSource\" && event.target.value == \"netcool\") {\r\n            this.setState({\r\n                usingTicketingTool: 'yes',\r\n                chatopsCommandAuth: 'chatopsAuth',\r\n            })\r\n        }\r\n        if(event.target.name == \"eventSource\" && event.target.value == \"CDI\") {\r\n            this.setState({\r\n                usingTicketingTool: '',\r\n                chatopsCommandAuth: '',\r\n            })\r\n        }\r\n        if(event.target.name == \"usingTicketingTool\" && event.target.value == \"yes\") {\r\n            this.setState({\r\n                chatopsCommandAuth: 'chatopsAuth'\r\n            })\r\n        }\r\n        if(event.target.name == \"ticketingToolUsed\" && event.target.value == \"icd\") {\r\n            this.setState({\r\n                typeOfAuthentication: 'basic'\r\n            })\r\n        }\r\n        if(event.target.name == \"ansibleIntegratedWithChatops\") {\r\n            if(event.target.value === \"no\"){\r\n                this.setState({ ansibleInstance: '',ansibleInstanceLogFlag: 'no',ansibleInstanceLogChannels: '',ansibleInstanceLogTemplate: 'no'});\r\n            };\r\n            this.setState({\r\n                usingAnsibleIntegration: event.target.value\r\n            })\r\n        }\r\n        if(event.target.name == \"ansibleInstanceLogFlag\") {\r\n            this.setState({\r\n                ansibleInstanceLogFlag: event.target.value\r\n            });\r\n        }\r\n        if(event.target.name == \"ansibleInstanceLogTemplate\") {\r\n            this.setState({\r\n                ansibleInstanceLogTemplate: event.target.value\r\n            });\r\n        }\r\n\r\n        var eventSource = {}\r\n        var accListState = this.state\r\n        if(accListState.AccData){\r\n            var accList = accListState.AccData;\r\n            if(accList.accountsData){\r\n                var accountDetail = accList.accountsData;\r\n                var countryList = accountDetail.countryList;\r\n                Object.entries(countryList).map(([key, value]) => {\r\n                    if(event.target.value == value.desc){\r\n                        this.setState({\r\n                            isoCountryCode: value.isocode,\r\n                            countryName: event.target.value,\r\n                            countryCode:  value.countrycode\r\n                        })\r\n                    }\r\n                }); \r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    handleSubmit = (form) => { // [general, config]\r\n        if(form == \"general\") this.setState({generalFormSubmitted: true})\r\n        else if (form == \"config\") this.setState({configFormSubmitted: true})\r\n    }\r\n\r\n    render(){\r\n        const {step} = this.props;\r\n        const { accGeo, accMarket, accSector, isoCountryCode, countryName,countryCode, accIndustry, accCountry , blueID , CDIR,GBGID , dpeAdminName , dpeAdminEmail , itsmAdminName , itsmAdminEmail , networkAdminName , networkAdminEmail, collaborationTool, workspace , defaultLanguage , incidentChannelType , eventSource ,allowedPriorities, accountUtilizingNetcool, severityList , triggerChatOpsProcess, aiopsAccIdentifier , defaultassignments ,assignmentServiceToAssignResource, squadBasedAssignment , aiopsSquadGeo , gnmAssignments, groupAssignment , usingTicketingTool , chatopsCommandAuth , authType ,tickertingRestURL, ticketingToolUsed, enableServiceManager, typeOfAuthentication , basicAuthUserID, basicAuthPassword, oauthClientID , oauthClientSecret, internetFacing, relatedInsights, enableCiDetails, enableDescDetails, enableStackDetails, enableOwner, otherInformation, CDITicketToolID, dropletEnabled, csmEnabled, urlPath, tableName, dedicatedDropletInstance, companyName, SnowDropletStatusFlowConf, SnowCsmStatusFlowConf, IcdDefaultStatusFlowConf, SnowDefaultStatusFlowConf, enrollMaintenanceWindow } = this.state;\r\n        const values = { accGeo, accMarket, accSector, isoCountryCode, countryName,countryCode, accIndustry, accCountry , blueID , CDIR,GBGID , dpeAdminName , dpeAdminEmail , itsmAdminName , itsmAdminEmail , networkAdminName , networkAdminEmail, collaborationTool, workspace , defaultLanguage , incidentChannelType , eventSource , allowedPriorities,accountUtilizingNetcool, severityList, triggerChatOpsProcess, aiopsAccIdentifier , defaultassignments ,assignmentServiceToAssignResource, squadBasedAssignment , aiopsSquadGeo , gnmAssignments, groupAssignment , usingTicketingTool , chatopsCommandAuth ,tickertingRestURL, authType , ticketingToolUsed, enableServiceManager, typeOfAuthentication , basicAuthUserID, basicAuthPassword, oauthClientID , oauthClientSecret, internetFacing, relatedInsights, enableCiDetails, enableDescDetails, enableStackDetails, enableOwner, otherInformation, CDITicketToolID, dropletEnabled, csmEnabled, urlPath, tableName, dedicatedDropletInstance, companyName, SnowDropletStatusFlowConf, SnowCsmStatusFlowConf, IcdDefaultStatusFlowConf, SnowDefaultStatusFlowConf, enrollMaintenanceWindow };\r\n        switch(step) {\r\n        case 1:\r\n            return <GeneralInfo\r\n                    nextStep={this.props.nextStep}\r\n                    handleChange = {this.handleChange('generalFormSubmitted')}\r\n                    values={this.state}\r\n                    onSubmit={this.handleSubmit}\r\n                    submitForm={this.submitForm}\r\n                    {...this.state}\r\n                    />\r\n        case 2:\r\n            return <ConfigForm\r\n                    nextStep={this.props.nextStep}\r\n                    prevStep={this.props.prevStep}\r\n                    submitForm={this.submitForm}\r\n                    onSubmit={this.handleSubmit}\r\n                    handleChange = {this.handleChange('configFormSubmitted')}\r\n                    handleCheckboxPriority = {this.handleCheckboxPriority('handleCheckboxPriority')}\r\n                    handleCheckboxGsma = {this.handleCheckboxGsma('gsma')}\r\n                    values={this.state}\r\n                    registerState={this.registerState}\r\n                    setdefaultFunctionalId={this.setdefaultFunctionalId}\r\n                    {...this.state}\r\n                    />\r\n        case 3:\r\n            return <AdditionalInfoForm\r\n                    nextStep={this.props.nextStep}\r\n                    prevStep={this.props.prevStep}\r\n                    handleChange = {this.handleChange()}\r\n                    submitForm={this.submitForm}\r\n                    values={this.state}\r\n                    registerState={this.registerState}\r\n                    setServiceManager = {this.setServiceManager}\r\n                    {...this.state}\r\n                    />\r\n        case 4:\r\n            return  <OnboardAccount />\r\n        default: return null;\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default withRouter(MainForm);","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\AAForm\\additionalInfoForm.jsx",["1167","1168","1169","1170","1171","1172","1173","1174","1175","1176","1177","1178","1179","1180","1181","1182","1183","1184","1185","1186","1187","1188","1189","1190","1191","1192","1193","1194","1195","1196","1197","1198","1199","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1212","1213","1214","1215","1216","1217","1218","1219","1220","1221","1222","1223","1224","1225","1226","1227","1228","1229","1230","1231","1232","1233","1234","1235","1236","1237","1238","1239","1240","1241","1242","1243","1244","1245","1246","1247","1248","1249","1250","1251","1252","1253","1254","1255","1256","1257","1258","1259","1260","1261","1262","1263","1264","1265","1266","1267","1268","1269","1270","1271","1272","1273","1274","1275","1276","1277","1278","1279","1280","1281","1282","1283","1284","1285","1286","1287","1288","1289","1290","1291","1292","1293","1294","1295","1296","1297","1298","1299"],"// AdditionalInfoForm.jsx\r\nimport{\r\nColumn,\r\nGrid,\r\nRow,\r\nSelect,\r\nSelectItem,\r\nTextArea,\r\nTextInput,\r\nButton,\r\nForm,\r\nFormLabel,\r\nFormGroup,\r\nCheckbox,\r\n\r\n} from \"carbon-components-react\";\r\nimport React, { Component } from \"react\";\r\nimport \"../form.scss\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport {CheckmarkFilled32, CloseFilled32} from \"@carbon/icons-react\";\r\nimport { Tooltip } from \"carbon-components-react/lib/components/Tooltip/Tooltip\";\r\n// import ButtonsForm from '../../Buttons';\r\nimport { Close32 } from \"@carbon/icons-react\";\r\n\r\nconst styles = {\r\n    labelAsterisk: {\r\n        color: \"red\"\r\n    }\r\n};\r\n\r\nclass AdditionalInfoForm extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state ={            \r\n            encryptedData:[],\r\n            ansibleFeature:'',\r\n            ansibleInstanceItems:'',\r\n            cacfAnsibleInstanceItems:'',\r\n            autoStatus: false\r\n        };\r\n        this.loadData = this.loadData.bind(this);\r\n    }\r\n\r\n    saveAndContinue = (e) => {\r\n        e.preventDefault();\r\n        this.props.nextStep();\r\n    }\r\n\r\n    componentDidMount() {\r\n     \r\n    }\r\n\r\n    submitAndContinue = (e) => {\r\n        e.preventDefault();\r\n        var saved = false;\r\n        var submitted = false;\r\n        if(this.props.ticketingToolUsed == \"icd\"){\r\n            var IcdDefaultStatusConf =this.props.IcdDefaultStatusFlowConf ;\r\n        }\r\n        if(this.props.ticketingToolUsed == \"service_now\" && this.props.dropletEnabled == true && this.props.csmEnabled == false){\r\n            var SnowDropletStatusConf = this.props.SnowDropletStatusFlowConf ;\r\n        }\r\n        if(this.props.ticketingToolUsed == \"service_now\" && this.props.dropletEnabled == false && this.props.csmEnabled == true){\r\n            var SnowCsmStatusConf = this.props.SnowCsmStatusFlowConf;\r\n        }\r\n        if(this.props.ticketingToolUsed == \"service_now\" && this.props.dropletEnabled == false && this.props.csmEnabled == false){\r\n            var SnowDefaultStatusConf = this.props.SnowDefaultStatusFlowConf ;\r\n        }\r\n        if(e.target.className.includes(\"saveData\")){\r\n            saved = true;\r\n            submitted = false;\r\n            this.props.submitForm(saved);\r\n        }else{\r\n            saved = false;\r\n            submitted = true;\r\n            const ticketingToolData = {\r\n                usingTicketingTool: this.props.usingTicketingTool,\r\n                toolType: this.props.ticketingToolUsed,\r\n                toolURL: this.props.tickertingRestURL,\r\n                authType: this.props.typeOfAuthentication,\r\n                userId: this.props.basicAuthUserID,\r\n                userPassword: this.props.basicAuthPassword,\r\n                oauthClientID: this.props.oauthClientID,\r\n                oauthClientSecret: this.props.oauthClientSecret,\r\n                dropletEnabled: this.props.dropletEnabled,\r\n                csmEnabled: this.props.csmEnabled,\r\n                urlPath: this.props.urlPath,\r\n                dedicatedDropletInstance: this.props.dedicatedDropletInstance,\r\n                tableName: this.props.tableName,\r\n                companyName: this.props.companyName,\r\n                relatedInsights: this.props.relatedInsights,\r\n                enableCiDetails: this.props.enableCiDetails,\r\n                enableDescDetails: this.props.enableDescDetails,\r\n                //enableOwner: this.props.enableOwner,\r\n                enableServiceManager: this.props.enableServiceManager,\r\n                IcdDefaultStatusConf: IcdDefaultStatusConf,\r\n                SnowDropletStatusConf: SnowDropletStatusConf,\r\n                SnowCsmStatusConf: SnowCsmStatusConf,\r\n                SnowDefaultStatusConf: SnowDefaultStatusConf,\r\n            };\r\n        \r\n            if(this.props.usingTicketingTool == 'yes'){\r\n                trackPromise(\r\n                    fetch(\"/mui/testToolConnection\", {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                        \"Content-type\": \"application/json\",\r\n                        },\r\n                        body: JSON.stringify(ticketingToolData),\r\n                    }).then(async (result) => {\r\n                        if (result.status == 200) {\r\n                        this.setState({\r\n                            showSuccess: true,\r\n                            showFailure: false,\r\n                        });\r\n                        this.props.submitForm(saved);\r\n                        } else {\r\n                        this.setState({\r\n                            showFailure: true,\r\n                            showSuccess: false,\r\n                        });\r\n                        this.setState({\r\n                            showFailPopup: true,\r\n                        });\r\n                        }\r\n                    })\r\n                );\r\n            } else {\r\n                this.props.submitForm(saved);\r\n            }\r\n        }\r\n      // this.props.submitForm();\r\n    }\r\n\r\n    submitPopup = (e) => {\r\n        e.preventDefault();\r\n        var saved = false;\r\n        var submitted = true;\r\n        this.setState({\r\n            showFailPopup: false,\r\n        });\r\n        this.props.submitForm(saved);\r\n    };\r\n\r\n    cancelPopup = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            showFailPopup: false,\r\n        });\r\n    };\r\n\r\n    handleInsightCheckbox(name, event) {\r\n        this.props.relatedInsights = event.target.checked;\r\n        this.props.registerState(\"relatedInsights\", this.props.relatedInsights);\r\n    };\r\n    handleDropletEnabled(name, event) {\r\n        this.props.dropletEnabled = event.target.checked;\r\n        var accData = this.props?.AccData?.accountsData;\r\n        if(accData){\r\n            if(this.props.dropletEnabled == false){\r\n                this.props.dedicatedDropletInstance = true;\r\n            }\r\n        }\r\n        this.props.registerState(\"dropletEnabled\", this.props.dropletEnabled);\r\n    };\r\n    handlecsmEnabled(name, event) {\r\n        this.props.csmEnabled = event.target.checked;\r\n        this.props.registerState(\"csmEnabled\", this.props.csmEnabled);\r\n    };\r\n    handleDedicatedDropletInstance(name, event) {\r\n        this.props.dedicatedDropletInstance = event.target.checked;\r\n        this.props.registerState(\"dedicatedDropletInstance\", this.props.dedicatedDropletInstance);\r\n    };\r\n\r\n    handleCiCheckbox(name, event) {\r\n        this.props.enableCiDetails = event.target.checked;\r\n        this.props.registerState(\"enableCiDetails\", this.props.enableCiDetails);\r\n    };\r\n\r\n    handleDescCheckbox(name, event) {\r\n        this.props.enableDescDetails = event.target.checked;\r\n        this.props.registerState(\"enableDescDetails\", this.props.enableDescDetails);\r\n    };\r\n\r\n    handleStackCheckbox(name, event) {\r\n        this.props.enableStackDetails = event.target.checked;\r\n        this.props.registerState(\"enableStackDetails\", this.props.enableStackDetails);\r\n    };\r\n    handleWatsonCheckbox(name, event) {\r\n        this.props.enableWatsonAssistant = event.target.checked;\r\n        this.props.registerState(\"enableWatsonAssistant\", this.props.enableWatsonAssistant);\r\n    };\r\n\r\n    checkConnection = (e) => {\r\n        e.preventDefault();\r\n        const ticketingToolData = {\r\n            toolType: this.props.ticketingToolUsed,\r\n            toolURL: this.props.tickertingRestURL,\r\n            authType: this.props.typeOfAuthentication,\r\n            userId: this.props.basicAuthUserID,\r\n            userPassword: this.props.basicAuthPassword,\r\n            oauthClientID: this.props.oauthClientID,\r\n            oauthClientSecret: this.props.oauthClientSecret,\r\n            tableName: this.props.tableName,\r\n            dropletEnabled: this.props.dropletEnabled,\r\n            csmEnabled: this.props.csmEnabled\r\n        };\r\n  \r\n        trackPromise(\r\n            fetch(\"/mui/testToolConnection\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(ticketingToolData),\r\n            }).then(async (result) => {\r\n                if (result.status == 200) {\r\n                    e.preventDefault();\r\n                    this.setState({\r\n                    showSuccess: true,\r\n                    showFailure: false,\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                    showFailure: true,\r\n                    showSuccess: false,\r\n                    });\r\n                }\r\n            })\r\n        );\r\n    };\r\n\r\n    back  = (e) => {\r\n        e.preventDefault();\r\n        this.props.prevStep();\r\n    }\r\n\r\n    loadData = () => {\r\n        trackPromise(\r\n            fetch(\"/mui/onboardAccountFormData\")\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((AccData) => {\r\n                this.props.registerState(\"AccData\", AccData);\r\n                this.handleInstanceChange(this.state.ansibleFeature)\r\n            })\r\n        );\r\n    };\r\n\r\n    formatAnsibleInstanceData = (ansibleInstances) => {\r\n      \r\n        let accountCode = (this.props.AccData.accountsData)?this.props.AccData.accountsData.accountCode:false;\r\n        let accountAnsibleInstances = ansibleInstances.filter(\r\n            (a) => a.accountCode == accountCode);\r\n        let cacfAnsibleInstances = ansibleInstances.filter(\r\n            (a) => a.threeScale == true);\r\n        let ansibleInstanceItems =  this.formatOptions(accountAnsibleInstances);\r\n        let cacfAnsibleInstanceItems = this.formatOptions(cacfAnsibleInstances);\r\n        let selectedAnsible = (accountAnsibleInstances.length > 0)?accountAnsibleInstances[0]['name']:'';\r\n        let selectedCacf = (cacfAnsibleInstances.length > 0)?cacfAnsibleInstances[0]['name']:'';\r\n        return {ansibleInstanceItems, cacfAnsibleInstanceItems, selectedAnsible, selectedCacf};\r\n    };\r\n\r\n    formatOptions(ansibleInstances){\r\n\r\n        let formatAnsibleInstanceData = [];\r\n        for(const ansibleInstance of ansibleInstances){\r\n            let formOption = (\r\n                <option className=\"bx--select-option\" defaultValue={ansibleInstance.url}>\r\n                    {ansibleInstance.name}\r\n                </option>\r\n            );\r\n            formatAnsibleInstanceData.push(formOption);\r\n        }\r\n        return formatAnsibleInstanceData;\r\n    }\r\n\r\n    formatTemplateOptions(templateLists){\r\n\r\n        let formatData = [];\r\n        for(const templateList of templateLists){\r\n            let formOption = (\r\n                <option className=\"bx--select-option\" defaultValue={templateList.name}>\r\n                    {templateList.name}\r\n                </option>\r\n            );\r\n            formatData.push(formOption);\r\n        }\r\n        return formatData;\r\n    }\r\n\r\n    handleInstanceChange = (value) => {\r\n        this.setState({ansibleFeature:value});\r\n        this.setState({cacfAnsibleInstanceItems:[]});\r\n        this.setState({ansibleInstanceItems:[]});\r\n        let accData = this.props.AccData;\r\n        let ansibleInstance =  accData.accountsData.ansibleInstanceList;\r\n        let {ansibleInstanceItems,cacfAnsibleInstanceItems,selectedCacf,selectedAnsible} = this.formatAnsibleInstanceData(ansibleInstance);\r\n        setTimeout(() => {\r\n            this.setState({cacfAnsibleInstanceItems:cacfAnsibleInstanceItems});\r\n            this.setState({ansibleInstanceItems:ansibleInstanceItems});\r\n            this.props.ansibleInstance = (this.state.ansibleFeature == 'cacf') ? selectedCacf : selectedAnsible;\r\n        },10);\r\n    };\r\n\r\n    handleAnsibleInputChange = (e) => {\r\n        this.setState({ansibleInvalidMsg:''});\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n\r\n    handleAnsibleCheckChange = (checked,name) => {\r\n        this.setState({[name]: checked});\r\n    }\r\n\r\n    isValidURL = (urlString) => {\r\n        let url;\r\n        try {\r\n            url = new URL(urlString);\r\n        } catch (_) {\r\n            return false;  \r\n        }\r\n        return url.protocol === \"http:\" || url.protocol === \"https:\";\r\n    };\r\n\r\n    checkDuplicateAnsibleName = () => {\r\n\r\n        var accData = this.props.AccData;\r\n        let ansibleInstances =  accData.accountsData.ansibleInstanceList;\r\n        let ansibleInstanceObject = ansibleInstances.find(a => a.name.toLowerCase() == this.state.ansibleInstanceName.toLowerCase()); \r\n        if(ansibleInstanceObject){\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n\ttestConnectionAnsibleInstance = async() => {\r\n\t\r\n        const url = this.state.ansibleInstanceUrl;\r\n        const key = this.state.ansibleInstanceKey;\r\n        var response = fetch(`/mui/ansibleInstance/testconnection?url=${url}&key=${key}`)\r\n        .then((res) => {\r\n            return res.json();\r\n        })\r\n        .then((result) => {\r\n            return result;\r\n        })\r\n        trackPromise(response);\r\n        let results = await response;\r\n        return results;\r\n    };\r\n\r\n    showModal = (e) => {\r\n        this.setState({\r\n            showPopup: true,\r\n        });\r\n    };\r\n\r\n    cancelModal = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            showPopup: false,\r\n        });\r\n    };\r\n\r\n    saveAnsibleInstance = async(e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        this.setState({ansibleInvalidMsg:''});\r\n\r\n        if(!this.checkDuplicateAnsibleName()){\r\n            this.setState({ansibleInvalidMsg:'Ansible instance name already exists!!'});\r\n            return;\r\n        }\r\n\r\n        if(!this.isValidURL(this.state.ansibleInstanceUrl)){\r\n            this.setState({ansibleInvalidMsg:'Invalid Url!!'});\r\n            return;\r\n        }\r\n\r\n        let testConnection = await this.testConnectionAnsibleInstance()\r\n        if(!testConnection || !testConnection.success){\r\n            this.setState({ansibleInvalidMsg:'Test connection to ansible instance failed!!'});\r\n            return;\r\n        }\r\n        if(this.state.isThreeScale && !this.state.ansibleInstanceKey){\r\n            this.setState({ansibleInvalidMsg:'Invalid User Key!!'});\r\n            return;\r\n        }\r\n        let accountCode = (this.props.AccData.accountsData)?this.props.AccData.accountsData.accountCode:false;\r\n        if(!accountCode){\r\n            this.setState({ansibleInvalidMsg:'Account Code Missing!!'});\r\n            return;\r\n        }\r\n        const ansibleInstanceData = {\r\n            name: this.state.ansibleInstanceName,\r\n            url:this.state.ansibleInstanceUrl,\r\n                userKey:this.state.ansibleInstanceKey,\r\n            threeScale: this.state.isThreeScale,\r\n            accountCode: accountCode\r\n        };\r\n        if(this.state.autoStatus){\r\n            ansibleInstanceData['autoStatus'] = 'cron';\r\n        }\r\n\r\n        trackPromise(\r\n            fetch(\"/mui/ansibleInstance\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ansibleInstanceData}),\r\n            }).then(async (result) => {\r\n                const parsedMsz = await result.json();\r\n                if (result.status == 200 && parsedMsz.success) {\r\n                    e.preventDefault();\r\n                    this.setState({\r\n                    showPopup: false,\r\n                    ansibleInvalidMsg: undefined,\r\n                    ansibleInstanceName:'',\r\n                    ansibleInstanceUrl:'',\r\n                    threeScale:false,\r\n                    autoStatus:false,\r\n                    userKey:'',\r\n                    });\r\n                    this.loadData();\r\n                } else {\r\n                    this.setState({\r\n                    showPopup: true,\r\n                    ansibleInvalidMsg: 'Failed adding ansible instance',\r\n                    });\r\n                }\r\n            })\r\n        );\r\n    };\r\n\r\n\r\n    ansibleModalHtml = () => {\r\n        return (\r\n            <div className=\"popup\">\r\n                <div className=\"bx--modal-container modal-css-ansible\">\r\n                    <div className=\"bx--modal-header\">\r\n                        <p\r\n                        className=\"bx--modal-header__label bx--type-delta\"\r\n                        id=\"modal-ansible-label\"\r\n                        ></p>\r\n                        <p\r\n                        className=\"bx--modal-header__heading bx--type-beta\"\r\n                        id=\"modal-ansible-heading\"\r\n                        >\r\n                        Add Ansible Instance\r\n                        </p>\r\n                        \r\n                        <button\r\n                        className=\"bx--modal-close\"\r\n                        type=\"button\"\r\n                        data-modal-close\r\n                        aria-label=\"close modal\"\r\n                        >\r\n                        <Close32\r\n                            className=\"iconEditSize\"\r\n                            onClick={this.cancelModal}\r\n                        />\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"bx--modal-content\">\r\n                        {this.state.ansibleInvalidMsg && (\r\n                        <h4>\r\n                            <b className=\"fontRed\">\r\n                            {this.state.ansibleInvalidMsg}\r\n                            </b>\r\n                        </h4>\r\n                        )}\r\n                        <Form>\r\n                        <TextInput\r\n                        className=\"bx--text-input bx--text__input\"\r\n                        id=\"ansibleInstanceName\"\r\n                        name=\"ansibleInstanceName\"\r\n                        labelText={\r\n                            <>\r\n                            Name <b className=\"fontRed\">*</b>\r\n                            </>\r\n                        }\r\n                        placeholder=\"name\"\r\n                        onBlur={this.handleAnsibleInputChange}\r\n                        />\r\n                        <br />\r\n                        <TextInput\r\n                        className=\"bx--text-input bx--text__input\"\r\n                        id=\"ansibleInstanceUrl\"\r\n                        name=\"ansibleInstanceUrl\"\r\n                        labelText={\r\n                            <>\r\n                            URL <b className=\"fontRed\">*</b>\r\n                            </>\r\n                        }\r\n                        placeholder=\"url\"\r\n                        onBlur={this.handleAnsibleInputChange}\r\n                        />\r\n    \r\n                        <div class=\"addAccBtn\">\r\n                        <Checkbox\r\n                            id=\"autoStatus\"\r\n                            labelText=\"Auto Job Status\"\r\n                            onChange={(isChecked) =>\r\n                                this.handleAnsibleCheckChange(isChecked, \"autoStatus\")\r\n                            }\r\n                            checked={this.state.autoStatus}\r\n                        />\r\n                        </div>\r\n\r\n                        </Form>\r\n                    </div>\r\n                    <div className=\"bx--modal-content--overflow-indicator\"></div>\r\n\r\n                    <div className=\"bx--modal-footer\">\r\n                        <Button\r\n                        kind=\"secondary\"\r\n                        className=\"addWorkspace\"\r\n                        onClick={this.cancelModal}\r\n                        >\r\n                        Cancel\r\n                        </Button>\r\n                        <Button\r\n                        kind=\"primary\"\r\n                        type=\"submit\"\r\n                        className=\"addWorkspace\"\r\n                        disabled={(!this.state.ansibleInstanceUrl || !this.state.ansibleInstanceName )}\r\n                        onClick={this.saveAnsibleInstance}\r\n                        >\r\n                        Add Ansible Instance\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <span tabindex=\"0\"></span>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    enableAnsibleHtml = () => {\r\n\r\n        var accData = this.props.AccData;\r\n        let ansibleInstance =  accData.accountsData.ansibleInstanceList;\r\n        let {ansibleInstanceItems,cacfAnsibleInstanceItems} = this.formatAnsibleInstanceData(ansibleInstance);\r\n        let ansibleInstanceOptions = this.state.ansibleInstanceItems || ansibleInstanceItems;\r\n      \r\n        return (\r\n            <Row>\r\n                <Column>\r\n                    <br />\r\n                    <Select\r\n                    className=\"labelFont\"\r\n                    id=\"ansibleInstance\"\r\n                    labelText={\r\n                    <span>\r\n                        Select Ansible instance <b className=\"fontRed\">*</b>\r\n                        <Tooltip>\r\n                        Add Ansible Tower Instance <br />\r\n                        User either can select existing ansible instance or add new\r\n                        Ansible instance by giving appropriate details\r\n                        </Tooltip>\r\n                        <a\r\n                        className=\"addWorkspaceLink\"\r\n                        onClick={(e) => { this.showModal(); }}\r\n                        >\r\n                        Add Ansible Instance\r\n                        </a>\r\n                    </span>\r\n                    }\r\n                    name=\"ansibleInstance\"\r\n                    onChange={this.props.handleChange(\"ansibleInstance\")}\r\n                    defaultValue={this.props.ansibleInstance}\r\n                    required\r\n                >\r\n                    <SelectItem hidden value=\"\" text=\"Choose an option\" />\r\n                    {ansibleInstanceOptions} \r\n                </Select>\r\n                </Column>\r\n                <Column></Column>\r\n            </Row>\r\n        )\r\n    }\r\n\r\n    enableCacfHtml = () => {\r\n\r\n        var accData = this.props.AccData;\r\n        let ansibleInstance =  accData.accountsData.ansibleInstanceList;\r\n        let {ansibleInstanceItems,cacfAnsibleInstanceItems} = this.formatAnsibleInstanceData(ansibleInstance);\r\n        let cacfInstanceOptions = this.state.cacfAnsibleInstanceItems || cacfAnsibleInstanceItems;\r\n\r\n        return (\r\n            <Row>\r\n                <Column>\r\n                    <br />\r\n                    <Select\r\n                        className=\"labelFont\"\r\n                        id=\"ansibleInstance\"\r\n                        labelText={\r\n                        <span>\r\n                            Select CACF instance <b className=\"fontRed\">*</b>\r\n                        </span>\r\n                        }\r\n                        name=\"ansibleInstance\"\r\n                        onChange={this.props.handleChange(\"ansibleInstance\")}\r\n                        defaultValue={this.props.ansibleInstance}\r\n                        required\r\n                    >\r\n                        <SelectItem hidden value=\"\" text=\"Choose an option\" />\r\n                        {cacfInstanceOptions} \r\n                    </Select>\r\n                \r\n                </Column>\r\n                <Column></Column>\r\n            </Row>\r\n        )\r\n    }\r\n\r\n    jobLogHtml = () => {\r\n\r\n        const { values } = this.props;\r\n        var accData = this.props.AccData;\r\n        let templateList =  accData.accountsData.ansibleInstanceTemplateList;\r\n        let templateOptions = this.formatTemplateOptions(templateList);\r\n      \r\n        return (\r\n            <Row>\r\n                <Column>\r\n                    <Select\r\n                        className=\"labelFont\"\r\n                        id=\"ansibleInstanceLogFlag\"\r\n                        labelText={\r\n                        <span>\r\n                            Job Log with Notification\r\n                        </span>\r\n                        }\r\n                        name=\"ansibleInstanceLogFlag\"\r\n                        onChange={this.props.handleChange(\"ansibleInstanceLogFlag\")}\r\n                        required\r\n                    >\r\n                        <SelectItem value=\"no\" text=\"No\" selected={values.ansibleInstanceLogFlag != \"yes\"} /> \r\n                        <SelectItem value=\"yes\" text=\"Yes\" selected={values.ansibleInstanceLogFlag == \"yes\"} />\r\n                    </Select>\r\n                </Column>\r\n                <Column>\r\n                   <Select\r\n                        className=\"labelFont\"\r\n                        id=\"ansibleInstanceLogTemplate\"\r\n                        labelText={\r\n                        <span>\r\n                            Notification Template \r\n                        </span>\r\n                        }\r\n                        name=\"ansibleInstanceLogTemplate\"\r\n                        onChange={this.props.handleChange(\"ansibleInstanceLogTemplate\")}\r\n                        defaultValue={this.props.ansibleInstanceLogTemplate}\r\n                        required\r\n                    >\r\n                        <SelectItem value=\"no\" text=\"No\" selected={values.ansibleInstanceLogTemplate != \"yes\"} /> \r\n                         {templateOptions} \r\n                    </Select>\r\n                </Column>\r\n                <Column>\r\n                <TextInput\r\n                    className=\"labelFont\"\r\n                    id=\"ansibleInstanceLogChannels\"\r\n                    placeholder=\"Channels\"\r\n                    labelText={<>Notification Channels</>}\r\n                    name=\"ansibleInstanceLogChannels\"\r\n                    onChange={this.props.handleChange('ansibleInstanceLogChannels')}\r\n                    defaultValue={this.props.ansibleInstanceLogChannels}\r\n                />\r\n                </Column>\r\n                \r\n            </Row>\r\n        )\r\n    }\r\n\r\n    render(){\r\n        const { values } = this.props;\r\n        var disableCMS = false;\r\n        var disabledroplet = false;\r\n        if(values.dropletEnabled == true){\r\n            disableCMS = true;\r\n        }else{\r\n            disableCMS = false;\r\n        }\r\n        if(values.csmEnabled == true){\r\n            disabledroplet = true;\r\n        }else{\r\n            disabledroplet = false;\r\n        }\r\n        var stateData = this.state;\r\n        var accData = this.props.AccData;\r\n        if(accData.length !==0){\r\n            var accountsData = accData.accountsData;\r\n            var submitted = accountsData.submitted;\r\n            var savedBtn = '';\r\n            var saved = accountsData.saved;\r\n            var snowDefault = false;\r\n            var snowDroplet = false;\r\n            var snowCsm = false;\r\n            var icdDefault = false;\r\n            var snowDefaultInput = '';\r\n            var IcdDefaultStatusFlowConf = '';\r\n            var SnowDropletStatusFlowConf = '';\r\n            var SnowCsmStatusFlowConf = '';\r\n            var SnowDefaultStatusFlowConf = '';\r\n\r\n            if(values.usingTicketingTool == \"yes\" && (values.IcdDefaultStatusFlowConf != undefined || values.SnowCsmStatusFlowConf != undefined || values.SnowDefaultStatusFlowConf != undefined || values.SnowDropletStatusFlowConf != undefined)){\r\n                if(values.ticketingToolUsed == \"icd\"){\r\n                    if(typeof accountsData.SnowDropletStatusFlowConf == 'object'){\r\n                        IcdDefaultStatusFlowConf = JSON.stringify(accountsData.IcdDefaultStatusFlowConf).replaceAll(\",\", \", \\n\");\r\n                    }else{\r\n                        IcdDefaultStatusFlowConf = values.IcdDefaultStatusFlowConf\r\n                    }\r\n                }\r\n                if(values.ticketingToolUsed == \"service_now\" && values.dropletEnabled == true && (values.csmEnabled == false || values.csmEnabled == undefined)){\r\n                    if(typeof accountsData.SnowDropletStatusFlowConf == 'object'){\r\n                        SnowDropletStatusFlowConf = JSON.stringify(accountsData.SnowDropletStatusFlowConf).replaceAll(\",\", \", \\n\");\r\n                    }else{\r\n                        SnowDropletStatusFlowConf = values.SnowDropletStatusFlowConf\r\n                    }\r\n                }\r\n                if(values.ticketingToolUsed == \"service_now\" && (values.dropletEnabled == false || values.dropletEnabled == undefined) && values.csmEnabled == true){\r\n                    if(typeof accountsData.SnowCsmStatusFlowConf == 'object'){\r\n                        SnowCsmStatusFlowConf = JSON.stringify(accountsData.SnowCsmStatusFlowConf).replaceAll(\",\", \", \\n\");\r\n                    }else{\r\n                        SnowCsmStatusFlowConf = values.SnowCsmStatusFlowConf\r\n                    }\r\n                }\r\n                if(values.ticketingToolUsed == \"service_now\" && (values.dropletEnabled == false || values.dropletEnabled == undefined) && (values.csmEnabled == false || values.csmEnabled == undefined)){\r\n                    if(typeof accountsData.SnowDefaultStatusFlowConf == 'object'){\r\n                        SnowDefaultStatusFlowConf = JSON.stringify(accountsData.SnowDefaultStatusFlowConf).replaceAll(\",\", \", \\n\");\r\n                    }else{\r\n                        SnowDefaultStatusFlowConf = values.SnowDefaultStatusFlowConf\r\n                    }\r\n                }\r\n                if(submitted == false && (saved == true || saved == false)){ \r\n                    savedBtn = <Button className=\"btnMargin saveData\" kind='secondary' key=\"saveData\" onClick={this.submitAndContinue}>Save</Button>\r\n                }else if(submitted == true && (saved == true || saved == false)){\r\n                    savedBtn = ''\r\n                }\r\n            }\r\n            if(values.usingTicketingTool == \"yes\" && (values.IcdDefaultStatusFlowConf == undefined || values.SnowCsmStatusFlowConf == undefined || values.SnowDefaultStatusFlowConf == undefined || values.SnowDropletStatusFlowConf == undefined)){\r\n                if(values.ticketingToolUsed == \"icd\"){\r\n                    IcdDefaultStatusFlowConf = JSON.stringify(accountsData.IcdDefaultStatusFlowConfEdit).replaceAll(\",\", \", \\n\");\r\n                }\r\n                if(values.ticketingToolUsed == \"service_now\" && (values.dropletEnabled == true ) && (values.csmEnabled == false || values.csmEnabled == undefined)){\r\n                    SnowDropletStatusFlowConf = JSON.stringify(accountsData.SnowDropletStatusFlowConfEdit).replaceAll(\",\", \", \\n\");\r\n                }\r\n                if(values.ticketingToolUsed == \"service_now\" && (values.dropletEnabled == false || values.dropletEnabled == undefined) && (values.csmEnabled == true )){\r\n                    SnowCsmStatusFlowConf = JSON.stringify(accountsData.SnowCsmStatusFlowConfEdit).replaceAll(\",\", \", \\n\");\r\n                }\r\n                if(values.ticketingToolUsed == \"service_now\" && (values.dropletEnabled == false || values.dropletEnabled == undefined) && (values.csmEnabled == false || values.csmEnabled == undefined)){\r\n                    SnowDefaultStatusFlowConf = JSON.stringify(accountsData.SnowDefaultStatusFlowConfEdit).replaceAll(\",\", \", \\n\");\r\n                }\r\n                if(submitted == false && (saved == true || saved == false)){ \r\n                    savedBtn = <Button className=\"btnMargin saveData\" kind='secondary' key=\"saveData\" onClick={this.submitAndContinue}>Save</Button>\r\n                }else if(submitted == true && (saved == true || saved == false)){\r\n                    savedBtn = ''\r\n                }\r\n            }\r\n        }\r\n\r\n        return(\r\n            <div>\r\n\r\n                {this.state.showPopup ? ( this.ansibleModalHtml()) : null}\r\n                <Form  onSubmit={this.submitAndContinue}>\r\n                    <Grid>\r\n                        <Row>\r\n                            {/* main row */}\r\n                            <Column>\r\n                            {/* main column */}\r\n                                <Row>\r\n                                    <Column>\r\n                                        <Select\r\n                                            className=\"labelFont\"\r\n                                            id=\"integratedWithChatops\"\r\n                                            labelText={<>Does account uses a ticketing tool, if yes, does it needs to be integrated with ChatOps  <b className=\"fontRed\">*</b></>}\r\n                                            name=\"usingTicketingTool\"\r\n                                            onChange={this.props.handleChange('usingTicketingTool')}\r\n                                            defaultValue={values.usingTicketingTool || \"\"}\r\n                                            required\r\n                                        >\r\n                                            {values.eventSource !== \"netcool\" && <>\r\n                                            <SelectItem\r\n                                            value=\"\"\r\n                                            hidden\r\n                                            text=\"Choose an option\"\r\n                                            />\r\n                                            <SelectItem value=\"no\" text=\"No\" selected={values.usingTicketingTool == \"no\"} /> </>}\r\n                                            <SelectItem value=\"yes\" text=\"Yes\" selected={values.usingTicketingTool == \"yes\"} />\r\n                                        </Select>\r\n                                    </Column>\r\n                                    <Column>\r\n\r\n                                    </Column>\r\n                                </Row>\r\n                                <br />\r\n                                { values.usingTicketingTool === \"yes\" &&  <> \r\n                                    <Row>\r\n                                        <Column>\r\n                                            <Select\r\n                                                className=\"labelFont\"\r\n                                                id=\"chatopsCommandAuth\"\r\n                                                name=\"chatopsCommandAuth\"\r\n                                                labelText=\"Authorisation Type\"\r\n                                                onChange={this.props.handleChange('chatopsCommandAuth')}\r\n                                                defaultValue={this.props.chatopsCommandAuth||\"\"}\r\n                                            >\r\n                                                <SelectItem\r\n                                                    value=\"\"\r\n                                                    hidden\r\n                                                    text=\"Choose an option\"\r\n                                                />\r\n                                                <SelectItem\r\n                                                    value=\"userAuth\"\r\n                                                    text=\"User Authorisation\"\r\n                                                    selected={this.props.chatopsCommandAuth == \"userAuth\"}\r\n                                                />\r\n                                                <SelectItem\r\n                                                    value=\"chatopsAuth\"\r\n                                                    text=\"Chatops Authorization\"\r\n                                                    selected={this.props.chatopsCommandAuth == \"chatopsAuth\"}\r\n                                                />\r\n                                            </Select>\r\n                                        </Column>\r\n                                        <Column></Column>\r\n                                    </Row>\r\n                                    <br />\r\n                                    {(values.chatopsCommandAuth == \"chatopsAuth\") &&\r\n                                        <Row>\r\n                                            <Column>\r\n                                                <Select\r\n                                                className=\"labelFont\"\r\n                                                    id=\"authType\"\r\n                                                    labelText={\r\n                                                    <span>Access Type <b className=\"fontRed\">*</b> \r\n                                                    <Tooltip>\r\n                                                    <b>Group: </b> Group members will be ablee to perform the command action.\r\n                                                    <br/>\r\n                                                    <b>Open Access: </b> All the users would be able to perform the command action via the detail provided in the onboarding form.\r\n                                                    </Tooltip>\r\n                                                    </span>\r\n                                                }\r\n                                                    name=\"authType\"\r\n                                                    onChange={this.props.handleChange('authType')}\r\n                                                    defaultValue={this.props.authType}\r\n                                                    required\r\n                                                >\r\n                                                    <SelectItem value=\"useopenAuth\" text=\"Open Access\" selected={this.props.authType == \"useopenAuth\"} />\r\n                                                    <SelectItem value=\"useGroup\" text=\"Group\"  selected={this.props.authType == \"useGroup\"}/>\r\n                                                </Select>\r\n                                            </Column>\r\n                                            {values.authType == \"useGroup\" ? \r\n                                                <Column>\r\n                                                    <TextInput\r\n                                                        className=\"labelFont\"\r\n                                                        id=\"authGroup\"\r\n                                                        placeholder=\"Add Group Name\"\r\n                                                        labelText={<>Group Name  <b className=\"fontRed\">*</b></>}\r\n                                                        name=\"authGroup\"\r\n                                                        onChange={this.props.handleChange('authGroup')}\r\n                                                        defaultValue={this.props.authGroup}\r\n                                                        required\r\n                                                    />\r\n                                                </Column>:\r\n                                                <Column></Column>\r\n                                            }\r\n                                        </Row> \r\n                                    }\r\n                                    <br />\r\n                                    {/* Ticketing Tool Group */}\r\n                                    <div className=\"ticketingToolGroupDiv\">\r\n                                        <Row>\r\n                                            <Column>\r\n                                                <Select\r\n                                                className=\"labelFont\"\r\n                                                    id=\"ticketingToolType\"\r\n                                                    labelText={<>Ticketing Tool Used  <b className=\"fontRed\">*</b></>}\r\n                                                    name=\"ticketingToolUsed\"\r\n                                                    onChange={this.props.handleChange('ticketingToolUsed')}\r\n                                                    defaultValue={this.props.ticketingToolUsed|| \"\"}\r\n                                                    required\r\n                                                >\r\n                                                    <SelectItem\r\n                                                    hidden\r\n                                                    value=\"noTicketingTool\"\r\n                                                    text=\"Choose an option\"\r\n                                                    />\r\n                                                    <SelectItem value=\"icd\" text=\"ICD\" selected={this.props.ticketingToolUsed == \"icd\"} />\r\n                                                    <SelectItem value=\"service_now\" text=\"ServiceNow\" selected={this.props.ticketingToolUsed == \"serviceNow\"} />\r\n                                                </Select>\r\n                                            </Column>\r\n                                            <Column>\r\n                                                <TextInput\r\n                                                className=\"labelFont\"\r\n                                                    id=\"tickertingRestURL\"\r\n                                                    placeholder=\"Ticketing Tool Used\"\r\n                                                    labelText={<>Ticketing REST API URL  <b className=\"fontRed\">*</b> <Tooltip>Only host url with / at end to be added. Eg: \"https://example.service-now.com/\" </Tooltip> </>}\r\n                                                    name=\"tickertingRestURL\"\r\n                                                    onChange={this.props.handleChange('tickertingRestURL')}\r\n                                                    defaultValue={this.props.tickertingRestURL}\r\n                                                    required\r\n                                                />\r\n                                            </Column> \r\n                                        </Row>\r\n                                            {(this.props.ticketingToolUsed == \"service_now\") &&\r\n                                            <Checkbox\r\n                                                labelText={`Enable Service Manager`}\r\n                                                id=\"checkbox-SM\"\r\n                                                checked={this.props.enableServiceManager}\r\n                                                onChange={() => this.props.setServiceManager()}\r\n                                            /> }\r\n                                            <br />\r\n                                        <Row>   \r\n                                        </Row>\r\n                                        {values.ticketingToolUsed == 'service_now' && \r\n                                            <div className=\"csmGroupDiv\">\r\n                                                {values.ticketingToolUsed == 'service_now' &&  (values.csmEnabled == false || values.csmEnabled == undefined) && (values.dropletEnabled == false || values.dropletEnabled == undefined) &&\r\n                                                    <Row>\r\n                                                        <Column>\r\n                                                            <TextArea\r\n                                                                cols={50}\r\n                                                                className=\"labelFont marginTextArea\"\r\n                                                                id=\"SnowDefaultStatusFlowConf\"\r\n                                                                name=\"SnowDefaultStatusFlowConf\"\r\n                                                                // helperText=\"Provide proper json with name/value pairs, that begins with { left brace and ends with } right brace. Each name should be followed by : colon and the name/value pairs separated by , comma\"\r\n                                                                // onBlur={(e) => this.handleInputChange(e)} \r\n                                                                onChange={this.props.handleChange('SnowDefaultStatusFlowConf')}\r\n                                                                defaultValue={SnowDefaultStatusFlowConf || this.props.SnowDefaultStatusConf} \r\n                                                                labelText={ <> Snow default status flow configuration \r\n                                                                    <Tooltip>\r\n                                                                        Default ticketing tool status flow, the config can be modified according to how the configuration is in the tool\r\n                                                                    </Tooltip>\r\n                                                                </> }\r\n                                                                placeholder=\"Snow default status flow configuration\"\r\n                                                                rows={5}\r\n                                                            />\r\n                                                        </Column>\r\n                                                    </Row>\r\n                                                }\r\n                                                <br />\r\n                                                <Row>\r\n                                                    <Column>\r\n                                                        <FormGroup className=\"displayInlineDiv\">\r\n                                                            <label className=\"displayInlineLabel\"><b>Is this instance droplet enabled?</b>\r\n                                                                <Tooltip>\r\n                                                                    Enable this option for servicenow instances that have droplets enabled\r\n                                                                </Tooltip>\r\n                                                                <input\r\n                                                                    type=\"checkbox\"\r\n                                                                    className=\"relatedInsights\"\r\n                                                                    name=\"dropletEnabled\"\r\n                                                                    id=\"dropletEnabled\"\r\n                                                                    disabled={disabledroplet}\r\n                                                                    onClick={ (event) => { this.handleDropletEnabled('dropletEnabled', event) }}\r\n                                                                    defaultChecked={this.props.dropletEnabled || false}\r\n                                                                />\r\n                                                            </label>\r\n                                                        </FormGroup> \r\n                                                    </Column>\r\n                                                    <Column>\r\n                                                        <FormGroup className=\"displayInlineDiv\">\r\n                                                            <label className=\"displayInlineLabel\"><b>Is this instance CSM enabled?</b>\r\n                                                                <Tooltip>Enable this option for CSM servicenow instances</Tooltip>\r\n                                                                <input\r\n                                                                    type=\"checkbox\"\r\n                                                                    className=\"relatedInsights\"\r\n                                                                    name=\"csmEnabled\"\r\n                                                                    id=\"csmEnabled\"\r\n                                                                    disabled={disableCMS}\r\n                                                                    onClick={ (event) => { this.handlecsmEnabled('csmEnabled', event) }}\r\n                                                                    defaultChecked={this.props.csmEnabled || false}\r\n                                                                />\r\n                                                            </label>\r\n                                                        </FormGroup> \r\n                                                    </Column>\r\n                                                </Row>\r\n                                                {values.ticketingToolUsed == 'service_now' &&  (values.dropletEnabled == true ) && (values.csmEnabled == false || values.csmEnabled == undefined) &&\r\n                                                    <Row>\r\n                                                        <Column>\r\n                                                            <TextArea\r\n                                                                cols={50}\r\n                                                                className=\"labelFont marginTextArea\"\r\n                                                                id=\"SnowDropletStatusFlowConf\"\r\n                                                                name=\"SnowDropletStatusFlowConf\"\r\n                                                                onChange={this.props.handleChange('SnowDropletStatusFlowConf')}\r\n                                                                defaultValue={SnowDropletStatusFlowConf} \r\n                                                                labelText={ <> Snow droplet status flow configuration \r\n                                                                </> }\r\n                                                                placeholder=\"Snow droplet status flow configuration\"\r\n                                                                rows={5}\r\n                                                            />\r\n                                                        </Column>\r\n                                                    </Row>\r\n                                                }\r\n                                                {/* (values.dropletEnabled == false || values.dropletEnabled == undefined) && (values.csmEnabled == true || values.csmEnabled == undefined) */}\r\n                                                {values.ticketingToolUsed == 'service_now' &&  (values.dropletEnabled == false || values.dropletEnabled == undefined) && (values.csmEnabled == true) &&\r\n                                                    <Row>\r\n                                                        <Column>\r\n                                                            <TextArea\r\n                                                                cols={50}\r\n                                                                className=\"labelFont marginTextArea\"\r\n                                                                id=\"SnowCsmStatusFlowConf\"\r\n                                                                name=\"SnowCsmStatusFlowConf\"\r\n                                                                onChange={this.props.handleChange('SnowCsmStatusFlowConf')}\r\n                                                                defaultValue={SnowCsmStatusFlowConf} \r\n                                                                labelText={ <> Snow CSM status flow configuration </> }\r\n                                                                placeholder=\"Snow CSM status flow configuration\"\r\n                                                                rows={5}\r\n                                                            />\r\n                                                        </Column>\r\n                                                    </Row>\r\n                                                }\r\n                                                {(values.dropletEnabled == true) && \r\n                                                    <Row>\r\n                                                            <Column>\r\n                                                                <TextInput\r\n                                                                    className=\"labelFont\"\r\n                                                                    id=\"urlPath\"\r\n                                                                    placeholder=\"API Path\"\r\n                                                                    labelText={<>API Path<b className=\"fontRed\">*</b>\r\n                                                                    <Tooltip> Enter the API path of the droplet instance eg:- \"/api/now/table/x_ibmip_int_inc_web_services\"</Tooltip>\r\n                                                                    </>}\r\n                                                                    name=\"urlPath\"\r\n                                                                    onChange={this.props.handleChange('urlPath')}\r\n                                                                    defaultValue={this.props.urlPath}\r\n                                                                    required\r\n                                                                />\r\n                                                            </Column>\r\n                                                            <Column>\r\n                                                            <FormGroup className=\"displayInlineDiv\">\r\n                                                                <label className=\"displayInlineLabel\"><b>Is this a dedicated droplet instance?</b>\r\n                                                                <Tooltip>Enable this option if this is a dedicated servicenow droplet instance</Tooltip>\r\n                                                                    <input\r\n                                                                        type=\"checkbox\"\r\n                                                                        className=\"relatedInsights\"\r\n                                                                        name=\"dedicatedDropletInstance\"\r\n                                                                        id=\"dedicatedDropletInstance\"\r\n                                                                        onClick={ (event) => { this.handleDedicatedDropletInstance('dedicatedDropletInstance', event) }}\r\n                                                                        defaultChecked={this.props.dedicatedDropletInstance || false}\r\n                                                                    />\r\n                                                                </label>\r\n                                                                </FormGroup> \r\n                                                            </Column>\r\n                                                    </Row> \r\n                                                }\r\n                                                {(values.csmEnabled == true) && \r\n                                                    <Row>\r\n                                                        <Column>\r\n                                                            <TextInput\r\n                                                                className=\"labelFont\"\r\n                                                                id=\"tableName\"\r\n                                                                placeholder=\"Table Name\"\r\n                                                                labelText={<>Table Name<b className=\"fontRed\">*</b>\r\n                                                                    <Tooltip>\r\n                                                                        Default is entered, in case of a different table name enter the appropriate table name\r\n                                                                    </Tooltip>\r\n                                                                </>}\r\n                                                                name=\"tableName\"\r\n                                                                onChange={this.props.handleChange('tableName')}\r\n                                                                defaultValue={this.props.tableName}\r\n                                                                required\r\n                                                            />\r\n                                                        </Column>\r\n                                                        <Column>\r\n                                                        </Column>\r\n                                                    </Row> \r\n                                                }\r\n                                                {(values.dedicatedDropletInstance == false && values.dropletEnabled == true) && \r\n                                                    <Row>\r\n                                                        <Column>\r\n                                                            <TextInput\r\n                                                                className=\"labelFont\"\r\n                                                                id=\"companyName\"\r\n                                                                placeholder=\"Company Name\"\r\n                                                                labelText={<>Company Name<b className=\"fontRed\">*</b>\r\n                                                                <Tooltip>Enter client name as specified in the servicenow instance</Tooltip>\r\n                                                                </>}\r\n                                                                name=\"companyName\"\r\n                                                                onChange={this.props.handleChange('companyName')}\r\n                                                                defaultValue={this.props.companyName}\r\n                                                                required\r\n                                                            />\r\n                                                        </Column>\r\n                                                        <Column>\r\n                                                        </Column>\r\n                                                    </Row> \r\n                                                }\r\n                                            </div>\r\n                                        }\r\n                                        {values.ticketingToolUsed == 'service_now' && \r\n                                            <div className=\"serviceNowGroup\">\r\n                                                <Row>\r\n                                                    <Column>\r\n                                                        <FormGroup className=\"displayInlineDiv noMarginDiv\">\r\n                                                            <label className=\"displayInlineLabel\"><b>Related ticket insights to display child tickets</b>\r\n                                                            <Tooltip>Child tickets display as an insight in the Incident channel if enabled</Tooltip>\r\n                                                                <input\r\n                                                                    type=\"checkbox\"\r\n                                                                    className=\"relatedInsights\"\r\n                                                                    name=\"relatedInsights\"\r\n                                                                    id=\"relatedInsights\"\r\n                                                                    onClick={ (event) => { this.handleInsightCheckbox('relatedInsights', event) }}\r\n                                                                    defaultChecked={this.props.relatedInsights || false}\r\n                                                                />\r\n                                                            </label>\r\n                                                        </FormGroup> \r\n                                                    </Column>\r\n                                                </Row>\r\n                                           {/* } */}\r\n                                            {/* {values.ticketingToolUsed == 'service_now' &&  */}\r\n                                                <Row>\r\n                                                    <Column>\r\n                                                        <FormGroup className=\"displayInlineDiv noMarginDiv\">\r\n                                                            <label className=\"displayInlineLabel\"><b>Display incidents with similar configuration item</b>\r\n                                                            <Tooltip>Incidents with similar configuration item displays as an insight in the Incident channel if enabled</Tooltip>\r\n                                                                <input\r\n                                                                    type=\"checkbox\"\r\n                                                                    className=\"enableCiDetails\"\r\n                                                                    name=\"enableCiDetails\"\r\n                                                                    id=\"enableCiDetails\"\r\n                                                                    onClick={ (event) => { this.handleCiCheckbox('enableCiDetails', event) }}\r\n                                                                    defaultChecked={this.props.enableCiDetails || false}\r\n                                                                />\r\n                                                            </label>\r\n                                                        </FormGroup> \r\n                                                    </Column>\r\n                                                </Row>\r\n                                             {/* } */}\r\n                                            {/* {values.ticketingToolUsed == 'service_now' &&  */}\r\n                                                <Row>\r\n                                                    <Column>\r\n                                                        <FormGroup className=\"displayInlineDiv noMarginDiv\">\r\n                                                            <label className=\"displayInlineLabel\"><b>Display incidents with similar description</b> \r\n                                                            <Tooltip>Incidents with similar description displays as an insight in the Incident channel if enabled</Tooltip>\r\n                                                                <input\r\n                                                                    type=\"checkbox\"\r\n                                                                    className=\"enableDescDetails\"\r\n                                                                    name=\"enableDescDetails\"\r\n                                                                    id=\"enableDescDetails\"\r\n                                                                    onClick={ (event) => { this.handleDescCheckbox('enableDescDetails', event) }}\r\n                                                                    defaultChecked={this.props.enableDescDetails || false}\r\n                                                                />\r\n                                                            </label>\r\n                                                        </FormGroup> \r\n                                                    </Column>\r\n                                                </Row>\r\n                                            </div>\r\n                                        }\r\n                                        {values.ticketingToolUsed == 'icd' && \r\n                                            <div className=\"icdGroup\">\r\n                                                <Row>\r\n                                                    <Column>\r\n                                                        <TextArea\r\n                                                            cols={50}\r\n                                                            className=\"labelFont marginTextArea\"\r\n                                                            id=\"IcdDefaultStatusFlowConf\"\r\n                                                            name=\"IcdDefaultStatusFlowConf\"\r\n                                                            onChange={this.props.handleChange('IcdDefaultStatusFlowConf')}\r\n                                                            defaultValue={IcdDefaultStatusFlowConf} \r\n                                                            labelText={ <> ICD default status flow configuration </> }\r\n                                                            placeholder=\"ICD default status flow configuration\"\r\n                                                            rows={5}\r\n                                                        />\r\n                                                    </Column>\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Column>\r\n                                                        <Select\r\n                                                        className=\"labelFont\"\r\n                                                        id=\"internetFacing\"\r\n                                                        labelText=\"Can ticketing tool API be accessed from the Internet?(Internet Facing)\"\r\n                                                        // defaultValue=\"opts\"\r\n                                                        name=\"internetFacing\"\r\n                                                        onChange={this.props.handleChange('internetFacing')}\r\n                                                        defaultValue={this.props.internetFacing|| \"\"}\r\n                                                        >\r\n                                                            <SelectItem\r\n                                                                value=\"\"\r\n                                                                hidden\r\n                                                                text=\"Choose an option\"\r\n                                                            />\r\n                                                            <SelectItem value=\"yes\" text=\"Yes\" selected={this.props.internetFacing == \"yes\"} />\r\n                                                            <SelectItem value=\"no\" text=\"No\" selected={this.props.internetFacing == \"no\"} />\r\n                                                        </Select>\r\n                                                    </Column>\r\n                                                    <Column>\r\n                                                        \r\n                                                    </Column>\r\n                                                </Row>\r\n                                            </div>\r\n                                        }\r\n                                        \r\n                                    </div>\r\n                                    <br />\r\n                                    <Row>\r\n                                        <Column>\r\n                                            <Select\r\n                                            className=\"labelFont\"\r\n                                                id=\"authenticationType\"\r\n                                                labelText={<>Type of Authentication  <b className=\"fontRed\">*</b></>}\r\n                                                // defaultValue=\"opts\"\r\n                                                name=\"typeOfAuthentication\"\r\n                                                onChange={this.props.handleChange('typeOfAuthentication')}\r\n                                                defaultValue={this.props.typeOfAuthentication}\r\n                                                required\r\n                                            >\r\n                                                {values.ticketingToolUsed != 'icd' && <><SelectItem\r\n                                                //   disabled\r\n                                                value=\"noAuth\"\r\n                                                text=\"Select an option\"\r\n                                                />\r\n                                                <SelectItem value=\"oauth\" text=\"OAuth\" /></>}\r\n                                                <SelectItem value=\"basic\" text=\"Basic\" />\r\n                                            </Select>\r\n                                        </Column>\r\n                                        <Column>\r\n                                        </Column>\r\n                                    </Row>\r\n                                    <br />\r\n                                    <div>\r\n                                        {(values.typeOfAuthentication == \"basic\" || values.typeOfAuthentication == \"oauth\") && \r\n                                            <>\r\n                                            <Row>\r\n                                                <Column>\r\n                                                    <TextInput\r\n                                                    className=\"labelFont\"\r\n                                                        type=\"password\"\r\n                                                        id=\"userId\"\r\n                                                        placeholder=\"Basic Auth User ID(Required for Oauth Style as well)\"\r\n                                                        labelText={<>Basic Auth User ID  <b className=\"fontRed\">*</b></>}\r\n                                                        name=\"basicAuthUserID\"\r\n                                                        defaultValue={this.props.basicAuthUserID}\r\n                                                        onChange={this.props.handleChange('basicAuthUserID')}\r\n                                                        required\r\n                                                    />\r\n                                                </Column>\r\n                                                <Column>\r\n                                                    <TextInput\r\n                                                    className=\"labelFont\"\r\n                                                        type=\"password\"\r\n                                                        id=\"userPassword\"\r\n                                                        placeholder=\"*********\"\r\n                                                        labelText={<>Basic Auth Password  <b className=\"fontRed\">*</b></>}\r\n                                                        name=\"basicAuthPassword\"\r\n                                                        defaultValue={this.props.basicAuthPassword}\r\n                                                        onChange={this.props.handleChange('basicAuthPassword')}\r\n                                                        required\r\n                                                    />\r\n                                                </Column>        \r\n                                            </Row>\r\n                                            {values.typeOfAuthentication == \"oauth\" && \r\n                                            <Row>\r\n                                                <Column>\r\n                                                    <TextInput\r\n                                                    className=\"labelFont\"\r\n                                                        type=\"password\"\r\n                                                        id=\"oauthClientID\"\r\n                                                        placeholder=\"*********\"\r\n                                                        labelText={<>OAuth Client ID  <b className=\"fontRed\">*</b></>}\r\n                                                        name=\"oauthClientID\"\r\n                                                        onChange={this.props.handleChange('oauthClientID')}\r\n                                                        defaultValue={this.props.oauthClientID || \"\"}\r\n                                                        required\r\n                                                    />\r\n                                                </Column>\r\n                                                <Column>\r\n                                                    <TextInput\r\n                                                    className=\"labelFont\"\r\n                                                        type=\"password\"\r\n                                                        id=\"oauthClientSecret\"\r\n                                                        placeholder=\"*********\"\r\n                                                        labelText={<>OAuth Client Secret  <b className=\"fontRed\">*</b></>}\r\n                                                        name=\"oauthClientSecret\"\r\n                                                        onChange={this.props.handleChange('oauthClientSecret')}\r\n                                                        defaultValue={this.props.oauthClientSecret || \"\"}\r\n                                                        required\r\n                                                    />\r\n                                                </Column>\r\n                                            </Row>\r\n                                            } \r\n                                        </>\r\n                                        }\r\n                                        <Row>\r\n                                            <Column>\r\n                                                <div className=\"checkConnectionDiv\">\r\n                                                    <a href=\"#\" className=\"bx--btn bx--btn--tertiary\" onClick= {this.checkConnection}>Test Connection\r\n                                                    </a>\r\n                                                    {this.state.showSuccess ? (\r\n                                                        <CheckmarkFilled32 className=\"connectionSuccess\"/>) : null\r\n                                                    }\r\n                                                    {this.state.showFailure ? (\r\n                                                        <CloseFilled32 className=\"connectionFailure\"/>) : null\r\n                                                    }\r\n                                                </div>\r\n                                                {this.state.showFailPopup ? (\r\n                                                    <div className=\"popup\">\r\n                                                        <div className=\"bx--modal-container modal-css\">\r\n                                                            <div className=\"bx--modal-header\">\r\n                                                                <p\r\n                                                                className=\"bx--modal-header__heading bx--type-beta\"\r\n                                                                id=\"modal-connectionFail-heading\"\r\n                                                                >\r\n                                                                Ticketing Tool Connection is Failed. Do you want to Continue?\r\n                                                                </p>\r\n                                                            </div>\r\n                                                            <div className=\"bx--modal-content--overflow-indicator\"></div>\r\n\r\n                                                            <div className=\"bx--modal-footer\">\r\n                                                            <Button\r\n                                                            kind=\"tertiary\"\r\n                                                            className=\"connectionCheck\"\r\n                                                            onClick={this.cancelPopup}\r\n                                                            >\r\n                                                            No\r\n                                                            </Button>\r\n                                                            <Button\r\n                                                            kind=\"primary\"\r\n                                                            onClick={this.submitPopup}\r\n                                                            className=\"connectionCheck\"\r\n                                                            >\r\n                                                            Yes\r\n                                                            </Button>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <span tabindex=\"0\"></span>\r\n                                                    </div>\r\n                                                    ) : null\r\n                                                }\r\n                                            </Column>\r\n                                        </Row>\r\n                                    </div>\r\n                                    </> \r\n                                } \r\n                            </Column>\r\n                        </Row>\r\n                        <div className=\"additionalGroup\">  \r\n                            <Row>\r\n                                <Column>\r\n                                    <FormGroup className=\"displayInlineDiv\">\r\n                                        <label className=\"displayInlineLabel\"><b>Enable Stack exchange</b>\r\n                                            <span>\r\n                                                <Tooltip>\r\n                                                    URL Links from stack exchange for the incident description gets added as an insight to the incident channel.\r\n                                                </Tooltip>\r\n                                            </span>\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            className=\"enableStackDetails\"\r\n                                            name=\"enableStackDetails\"\r\n                                            id=\"enableStackDetails\"\r\n                                            onClick={ (event) => { this.handleStackCheckbox('enableStackDetails', event) }}\r\n                                            defaultChecked={this.props.enableStackDetails || false}\r\n                                        />\r\n                                        </label>\r\n                                    </FormGroup> \r\n                                </Column>\r\n                            </Row>\r\n                            <Row>\r\n                                <Column>\r\n                                    <FormGroup className=\"displayInlineDiv\">\r\n                                        <label className=\"displayInlineLabel\"><b>Enable Watson Knowledge insights</b>\r\n                                            <span>\r\n                                                <Tooltip>\r\n                                                    Response from Watson assistant gets added as an insight to the incident channel.\r\n                                                </Tooltip>\r\n                                            </span>\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                className=\"enableWatsonAssistant\"\r\n                                                name=\"enableWatsonAssistant\"\r\n                                                id=\"enableWatsonAssistant\"\r\n                                                onClick={ (event) => { this.handleWatsonCheckbox('enableWatsonAssistant', event) }}\r\n                                                defaultChecked={this.props.enableWatsonAssistant || false}\r\n                                            />\r\n                                        </label>\r\n                                        {this.props.enableWatsonAssistant?\r\n                                        <>\r\n                                        <Row>\r\n                                        <Column>\r\n                                            <TextInput\r\n                                                className=\"labelFont\"\r\n                                                id=\"watsonURL\"\r\n                                                placeholder=\"IBM Watson Assistant URL\"\r\n                                                labelText={<>IBM Watson Assistant URL  <b className=\"fontRed\">*</b></>}\r\n                                                name=\"watsonURL\"\r\n                                                onChange={this.props.handleChange('watsonURL')}\r\n                                                defaultValue={this.props.watsonURL || \"\"}\r\n                                                required\r\n                                            />\r\n                                        </Column>\r\n                                        <Column>\r\n                                            <TextInput\r\n                                                className=\"labelFont\"\r\n                                                id=\"watsonVersion\"\r\n                                                placeholder=\"IBM Watson Version\"\r\n                                                labelText={<span>IBM Watson Version  <b className=\"fontRed\">*</b>\r\n                                                <Tooltip>\r\n                                                Version should be of format version=&lt;value&gt; , eg: version=2020-04-01\r\n                                                </Tooltip>\r\n                                            </span>}\r\n                                                name=\"watsonVersion\"\r\n                                                onChange={this.props.handleChange('watsonVersion')}\r\n                                                defaultValue={this.props.watsonVersion || \"\"}\r\n                                                required\r\n                                            />\r\n                                            \r\n                                        </Column>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Column>\r\n                                             <TextInput\r\n                                                type=\"password\"\r\n                                                className=\"labelFont\"\r\n                                                id=\"watsonApiKey\"\r\n                                                placeholder=\"IBM Watson API Key\"\r\n                                                labelText={<>IBM Watson API Key  <b className=\"fontRed\">*</b></>}\r\n                                                name=\"watsonApiKey\"\r\n                                                onChange={this.props.handleChange('watsonApiKey')}\r\n                                                defaultValue={this.props.watsonApiKey || \"\"}\r\n                                                required\r\n                                            />\r\n                                        </Column>\r\n                                    </Row>\r\n                                    </>:''\r\n                                        }\r\n                                    </FormGroup>\r\n                                </Column>\r\n                            </Row>\r\n                            <br />      \r\n                            <Row>\r\n                                <Column>\r\n                                    <Select\r\n                                        className=\"labelFont\"\r\n                                        id=\"ansibleIntegratedWithChatops\"\r\n                                        labelText={<>Does account need ChatOps integration with CACF/Ansible <b className=\"fontRed\">*</b></>}\r\n                                        name=\"ansibleIntegratedWithChatops\"\r\n                                        onChange={this.props.handleChange('usingAnsibleIntegration')}\r\n                                        defaultValue={values.usingAnsibleIntegration || \"no\"}\r\n                                        required\r\n                                        >\r\n                                        <SelectItem value=\"no\" text=\"No\" selected={values.usingAnsibleIntegration == \"no\"} /> \r\n                                        <SelectItem value=\"cacf\" text=\"CACF\" selected={values.usingAnsibleIntegration == \"cacf\"} />\r\n                                        <SelectItem value=\"ansible\" text=\"Ansible\" selected={values.usingAnsibleIntegration == \"ansible\"} />\r\n                                    </Select>\r\n                                </Column>\r\n                                <Column></Column>\r\n                            </Row>\r\n                            { values.usingAnsibleIntegration == \"ansible\"? this.enableAnsibleHtml() : null}\r\n                            { values.usingAnsibleIntegration == \"cacf\"? this.enableCacfHtml() : null}\r\n                            { (values.usingAnsibleIntegration == \"ansible\" || values.usingAnsibleIntegration == \"cacf\") ? this.jobLogHtml() : null}\r\n\r\n                            <br />\r\n                            <Row>\r\n                                <Column>\r\n                                <TextArea\r\n                                    className=\"labelFont\"\r\n                                    cols={50}\r\n                                    rows={5}\r\n                                    labelText={<>Any other Information that you would like to add ? <span className=\"specialCharacterLabel\">(Special characters &lt; &gt; # $ ^ & * \\ = {} ; \\\\ | ? ~ are not allowed)</span></>}\r\n                                    placeholder=\"Any other Information that you would like to add ?\"\r\n                                    onChange={this.props.handleChange('otherInformation')}\r\n                                    name=\"otherInformation\"\r\n                                    defaultValue={this.props.otherInformation}\r\n                                />\r\n                                </Column>\r\n                            </Row>\r\n                        </div>\r\n                        <Row>\r\n                            <div className=\"btnDivAA\">\r\n                                {/* <ButtonsForm /> */}\r\n                                {/* <Button kind='secondary' type=\"submit\" id=\"cancelTab1\" className=\"btnAA cancelBtn\">Cancel</Button>\r\n                                <Button kind='primary' type=\"submit\" id=\"saveTab1\" className=\"btnAA saveBtn\">Save</Button>\r\n                                <Button kind='primary' type=\"submit\"    id=\"continueTab1\" className=\"btnAA continueBtn\">Submit</Button> */}\r\n                            </div>\r\n                            \r\n                        </Row>\r\n                        <div>\r\n                            {\r\n                                this.props['specialCharacterErr'] &&\r\n                                <small className=\"fontRed\" style={{width: '100% !important'}}>\r\n                                    <b className=\"errorMsg specialCharErr\">{this.props['specialCharacterErr']}</b>\r\n                                </small>\r\n                            }\r\n                        </div>\r\n                        <div className=\"btnCommon\">\r\n                            <Button className=\"btnMargin\" kind='tertiary' onClick={this.back}>Back</Button>\r\n                            <div>\r\n                                {savedBtn}\r\n                            </div>\r\n                            {/* <Button className=\"btnMargin saveData\" kind='secondary' key=\"saveData\" onClick={this.submitAndContinue}>Save</Button> */}\r\n                               \r\n                            <Button type=\"submit\" className=\"btnMargin btnLast\" disabled={!(this.props.generalFormSubmitted && this.props.configFormSubmitted)}>Submit</Button>\r\n                        </div>\r\n                        {\r\n                            this.props.isvalidJSon == true && \r\n                            <small className=\"fontRed\">\r\n                            <b className=\"blgrperrorMsg\">{this.props.invalidJsonErr}</b>\r\n                            </small>\r\n                        }\r\n                        <div>\r\n                            {\r\n                                this.props.isInvalidData &&\r\n                                <small className=\"fontRed\" style={{width: '100% !important'}}>\r\n                                    <b className=\"blgrperrorMsg\">{this.props.invalidData}</b>\r\n                                </small>\r\n                            }\r\n                        </div>\r\n                    </Grid>\r\n                    \r\n                </Form>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default AdditionalInfoForm;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\validation\\validate.js",["1300","1301","1302","1303","1304","1305","1306","1307","1308","1309","1310","1311","1312","1313","1314","1315","1316","1317","1318","1319","1320","1321","1322","1323","1324","1325","1326"],"function flattenObject(ob){\r\n    let result = {};\r\n    for (const i in ob) {\r\n        if ((typeof ob[i]) === 'object' && !Array.isArray(ob[i])) {\r\n            const temp = flattenObject(ob[i]);\r\n            for (const j in temp) {\r\n                result[i + '.' + j] = temp[j];\r\n            }\r\n        }\r\n         else {\r\n            result[i] = ob[i];\r\n        }\r\n    }\r\n    return result;\r\n}\r\n  \r\nfunction sqlInjectionChars(val, fieldName) {\r\n    if(typeof(val) === 'object'){\r\n        val = JSON.stringify(val);\r\n    }\r\n    let url = window.location.pathname;\r\n    let specialChars = /[`#$^&*()+\\={};':\"\\\\|,.<>\\?~]/; // default chat check\r\n    //TODO: clean the below code by grouping allowed entries\r\n    if(fieldName.toLowerCase().includes('rule') || fieldName.toLowerCase().includes('config_value') || fieldName.toLowerCase().includes('incidentparamnames') || fieldName.toLowerCase().includes('sys_updated_on') || fieldName.toLowerCase().includes('sys_updated_by') || fieldName.toLowerCase().includes('due_date')  || fieldName.toLowerCase().includes('queryparameters') || fieldName.toLowerCase().includes('collabconfig') || fieldName.toLowerCase().includes('channel')){\r\n        specialChars = /[`#$^&+\\;\\\\|?~]/;\r\n    }else if(fieldName.toLowerCase().includes('email') || fieldName.toLowerCase().includes('member') || fieldName.toLowerCase().includes('accounts') || fieldName.toLowerCase().includes('scope') || fieldName.toLowerCase().includes('assignment') || fieldName.toLowerCase().includes('issue') || fieldName.toLowerCase().includes('workspace') || fieldName.toLowerCase().includes('owners') || fieldName.toLowerCase().includes('administrator') || fieldName.toLowerCase().includes('collaborators') || fieldName.toLowerCase().includes('priorities')|| fieldName.toLowerCase().includes('ksatcontactse') || fieldName.toLowerCase().includes('accountteamcontact') || fieldName.toLowerCase().includes('ksatcontactinfo')){\r\n        specialChars = /[`#$^&()+\\=;\\\\|<>\\?~]/;\r\n    }else if(fieldName.toLowerCase().includes('stream') || fieldName.toLowerCase().includes('configuration') || fieldName.toLowerCase().includes('ticketstates') || fieldName.toLowerCase().includes('icddefaultstatusconf') || fieldName.toLowerCase().includes('icddefaultstatusflowconf') || fieldName.toLowerCase().includes('snowdropletstatusconf') || fieldName.toLowerCase().includes('snowdropletstatusflowconf') || fieldName.toLowerCase().includes('snowcsmstatusconf') || fieldName.toLowerCase().includes('snowcsmstatusflowconf') || fieldName.toLowerCase().includes('snowdefaultstatusconf') || fieldName.toLowerCase().includes('snowdefaultstatusflowconf') || fieldName.toLowerCase().includes('majorincident') || fieldName.toLowerCase().includes('clientescalation') || fieldName.toLowerCase().includes('servicelinelist')|| fieldName.toLowerCase().includes('supportlocation')){\r\n        specialChars = /[`#$^&+\\=;|<>?~]/;\r\n    }else if(fieldName.toLowerCase().includes('url')){\r\n        specialChars = /[`#$^&*()+=\\[\\]{};'\"|,<>?~]/;\r\n    }else if(fieldName.toLowerCase().includes('username') || fieldName.toLowerCase().includes('additionalinfo') || fieldName.toLowerCase().includes('signingsecret') || fieldName.toLowerCase().includes('xoxb') || fieldName.toLowerCase().includes('xoxp')){\r\n        specialChars = /[`^&*()+=\\[\\]{};'\"|,<>?~]/;\r\n    }else if(fieldName.toLowerCase().includes('date')){\r\n        specialChars = /[`#$^&*_+\\=\\[\\];'\"\\\\|,.<>?~]/;\r\n    }else if(fieldName.toLowerCase().includes('version') || fieldName.toLowerCase().includes('apikey') || fieldName.toLowerCase().includes('key')){\r\n        specialChars = /[`#$^&*\\[\\];'\"\\\\|,<>?~]/;\r\n    }else if(fieldName.toLowerCase().includes('help') || url.toLowerCase().includes('command') || fieldName.toLowerCase().includes('publish')|| fieldName.toLowerCase().includes('resource')){\r\n        specialChars = /[`#$^&*()+{};':\\\\|?~]/;\r\n    }else if(fieldName.toLowerCase().includes('geo') || fieldName.toLowerCase().includes('market') || fieldName.toLowerCase().includes('country') || fieldName.toLowerCase().includes('sector') || fieldName.toLowerCase().includes('industry') || fieldName.toLowerCase().includes('gsepractice') || fieldName.toLowerCase().includes('serviceline') || fieldName.toLowerCase().includes('timezone')){\r\n        specialChars = /[`#$^*+\\={};:\\\\|<>\\?~]/;\r\n    }else if(fieldName.toLowerCase().includes('supporttype')){\r\n        specialChars = /[`#$^*+\\={};':\\\\|.<>\\?~]/;\r\n    }else if(fieldName.toLowerCase().includes('blueid')){\r\n        specialChars = /[`#$^&*()+\\={};':\"\\\\|.<>\\?~]/;\r\n    }else if(fieldName.toLowerCase().includes('comment') || fieldName.toLowerCase().includes('description') || fieldName.toLowerCase().includes('otherinformation') || fieldName.toLowerCase().includes('justification') || fieldName.toLowerCase().includes('summary')){ \r\n        specialChars = /[`#$^&*\\={};:\\\\|<>\\?~]/; \r\n        // not allowing >> #$^&*\\={};\\\\|<>\\?~\r\n    }else if(fieldName.toLowerCase().includes('password') || fieldName.toLowerCase().includes('clientsecret')){\r\n        specialChars = /[]/; \r\n        // Chaitra!@#$%^&*()_ ,\r\n    }else if(fieldName.toLowerCase().includes('skills') || fieldName.toLowerCase().includes('platform') ){\r\n        specialChars = /[`#$^+\\=;|<>?~]/;\r\n    }else if(fieldName.toLowerCase().includes('userid') || fieldName.toLowerCase().includes('clientid')){\r\n        specialChars = /[]/; \r\n    }else if(fieldName.toLowerCase().includes('ansibleinstancelogchannels')){\r\n        specialChars = /[]/; \r\n    }else if(fieldName.toLowerCase().includes('channel')){\r\n        specialChars = /[`#$^&*()+\\={};'\"\\\\|,<>\\?~]/; \r\n    }else if(fieldName.toLowerCase().includes('todeleteid') ){\r\n        specialChars = /[]/; \r\n    }\r\n    const specialCharPresent = specialChars.test(val)\r\n    if(specialCharPresent){\r\n        console.log(fieldName)\r\n        console.log(val)\r\n        console.log(specialCharPresent);\r\n    }\r\n    return specialCharPresent;\r\n}\r\nfunction checkChar(data) {\r\n    try{\r\n        const newObj = flattenObject(data);\r\n        const keys = Object.keys(newObj);\r\n        console.log(keys)\r\n        let status = [];\r\n        var detectedList = [];\r\n        for(let i=0; i < keys.length; i++){\r\n            const detectedStatus = sqlInjectionChars(newObj[keys[i]], keys[i]);\r\n            status.push(detectedStatus);\r\n            if(detectedStatus){\r\n                detectedList.push(keys[i])\r\n            }\r\n        }  \r\n        return [status, detectedList]\r\n    }catch(e){\r\n        console.log(e);\r\n    }\r\n  }\r\nfunction validate(data) {\r\n    const [status, detectedList] = checkChar(data);\r\n    return detectedList;\r\n}\r\nexport { validate };","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\AAForm\\AddWorkspace.jsx",["1327","1328","1329","1330","1331","1332","1333"],"\r\nimport React, { Component } from 'react';\r\n  import ReactDOM from \"react-dom\";\r\n  import {\r\n    Modal,\r\n    Button,\r\n    FormGroup,\r\n    TextInput,\r\n    Form,\r\n    ModalWrapper\r\n  } from \"carbon-components-react\";\r\n  import \"../form.scss\";\r\n  import { Add32  } from \"@carbon/icons-react\";\r\n  import { TrashCan32   } from \"@carbon/icons-react\";\r\n  import { trackPromise } from \"react-promise-tracker\";\r\n//   class AddWorkspace extends Component{\r\n  class AddWorkspace extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            display: '',\r\n        };\r\n    }\r\n    cancelModal = (e) => {\r\n        e.preventDefault();\r\n        // this.props.cancelModal();\r\n        this.setState({\r\n            display: 'none',\r\n        })\r\n        // this.props.nextStep();\r\n    }\r\n    render() {\r\n        var wrapper = \"\";\r\n        if(this.state){\r\n            wrapper = this.state.display;\r\n        }\r\n      return (\r\n        <div className='popup' >\r\n            {/* <div data-modal id=\"modal-addWorkspace\" className=\"bx--modal popup\" role=\"dialog\"  */}\r\n                    {/* aria-modal=\"true\" aria-labelledby=\"modal-addWorkspace-label\" aria-describedby=\"modal-addWorkspace-heading\" tabindex=\"-1\"> */}\r\n                    <div className=\"bx--modal-container modal-css\">\r\n                        <div className=\"bx--modal-header\">\r\n                            <p className=\"bx--modal-header__label bx--type-delta\" id=\"modal-addWorkspace-label\">Optional label</p>\r\n                            <p className=\"bx--modal-header__heading bx--type-beta\" id=\"modal-addWorkspace-heading\">Modal heading</p>\r\n                            <button className=\"bx--modal-close\" type=\"button\" data-modal-close aria-label=\"close modal\" >\r\n                                <TrashCan32 className=\"iconEditSize\" aria-label=\"Delete Rule\" title=\"Delete Rule\"/>\r\n                                {/* <svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" style=\"will-change: transform;\" xmlns=\"http://www.w3.org/2000/svg\" className=\"bx--modal-close__icon\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path d=\"M12 4.7L11.3 4 8 7.3 4.7 4 4 4.7 7.3 8 4 11.3 4.7 12 8 8.7 11.3 12 12 11.3 8.7 8z\"></path></svg> */}\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div className=\"bx--modal-content\" >\r\n                            <Form>\r\n                                <TextInput\r\n                                    className=\"bx--text-input bx--text__input\"\r\n                                    id=\"adminName\"\r\n                                    labelText=\"Slack Workspace Admin Name\"\r\n                                    placeholder=\"Slack Workspace Admin Name\"\r\n                                />\r\n                                <br />\r\n                    \r\n                                <TextInput\r\n                                    className=\"bx--text-input bx--text__input\"\r\n                                    id=\"adminEmail\"\r\n                                    labelText=\"Slack Workspace Admin Email\"\r\n                                    placeholder=\"Slack Workspace Admin Email\"\r\n                                />\r\n                                <br />\r\n                    \r\n                                <TextInput\r\n                                    className=\"bx--text-input bx--text__input\"\r\n                                    id=\"workspaceSigningSecret\"\r\n                                    labelText=\"Workspace Signing Secret\"\r\n                                    placeholder=\"Workspace Signing Secret\"\r\n                                />\r\n                                <br />\r\n                    \r\n                                <TextInput\r\n                                    className=\"bx--text-input bx--text__input\"\r\n                                    id=\"xoxptoken\"\r\n                                    labelText=\"Workspace xoxp Token\"\r\n                                    placeholder=\"Workspace xoxp Token\"\r\n                                />\r\n                                <br />\r\n                    \r\n                                <TextInput\r\n                                    className=\"bx--text-input bx--text__input\"\r\n                                    id=\"xoxbtoken\"\r\n                                    labelText=\"Workspace xoxb Token\"\r\n                                    placeholder=\"Workspace xoxb Token\"\r\n                                />\r\n                            </Form>\r\n                        </div>\r\n                        <div className=\"bx--modal-content--overflow-indicator\"></div>\r\n\r\n                        <div className=\"bx--modal-footer\">\r\n                            <Button kind=\"secondary\" className=\"addWorkspace\" onClick={this.cancelModal} > \r\n                                Cancel\r\n                            </Button>\r\n                            <Button kind=\"primary\" className=\"addWorkspace\" onClick={e => {this.saveWorkspace();}}> \r\n                                Add Workspace\r\n                            </Button>\r\n                            {/* <button className=\"bx--btn bx--btn--secondary\" type=\"button\" data-modal-close>Cancel</button> */}\r\n                            {/* <button className=\"bx--btn bx--btn--primary\" type=\"button\"   data-modal-primary-focus>Add Workspace</button> */}\r\n                        </div>\r\n                    </div>\r\n                    <span tabindex=\"0\"></span>\r\n                </div> \r\n          \r\n      );\r\n    }\r\n  }\r\n\r\n\r\n  export default AddWorkspace;\r\n\r\n\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\AAForm\\AddRulesModal.jsx",["1334","1335","1336","1337","1338","1339","1340","1341","1342","1343","1344"],"import {\r\n  Checkbox,\r\n  Column,\r\n  Form,\r\n  Grid,\r\n  Modal,\r\n  Row,\r\n  Select,\r\n  SelectItem,\r\n  TextInput,\r\n} from \"carbon-components-react\";\r\nimport React, { useState, Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Add24 } from \"@carbon/icons-react\";\r\nimport { AddAlt32 } from \"@carbon/icons-react\";\r\nimport { TrashCan32 } from \"@carbon/icons-react\";\r\nimport \"../form.scss\";\r\nimport AdditionalProp from './AdditionalProp';\r\n\r\nconst ModalStateManager = ({\r\n  renderLauncher: LauncherContent,\r\n  children: ModalContent,\r\n}) => {\r\n  const [open, setOpen] = useState(false);\r\n  return (\r\n    <>\r\n      {!ModalContent || typeof document === \"undefined\"\r\n        ? null\r\n        : ReactDOM.createPortal(\r\n            <ModalContent open={open} setOpen={setOpen} />,\r\n            document.body\r\n          )}\r\n      {LauncherContent && <LauncherContent open={open} setOpen={setOpen} />}\r\n    </>\r\n  );\r\n};\r\n\r\nclass AddRules extends Component {\r\n//   state = {};\r\n    constructor(props) {    \r\n        super(props)\r\n        this.state = { \r\n            additionalProp: [{ additionalPropKey: \"\", additionalPropVal : \"\" }],\r\n        };\r\n        this.additionalPropData = [];\r\n    }\r\n    \r\n  getUTCTime = (time) => {\r\n    const inputDate = \"2018-10-22\";\r\n    const inputTime = time;\r\n\r\n    const getUTCTime = (d) => {\r\n      return d.getUTCHours() + \":\" + d.getUTCMinutes() + \" UTC\";\r\n    };\r\n\r\n    let [y, m, d] = inputDate.split(\"-\");\r\n    let date = new Date(y, m - 1, d);\r\n    let [hh, mm] = inputTime.match(/\\d+/g).map((x) => parseInt(x));\r\n    let [ap] = inputTime.match(/[a-z]+/i);\r\n\r\n    ap = ap.toLowerCase();\r\n    if (ap === \"pm\") {\r\n      hh = hh < 12 ? hh + 12 : 0;\r\n    }\r\n    date.setHours(hh, mm);\r\n\r\n    let utc = getUTCTime(date);\r\n    return utc;\r\n  };\r\n  \r\n  \r\n  handleChange( e) {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  }\r\n  \r\n  \r\n  render() {\r\n    let modalFor = this.props.rulesFor;\r\n    if(modalFor ===\"group\")\r\n    {\r\n      modalFor = \"Add Rules\";\r\n    }\r\n    else\r\n    {\r\n      modalFor = \"Add Index Channel\"\r\n    }\r\n    const { accountsData } = this.props;\r\n    //console.log(`accountsData---${JSON.stringify(accountsData)}`);\r\n    const timeList = [\r\n      \"1:00AM\",\r\n      \"2:00AM\",\r\n      \"3:00AM\",\r\n      \"4:00AM\",\r\n      \"5:00AM\",\r\n      \"6:00AM\",\r\n      \"7:00AM\",\r\n      \"8:00AM\",\r\n      \"9:00AM\",\r\n      \"10:00AM\",\r\n      \"11:00AM\",\r\n      \"12:00PM\",\r\n      \"1:00PM\",\r\n      \"2:00PM\",\r\n      \"3:00PM\",\r\n      \"4:00PM\",\r\n      \"5:00PM\",\r\n      \"6:00PM\",\r\n      \"7:00PM\",\r\n      \"8:00PM\",\r\n      \"9:00PM\",\r\n      \"10:00PM\",\r\n      \"11:00PM\",\r\n      \"12:00AM\",\r\n    ];\r\n    const operationList = [\r\n      \"INCLUDE\",\r\n      \"PRESENT\",\r\n    ];\r\n    let TICKETASSIGNMENTGROUPS = [];\r\n    let additionalPropArr = [];\r\n    let GROUPSOPERATION = \"\";\r\n    let TICKETTYPE = \"\";\r\n    const rules = {\r\n      GEOGRAPHY: {},\r\n      TICKETTYPE: {},\r\n      MARKET: {},\r\n      SECTOR: {},\r\n      INDUSTRY: {},\r\n      COUNTRY: {},\r\n      TICKETPRIORITY: {},\r\n      TICKETIMPACT: {},\r\n      ADDITIOANLPROPERTY: {},\r\n      CDIR: \"\",\r\n      CDIC: \"\",\r\n      BlueID: \"\",\r\n      additionalPropArr: []\r\n    };\r\n    const timeRules = {\r\n      \"START TIME\": \"\",\r\n      \"END TIME\": \"\",\r\n    };\r\n\r\n    let geo = \"\";\r\n    let markets = \"\";\r\n    let sector = \"\";\r\n    let industry = \"\";\r\n    let country = \"\";\r\n    var ticketTypeList = ''\r\n    if (accountsData) {\r\n        ticketTypeList = accountsData.ticketTemplates\r\n      geo = accountsData.geoList\r\n        .filter((value) => value.geo != \"Choose an Option\")\r\n        .map((value) => (\r\n          <Checkbox\r\n            key={`${this.props.index}-geo-${value.geo}`}\r\n            id={`${this.props.index}-geo-${value.geo}`}\r\n            labelText={value.geo}\r\n            onChange={(checked) => {\r\n              if (checked) rules.GEOGRAPHY[value.geo] = checked;\r\n              else delete rules.GEOGRAPHY[value.geo];\r\n            }}\r\n          />\r\n        ));\r\n      markets = accountsData.marketList.map((market) => (\r\n        <Checkbox\r\n          key={`${this.props.index}-market-${market}`}\r\n          id={`${this.props.index}-market-${market}`}\r\n          labelText={market}\r\n          onChange={(checked) => {\r\n            if (checked) rules.MARKET[market] = checked;\r\n            else delete rules.MARKET[market];\r\n          }}\r\n        />\r\n      ));\r\n\r\n      sector = accountsData.sectorList\r\n        .filter((value) => value.desc != \"Choose an Option\")\r\n        .map((value) => (\r\n          <Checkbox\r\n            key={`${this.props.index}-sector-${value.desc}`}\r\n            id={`${this.props.index}-sector-${value.desc}`}\r\n            labelText={value.desc}\r\n            onChange={(checked) => {\r\n              if (checked) rules.SECTOR[value.desc] = checked;\r\n              else delete rules.SECTOR[value.desc];\r\n            }}\r\n          />\r\n        ));\r\n\r\n      industry = accountsData.industryList\r\n        .filter((value) => value.desc != \"Choose an Option\")\r\n        .map((value) => (\r\n          <Checkbox\r\n            key={`${this.props.index}-industry-${value.desc}`}\r\n            id={`${this.props.index}-industry-${value.desc}`}\r\n            labelText={value.desc}\r\n            onChange={(checked) => {\r\n              if (checked) rules.INDUSTRY[value.desc] = checked;\r\n              else delete rules.INDUSTRY[value.desc];\r\n            }}\r\n          />\r\n        ));\r\n\r\n      country = accountsData.countryList.map((value) => (\r\n        <Checkbox\r\n          key={`${this.props.index}-country-${value.desc}`}\r\n          id={`${this.props.index}-country-${value.desc}`}\r\n          labelText={value.desc}\r\n          onChange={(checked) => {\r\n            if (checked) rules.COUNTRY[value.desc] = checked;\r\n            else delete rules.COUNTRY[value.desc];\r\n          }}\r\n        />\r\n      ));\r\n    }\r\n\r\n    let ticketPriority = [1, 2, 3, 4];\r\n    ticketPriority = ticketPriority.map((n) => (\r\n      <Checkbox\r\n        key={`${this.props.index}-${n}`}\r\n        id={this.props.index + n}\r\n        labelText={n}\r\n        onChange={(checked) => {\r\n          if (checked) rules.TICKETPRIORITY[n] = checked;\r\n          else delete rules.TICKETPRIORITY[n];\r\n        }}\r\n      />\r\n    ));\r\n\r\n    let ticketImpact = [\"Critical\", \"High\", \"Major\", \"Medium\", \"Minor\", \"Low\"];\r\n    ticketImpact = ticketImpact.map((value) => (\r\n      <Checkbox\r\n        key={this.props.index + value}\r\n        id={this.props.index + value}\r\n        labelText={value}\r\n        onChange={(checked) => {\r\n          if (checked) rules.TICKETIMPACT[value] = checked;\r\n          else delete rules.TICKETIMPACT[value];\r\n        }}\r\n      />\r\n    ));\r\n\r\n    const withStateManagerProps = {\r\n      className: \"some-class\",\r\n      modalHeading: modalFor,\r\n      primaryButtonText: \"Submit Rule\",\r\n      secondaryButtonText: \"Cancel\",\r\n    };\r\n    const { size, ...rest } = withStateManagerProps;\r\n\r\n    return (\r\n      <ModalStateManager\r\n        renderLauncher={({ setOpen }) => (\r\n          <Add24\r\n            className=\"iconAddSize\"\r\n            aria-label=\"Add Rule\"\r\n            title=\"Add Rule\"\r\n            onClick={() => setOpen(true)}\r\n          />\r\n        )}\r\n      >\r\n    \r\n        {({ open, setOpen }) => (\r\n          <Modal\r\n            aria-label={modalFor}\r\n            {...rest}\r\n            size={size || undefined}\r\n            open={open}\r\n            className=\"bx--rules-popup-container\"\r\n            onRequestClose={() => setOpen(false)}\r\n            onRequestSubmit={() => {\r\n              const rulesArr = [];\r\n              if (\r\n                (timeRules[\"START TIME\"] || timeRules[\"END TIME\"]) &&\r\n                !(timeRules[\"START TIME\"] && timeRules[\"END TIME\"])\r\n              )\r\n                return;\r\n                var addPropKey;\r\n                var addPropVal;\r\n                var addPropstring=\"\";\r\n                var objLen;\r\n                var valueList;\r\n                Object.entries(rules).forEach((value) => {\r\n                    const key = value[0];\r\n                    if (value[1] && typeof value[1] == \"string\") {\r\n                         rulesArr.push(`('${key}'='${value[1]}')`);\r\n                    }else{\r\n                        valueList = Object.keys(value[1]);\r\n                        if(key == \"ADDITIOANLPROPERTY\"){\r\n                            objLen = Object.keys(value[1]).length;\r\n                            if(objLen == 2){\r\n                                rulesArr.push(`('${value[1][\"additionalPropKey-0\"]}'='${value[1][\"additionalPropVal-0\"]}')`);\r\n                            }else{\r\n                                valueList = value[1];\r\n                                if (objLen > 2) {\r\n                                   \r\n                                    for(var i=0; i < objLen/2; i++){\r\n                                        addPropstring = \"('\"+ valueList[\"additionalPropKey-\"+i]+\"'='\"+valueList[\"additionalPropVal-\"+i] + \"')\" + \" AND \" + addPropstring\r\n                                    }\r\n                                     addPropstring = addPropstring.slice(0, -5)\r\n                                     addPropstring = `(${addPropstring})`;\r\n                                     rulesArr.push(addPropstring );\r\n                                }\r\n                            }\r\n                        }else{\r\n                            if (valueList.length) {\r\n                              rulesArr.push(\r\n                                `(${valueList\r\n                                  .map((r) => `'${key}'='${r}'`)\r\n                                  .join(\" OR \")})`\r\n                              );\r\n                            }\r\n                            \r\n                        }\r\n                    }\r\n                });\r\n\r\n              if (timeRules[\"START TIME\"] && timeRules[\"END TIME\"]) {\r\n                rulesArr.push(\r\n                  \"('START TIME'= '\" +\r\n                    this.getUTCTime(timeRules[\"START TIME\"]) +\r\n                    \"'\" +\r\n                    \" TO 'END TIME'= '\" +\r\n                    this.getUTCTime(timeRules[\"END TIME\"]) +\r\n                    \"')\"\r\n                );\r\n              }\r\n              if(TICKETTYPE){\r\n                rulesArr.push(\r\n                  \"('TICKETTYPE'='\" +\r\n                  TICKETTYPE +\r\n                  \"')\"\r\n                );\r\n                }\r\n              if (TICKETASSIGNMENTGROUPS.length >0) {\r\n                let groupArr = TICKETASSIGNMENTGROUPS.split(',');\r\n                TICKETASSIGNMENTGROUPS = groupArr.map((val) => \"'\" + val + \"'\").join(',');\r\n                if(GROUPSOPERATION){\r\n                rulesArr.push(\r\n                  \"('TICKETASSIGNMENTGROUPS'.\" +\r\n                    GROUPSOPERATION +\r\n                    \"([\" +\r\n                    TICKETASSIGNMENTGROUPS +\r\n                    \"]))\"\r\n                );\r\n                }\r\n              }\r\n              this.props.onAddRules(rulesArr.join(\" AND \"));\r\n              setOpen(false);\r\n            }}\r\n          >\r\n            <Form>\r\n              <Grid>\r\n                <Row>\r\n                  <Column lg={6}>\r\n                    <TextInput\r\n                      id=\"geo\"\r\n                      labelText=\"Geo\"\r\n                      placeholder=\"Enter Geo\"\r\n                    />\r\n                    <div className=\"box\">{geo}</div>\r\n                  </Column>\r\n                  <Column lg={1}></Column>\r\n                  <Column lg={5}>\r\n                    <TextInput\r\n                      id=\"market\"\r\n                      labelText=\"Market\"\r\n                      placeholder=\"Enter Market\"\r\n                    />\r\n                    <div className=\"box\">{markets}</div>\r\n                  </Column>\r\n                </Row>\r\n                <br />\r\n                <Row>\r\n                  <Column lg={6}>\r\n                    <TextInput\r\n                      id=\"sector\"\r\n                      labelText=\"Sector\"\r\n                      placeholder=\"Enter Sector\"\r\n                    />\r\n                    <div className=\"box\">{sector}</div>\r\n                  </Column>\r\n                  <Column lg={1}></Column>\r\n                  <Column lg={5}>\r\n                    <TextInput\r\n                      id=\"industry\"\r\n                      labelText=\"Industry\"\r\n                      placeholder=\"Enter Industry\"\r\n                    />\r\n                    <div className=\"box\">{industry}</div>\r\n                  </Column>\r\n                </Row>\r\n                <br />\r\n                <Row>\r\n                  <Column lg={6}>\r\n                    <TextInput\r\n                      id=\"country\"\r\n                      labelText=\"Country\"\r\n                      placeholder=\"Enter Country\"\r\n                    />\r\n                    <div className=\"box\">{country}</div>\r\n                  </Column>\r\n                  <Column lg={1}></Column>\r\n                  <Column lg={5}>\r\n                    <TextInput\r\n                      id=\"ticketPriority\"\r\n                      labelText=\"Ticket Priority\"\r\n                      placeholder=\"Enter Ticket Priority\"\r\n                    />\r\n                    <div className=\"box\">{ticketPriority}</div>\r\n                  </Column>\r\n                </Row>\r\n                <br />\r\n                <Row>\r\n                  <Column lg={6}>\r\n                    <TextInput\r\n                      id={this.props.index + \"ticketImpact\"}\r\n                      labelText=\"Ticket Impact\"\r\n                      placeholder=\"Enter Ticket Impact\"\r\n                    />\r\n                    <div className=\"box\">{ticketImpact}</div>\r\n                  </Column>\r\n                  {/* <Column lg={1}></Column> */}\r\n                  <Column lg={6}>\r\n                    {this.props.rulesFor === \"group\" && (\r\n                      <>\r\n                        <div>Time</div>\r\n                        <br />\r\n                        <Select\r\n                          name=\"startTime\"\r\n                          id=\"startTime\"\r\n                          placeholder=\"Choose start time\"\r\n                          onChange={(e) => {\r\n                            timeRules[\"START TIME\"] = e.target.value;\r\n                          }}\r\n                        >\r\n                          <SelectItem\r\n                            hidden\r\n                            value=\"\"\r\n                            text=\"Choose start time\"\r\n                          />\r\n                          {timeList.map((time) => (\r\n                            <SelectItem\r\n                              key={this.props.index + \"startTime\" + time}\r\n                              id={this.props.index + \"startTime\" + time}\r\n                              value={time}\r\n                              text={time}\r\n                            />\r\n                          ))}\r\n                        </Select>\r\n                        <br />\r\n                        <Select\r\n                          name=\"endTime\"\r\n                          id=\"endTime\"\r\n                          placeholder=\"Choose end time\"\r\n                          onChange={(e) => {\r\n                            timeRules[\"END TIME\"] = e.target.value;\r\n                          }}\r\n                        >\r\n                          <SelectItem hidden value=\"\" text=\"Choose end time\" />\r\n                          {timeList.map((time) => (\r\n                            <SelectItem\r\n                              key={this.props.index + \"endTime\" + time}\r\n                              id={this.props.index + \"endTime\" + time}\r\n                              value={time}\r\n                              text={time}\r\n                            />\r\n                          ))}\r\n                        </Select>\r\n                      </>\r\n                    )}\r\n                  </Column>\r\n                  <Column lg={6}>\r\n                    <div>\r\n                      <span>\r\n                      Ticket Assignment Groups <b className=\"groupLabel\">(Please select Operation and Value)</b>\r\n                      </span>\r\n                    </div>\r\n                    <br />\r\n                    <Select\r\n                          name=\"groupsOperation\"\r\n                          id=\"groupsOperation\"\r\n                          labelText=\"Select Operation\"\r\n                          placeholder=\"Choose Group Operation\"\r\n                          onChange={(e) => {\r\n                            GROUPSOPERATION = e.target.value;\r\n                          }}\r\n                        >\r\n                          <SelectItem\r\n                            hidden\r\n                            value=\"\"\r\n                            text=\"Choose Group Operation\"\r\n                          />\r\n                          {operationList.map((operation) => (\r\n                            <SelectItem\r\n                              key={this.props.index + \"groupsOperation\" + operation}\r\n                              id={this.props.index + \"groupsOperation\" + operation}\r\n                              value={operation}\r\n                              text={operation}\r\n                            />\r\n                          ))}\r\n                    </Select>\r\n                    <span>\r\n                      <b className=\"fontRed\">*</b><b className=\"groupLabel\">INCLUDE - Exact match</b>\r\n                      <br />\r\n                      <b className=\"fontRed\">*</b><b className=\"groupLabel\">PRESENT - Not exact match</b>\r\n                    </span>\r\n                    <br /><br />\r\n                    <TextInput\r\n                      id={this.props.index + \"ticketAssignmentGroups\"}\r\n                      name=\"ticketAssignmentGroups\"\r\n                      labelText={<>Enter Value <b className=\"groupLabel\">(Comma Separated)</b></>}\r\n                      placeholder=\"Enter Assignment Groups\"\r\n                      onChange={(e) => {\r\n                        TICKETASSIGNMENTGROUPS = e.target.value;\r\n                      }}\r\n                    />\r\n                  </Column>\r\n                  </Row>\r\n                  <Row>\r\n                  <Column lg={6}>\r\n                        <Select\r\n                            name=\"ticketType\"\r\n                            id=\"ticketType\"\r\n                            labelText=\"Select Ticket Type\"\r\n                            placeholder=\"Choose Ticket Type\"\r\n                            onChange={(e) => {\r\n                                TICKETTYPE = e.target.value;\r\n                            }}\r\n                            >\r\n                            <SelectItem\r\n                                hidden\r\n                                value=\"\"\r\n                                text=\"Choose Ticket Type\"\r\n                            />\r\n                            {ticketTypeList.map((ticketType) => (\r\n                                <SelectItem\r\n                                key={\"ticketType\" + ticketType}\r\n                                id={\"ticketType\" + ticketType}\r\n                                value={ticketType}\r\n                                text={ticketType}\r\n                                />\r\n                            ))}\r\n                        </Select> \r\n                    </Column>\r\n                </Row>\r\n                <AdditionalProp rules={rules} addProperty={this.additionalProps}/>\r\n              </Grid>\r\n            </Form>\r\n          </Modal>\r\n        )}\r\n      </ModalStateManager>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddRules;\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ISTogether\\Requester\\ReqBreadCrump.jsx",["1345","1346","1347","1348","1349","1350","1351","1352"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nclass ReqBreadCrump extends React.Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = (\r\n    //         {\r\n    //             data: '',\r\n    //         }\r\n    //     );\r\n    // }\r\n    // componentDidMount() {\r\n    //     const search = this.props.location.search;\r\n    //     const recordId = new URLSearchParams(search).get(\"id\");\r\n    //     this.setState({recordId: recordId})\r\n    //     trackPromise(\r\n    //         fetch(\"/mui/getCIOUserData?id=\"+recordId)\r\n    //         .then((res) => {\r\n    //             return res.json();\r\n    //         })\r\n    //         .then((cioUserData) => {\r\n    //             var dateFormat = cioUserData.cioUserData.weekDayName;\r\n    //             this.setState({ date:dateFormat });\r\n    //         })\r\n    //     );\r\n    // }\r\n  render() {\r\n    //   var date = this.state.date;\r\n    return (\r\n        <div className=\"breadCrumpDiv headerDiv sectionMargin  mainMargin\">\r\n            {/* <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/home\">Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem isCurrentPage>\r\n                    <Link to=\"/mui/dailyReporting\">Report</Link>\r\n                </BreadcrumbItem>\r\n            </Breadcrumb> */}\r\n            <h2 className=\"headerText\">Requester</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(ReqBreadCrump);","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ISTogether\\Requester\\Requester.jsx",["1353","1354","1355","1356","1357","1358","1359","1360","1361","1362","1363","1364","1365","1366","1367","1368","1369","1370","1371","1372","1373","1374","1375","1376","1377","1378","1379","1380","1381","1382","1383","1384","1385","1386","1387","1388","1389","1390","1391","1392","1393","1394","1395","1396","1397","1398","1399","1400","1401","1402","1403","1404","1405","1406","1407","1408","1409","1410","1411","1412","1413","1414","1415"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport {  Button, Tabs, Tab, ListItem, Form, TextInput, TextArea, Select, SelectItem  } from 'carbon-components-react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { TrashCan32 } from \"@carbon/icons-react\";\r\nimport Datetime from 'react-datetime';\r\nimport \"react-datetime/css/react-datetime.css\";\r\nimport { AddAlt32 } from \"@carbon/icons-react\";\r\nimport { validate } from '../../../validation/validate.js';\r\n// import DRForm from './DRForm';\r\nimport LazyLoad from \"react-lazyload\";\r\nimport validator from 'validator';\r\nclass ReqHome extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = (\r\n            {\r\n                disableMarket: true,\r\n                addResource: [{resource: \"\"}],\r\n                required: \"required\",\r\n                reqEMail: \"\",\r\n                altEmail: \"\",\r\n                account: \"\",\r\n                geo: \"\",\r\n                resourceEmail: [\"\"],\r\n                market:\"\",\r\n                suppotType: \"\",\r\n                shortDescription:\"\",\r\n                description:\"\",\r\n                startDate: \"\",\r\n                endDate: \"\",\r\n                skills: \"\",\r\n                estimatedHours: \"\",\r\n                comments: \"\",\r\n                requiredAdmin: true,\r\n                isValidEndDate:true,\r\n                validStartDate: true,\r\n                requestorContactNo:'',\r\n                technicalContactNo:''\r\n            }\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        trackPromise(\r\n            fetch(\"/mui/teamITData\")\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((dbData) => {\r\n                this.setState({ dbData });\r\n            })\r\n        );\r\n        trackPromise(\r\n            fetch(\"/mui/reqData\")\r\n            .then((res) => {\r\n                // const { command } = await res.json();\r\n                return res.json();\r\n            })\r\n            .then((reqData) => {\r\n                this.setState({ reqData });\r\n                this.setState({disableMarket: false});\r\n                this.setState({requiredAdmin: false});\r\n                this.setState({reqID: this.state?.reqData?.reqid});\r\n            })\r\n        );\r\n\r\n        trackPromise(\r\n            fetch(\"/mui/volunteertracker\")\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((data) => {\r\n                var command  = data.volunteerTrackerData;\r\n                let resourceEmail = [];\r\n                if(command === null || command === undefined || command.length === 0){\r\n                    this.setState({resourceEmail: resourceEmail})\r\n                }\r\n                else\r\n                {\r\n                    command.forEach( volunteerTracker => {\r\n                        resourceEmail.push(volunteerTracker.volunteerEmail);\r\n                    })\r\n                    this.setState({resourceEmail: resourceEmail})\r\n                    command.resources = resourceEmail;\r\n                }\r\n            })\r\n        );\r\n    }\r\n    addParamField = () => {\r\n        const { resourceEmail } = this.state;\r\n        resourceEmail.push(\"\");\r\n        this.setState({\r\n          resourceEmail,\r\n        });\r\n      };\r\n    deleteParamField = (index) => {\r\n        const { resourceEmail } = this.state;\r\n        if (resourceEmail.filter((param) => param != undefined).length <= 1) return;\r\n        resourceEmail[index] = undefined;\r\n        this.setState({\r\n          resourceEmail,\r\n        });\r\n      };\r\n      addParam = (index, value) => {\r\n        const { resourceEmail } = this.state;\r\n        resourceEmail[index] = value.trim();\r\n      };\r\n      handleParam = (e) => {\r\n        const { id, value } = e.target;\r\n        const [field, i] = id.split(\"-\");\r\n        if (field === \"inputResource\") {\r\n          this.addParam(+i, value);\r\n        } else if (field === \"delResource\") {\r\n          this.deleteParamField(+i);\r\n        }\r\n      };\r\n    handleChange1 = (e) => {\r\n        var currentDate = new Date();\r\n        var currentDateNew = (currentDate.getMonth() + 1) + \"/\" + currentDate.getDate() + \"/\" + currentDate.getFullYear();\r\n        var month = e._d.getMonth() + 1; //months from 1-12\r\n        var day = e._d.getDate();\r\n        var year = e._d.getFullYear();\r\n        var endDate = month + \"/\" + day + \"/\" + year;\r\n        // if(endDate < currentDateNew){\r\n        //     this.setState({disableBtn_endDate: true})\r\n        // }else{\r\n            this.setState({ endDate: endDate });\r\n            this.setState({inValidDateDescription:\"\"});\r\n            this.setState({isValidEndDate : true});\r\n            this.setState({disableBtn_endDate: false})\r\n        // }\r\n    }\r\n    handleChange2 = (e) => {\r\n        var currentDate = new Date();\r\n        var currentDateNew = (currentDate.getMonth() + 1) + \"/\" + currentDate.getDate() + \"/\" + currentDate.getFullYear();\r\n        var month = e._d.getMonth() + 1; //months from 1-12\r\n        var day = e._d.getDate();\r\n        var year = e._d.getFullYear();\r\n        var startDate = month + \"/\" + day + \"/\" + year;\r\n        // if(startDate < currentDateNew){\r\n        //     this.setState({disableBtn_startDate: true})\r\n        // }else{\r\n            this.setState({ startDate: startDate });\r\n            this.setState({inValidDateDescription:\"\"});\r\n            this.setState({isValidEndDate : true});\r\n            this.setState({disableBtn_startDate: false})\r\n        // }\r\n    }\r\n    handleInputChange = (e) => {\r\n        if ((e.target.value && e.target.value.includes(\"script\") && e.target.value.includes(\"<\")) || e.target.value.includes(\">\")){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        if(e.target.name == \"requesterEmail\" || e.target.name == \"alternateContactEmail\"){\r\n            if (e.target.value && e.target.value.includes(\"@\")){\r\n                this.setState({\r\n                    [e.target.name]: e.target.value,\r\n                });\r\n                this.setState({\r\n                    [\"inValid_\" + e.target.name]: \"\",\r\n                });\r\n            }else{\r\n                this.setState({\r\n                    [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n                });\r\n                return;\r\n            }\r\n        }\r\n        \r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n    updateValue = (e) => {\r\n        if(e.target.name == \"reqGeo\" && e.target.value != \"\"){\r\n            this.setState({disableMarket: false})\r\n            this.setState({required: \"required\"})\r\n        }\r\n        if(e.target.name == \"reqGeo\" && e.target.value == \"\"){\r\n            this.setState({disableMarket: true})\r\n            this.setState({required: \"\"})\r\n        }\r\n        \r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n    updateValue1 = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n    handleCheckbox1(name, event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.checked,\r\n        });\r\n    };\r\n    handleCheckbox3(name, event) {\r\n        if(event.target.checked == true) {\r\n            this.setState({\r\n                [event.target.name]: event.target.getAttribute(\"data-value\"),\r\n            });\r\n        }else{\r\n            this.setState({[event.target.name]: \"\"})\r\n        }\r\n    };\r\n    handleCheckbox2(name, event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.checked,\r\n        });\r\n    };\r\n    handleCharacterChange = (e) => {\r\n        if(e.target.name == \"comments\" ){\r\n            if(e.target.value.length == 300){\r\n                this.setState({[\"disableBtn_\"+ e.target.name]: true})\r\n                this.setState({[\"maxLengthErr_\" + e.target.name]: \"You have reached the maximum limit of characters allowed\"})\r\n            }else{\r\n                this.setState({[\"disableBtn_\"+ e.target.name]: false})\r\n                this.setState({[\"maxLengthErr_\" + e.target.name]: \"\"})\r\n            }\r\n        }\r\n        if(e.target.name == \"shortDescription\"){\r\n            if(e.target.value.length == 300){\r\n                this.setState({[\"disableBtn_\"+ e.target.name]: true})\r\n                this.setState({[\"maxLengthErr_\" + e.target.name]: \"You have reached the maximum limit of characters allowed\"})\r\n            }else{\r\n                this.setState({[\"disableBtn_\"+ e.target.name]: false})\r\n                this.setState({[\"maxLengthErr_\" + e.target.name]: \"\"})\r\n            }\r\n        }\r\n        if(e.target.name == \"description\"){\r\n            if(e.target.value.length == 1500){\r\n                this.setState({[\"disableBtn_\"+ e.target.name]: true})\r\n                this.setState({[\"maxLengthErr_\" + e.target.name]: \"You have reached the maximum limit of characters allowed\"})\r\n            }else{\r\n                this.setState({[\"disableBtn_\"+ e.target.name]: false})\r\n                this.setState({[\"maxLengthErr_\" + e.target.name]: \"\"})\r\n            }\r\n        }\r\n    }\r\n    addClick(){\r\n        this.setState(prevState => ({ \r\n            addResource: [...prevState.addResource, { resource: \"\"}]\r\n        }))\r\n    }\r\n    createUI(){\r\n        var resourceState = this.state?.reqData?.dataToUI.resources;\r\n        return this.state.addResource.map((el, i) => (\r\n            <div key={i} className=\"addSelectInline\">\r\n                <div className=\"bx--col\">\r\n                <TextInput type=\"text\" className=\"bx--text-input bx--text__input\"  id={\"resource\"+i} name={\"resource\"+i} labelText= \"Resource Email\"  placeholder=\"Resource Email\" onBlur={this.handleChange.bind(this, i)} onChange={(e) => this.updateValue(e)}  defaultValue={el.addResource ||''} />\r\n                </div>\r\n                {/* <TrashCan32 value='remove' onClick={this.removeClick.bind(this, i)} className=\"linkStyle1\" /> */}\r\n            </div>          \r\n        ))\r\n    }\r\n    handleChange(i, e) {\r\n        const { name, value } = e.target;\r\n        let addResource = [...this.state.addResource];\r\n        addResource[i] = {...addResource[i], [name]: value};\r\n        this.setState({ addResource });\r\n\r\n   }\r\n   \r\n   removeClick(i){\r\n      let addResource = [...this.state.addResource];\r\n      addResource.splice(i, 1);\r\n      this.setState({ addResource });\r\n   }\r\n    formSubmit= (e) => {\r\n        e.preventDefault();\r\n        if(this.checkEndDateIsHigher() === false){\r\n            return false;\r\n        }\r\n        if(!this.state.reqID && (this.state.startDate === '' || this.state.endDate === '')){\r\n            this.setState({\r\n                resErrMsg: {\r\n                    dateError: 'Start date and End date is required'\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n        else {\r\n            this.setState({\r\n                resErrMsg: false\r\n            });\r\n\r\n        }\r\n        let [skillArr1, skillArr2,skillArr3, skillArr4,skillArr5, skillArr6, skillArr7, skillArr8, skillArr9, skillArr10 ] = [[], [], [], [], [], [], [], [], [], []]\r\n        var skills = {};\r\n        var resourceToSave = []\r\n        var addResourceArr = this.state.addResource;\r\n        for(var i = 0; i < addResourceArr.length; i++) {\r\n            for (var key in addResourceArr[i]) {\r\n                if(addResourceArr[i][key] == \"\"){\r\n                }else{\r\n                    var geoMarketObj = {}\r\n                    if(key.includes(\"resource\")){\r\n                        var resourcevalue = addResourceArr[i][key];\r\n                        resourceToSave.push(resourcevalue)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (var key in this.state) {\r\n            if (this.state.hasOwnProperty(key)) {\r\n                if(this.state[key] == \"Platform\"){\r\n                    skillArr1.push(key);\r\n                    skills[this.state[key]] = skillArr1\r\n                }\r\n                if(this.state[key] == \"Database\"){\r\n                    skillArr2.push(key);\r\n                    skills[this.state[key]] = skillArr2\r\n                }\r\n                if(this.state[key] == \"Middleware\"){\r\n                    skillArr3.push(key);\r\n                    skills[this.state[key]] = skillArr3\r\n                }\r\n                if(this.state[key] == \"SAP ERP\"){\r\n                    skillArr4.push(key);\r\n                    skills[this.state[key]] = skillArr4\r\n                }\r\n                if(this.state[key] == \"Network\"){\r\n                    skillArr5.push(key);\r\n                    skills[this.state[key]] = skillArr5\r\n                }\r\n                if(this.state[key] == \"Resiliency\"){\r\n                    skillArr6.push(key);\r\n                    skills[this.state[key]] = skillArr6\r\n                }\r\n                if(this.state[key] == \"Storage\"){\r\n                    skillArr7.push(key);\r\n                    skills[this.state[key]] = skillArr7\r\n                }\r\n                if(this.state[key] == \"Mainframe\"){\r\n                    skillArr8.push(key);\r\n                    skills[this.state[key]] = skillArr8\r\n                }\r\n                if(this.state[key] == \"WMS & Deskside (DWS)\"){\r\n                    skillArr9.push(key);\r\n                    skills[this.state[key]] = skillArr9\r\n                }\r\n                if(this.state[key] == \"Service Desk(DWS)\"){\r\n                    skillArr10.push(key);\r\n                    skills[this.state[key]] = skillArr10\r\n                }\r\n            }\r\n        }\r\n        var endDateTOSave = '';\r\n        if(this.state.endDate){\r\n            endDateTOSave = this.state.endDate\r\n        }\r\n        if(this.state.endDate && this.state.reqData.dataToUI.endDate){\r\n            endDateTOSave = this.state.endDate\r\n        }\r\n        if(!this.state.endDate && this.state.reqData.dataToUI.endDate){\r\n            endDateTOSave = this.state.reqData.dataToUI.endDate\r\n        }if(this.state.validStartDate === true){\r\n            var dataToSave = {\r\n                status: this.state.status || this.state.reqData.dataToUI.status,\r\n                closeCode: this.state.closeCode || this.state.reqData.dataToUI.closeCode,\r\n                account: this.state.account || this.state.reqData.dataToUI.account,\r\n                reqID: this.state.reqID,\r\n                alternateContactEmail: this.state.alternateContactEmail || this.state.reqData.dataToUI.alternateEmail,\r\n                claimTerms: this.state.claimTerms,\r\n                comments: this.state.comments || this.state.reqData.dataToUI.comments,\r\n                complianceTerms: this.state.complianceTerms,\r\n                description: this.state.description || this.state.reqData.dataToUI.description ,\r\n                endDate: endDateTOSave ,\r\n                estimatedHours: this.state.estimatedHours || this.state.reqData.dataToUI.estHours ,\r\n                reqGeo: this.state.reqGeo || this.state.reqData.dataToUI.geo ,\r\n                reqMarket: this.state.reqMarket || this.state.reqData.dataToUI.market ,\r\n                requesterEmail: this.state.requesterEmail || this.state.reqData.dataToUI.requesterEmail ,\r\n                shortDescription: this.state.shortDescription || this.state.reqData.dataToUI.shortDesc ,\r\n                startDate: this.state.startDate || this.state.reqData.dataToUI.startDate ,\r\n                supportType: this.state.supportType || this.state.reqData.dataToUI.supportType,\r\n                skills: skills || this.state.reqData.dataToUI.skills,\r\n                resourceToSave: this.state.resourceEmail || this.state.reqData.dataToUI.resources,\r\n                requestorContactNo:this.state.requestorContactNo || this.state.reqData.dataToUI.requestorContactNo,\r\n                technicalContactNo: this.state.technicalContactNo || this.state.reqData.dataToUI.technicalContactNo,\r\n            };\r\n             // SpecialCharacter validation\r\n            var validateFields = validate(dataToSave);\r\n            if(validateFields.length > 0){\r\n                var message = \"\";\r\n                for(var i =0; i<validateFields.length; i++){\r\n                    var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n                    if(element){\r\n                        message += element.title + \", \";\r\n                    }else{\r\n                        message += validateFields[i] + \", \"\r\n                    }\r\n                }\r\n                this.setState({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n            }else{\r\n                trackPromise(\r\n                        fetch('/mui/saveTeamITRequester' , {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            'Content-type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify(dataToSave)\r\n                    })\r\n                    .then((result) => {\r\n                        if (result.status === 404 || result.status === 400 || result.status === 500)  {\r\n                            result.json().then((object)=> {\r\n                                this.setState({resErrMsg: object.fetchErrorfromRequester});\r\n                            })\r\n                        } else if (result.status === 409) {\r\n                            result.json().then((object)=> {\r\n                                this.setState({resErrMsg: object.fetchErrorfromRequester});\r\n                            })\r\n                        } else if(result.status == 200){\r\n                            this.props.history.push(\"/mui/thankyou\");\r\n                        }\r\n                })\r\n                    .catch(err => { \r\n                    this.setState({errorMessage: err.message});\r\n                    })\r\n                )\r\n            }\r\n        }else{\r\n\r\n        }\r\n       \r\n    }\r\n\r\n    checkIfSelectedDateIsValid = (selectedDate)=> {\r\n        if (this.state.startDate) {\r\n            return selectedDate.isAfter(this.state.startDate - 1);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    checkEndDateIsHigher = () => {\r\n        let isValid = true;\r\n        if (this.state.endDate) {\r\n            const startDate = new Date(this.state.startDate);\r\n            const endDate = new Date(this.state.endDate);\r\n            if (endDate < startDate) {\r\n                this.setState({\r\n                    inValidDateDescription:\"End Date should be after Start Date\",\r\n                    isValidEndDate : false\r\n                });\r\n                isValid = false;\r\n                return isValid;\r\n            }\r\n        }\r\n        return isValid;\r\n    }\r\n    render() {\r\n        var stateObj = this.state;\r\n        var suportItem = ''\r\n        const itemssuport = [];\r\n        var statusListItem = ''\r\n        const itemsStatusList = [];\r\n        const itemscloseCodeList = [];\r\n        var closeCodeListItem = '';\r\n        var geoItem = ''\r\n        const itemsGeo = [];\r\n        const itemsMarket = [];\r\n        var formOptionMarket = \"\";\r\n        var disableMarket = this.state.disableMarket;\r\n        var itemsSkill = [];\r\n        var reqEMail;\r\n        var altEmail;\r\n        var account;\r\n        var geoToEdit;\r\n        var marketToEdit;\r\n        var suppotType;\r\n        var shortDescription;\r\n        var description;\r\n        var startDate;\r\n        var endDate;\r\n        var skillsToEdit;\r\n        var estimatedHours;\r\n        var comments;\r\n        var itemCategory = \"\";\r\n        var checkboxChecked = \"checked\";\r\n        var resourceDiv = '';\r\n        var status = '';\r\n        var colonVal = '';\r\n        var closeCode = '';\r\n        var statusList = [\"In Progress\", \"Completed\", \"Failed\"];\r\n        var closeCodeList = [\"Success\", \"On Hold\", \"Open\", \"Failed\", \"Closed\"];\r\n        let disableAll = false;\r\n        let disableResources = false;\r\n        let requestStatus = \"\";\r\n        let addResourceStyle = {};\r\n        let requestorContactNo='';\r\n        let technicalContactNo='';\r\n        let initialStartDate ='' ;\r\n        let initialEndDate ='';\r\n        if(this.state?.reqData){\r\n            var fromDBToEdit = this.state.reqData.dataToUI;\r\n            resourceDiv = this.state.reqData.reqUpdate;\r\n            reqEMail= fromDBToEdit.requesterEmail;\r\n            altEmail= fromDBToEdit.alternateEmail;\r\n            account= fromDBToEdit.account;\r\n            geoToEdit= fromDBToEdit.geo;\r\n            marketToEdit= fromDBToEdit.market;\r\n            suppotType= fromDBToEdit.supportType;\r\n            shortDescription= fromDBToEdit.shortDesc;\r\n            description= fromDBToEdit.description;\r\n            startDate= fromDBToEdit.startDate;\r\n            endDate= fromDBToEdit.endDate;\r\n            skillsToEdit= fromDBToEdit.skills;\r\n            estimatedHours= fromDBToEdit.estHours;\r\n            comments= fromDBToEdit.comments;\r\n            status = fromDBToEdit.status\r\n            closeCode = fromDBToEdit.closeCode\r\n            disableMarket = false\r\n            colonVal = \":\"\r\n            requestStatus = fromDBToEdit.adminStatus;\r\n            requestorContactNo = fromDBToEdit.requestorContactNo;\r\n            technicalContactNo = fromDBToEdit.technicalContactNo;\r\n        }else{\r\n            // CREATE\r\n            colonVal = \"\";\r\n            reqEMail= \"\";\r\n            altEmail= \"\";\r\n            account= \"\";\r\n            geoToEdit= \"\";\r\n            marketToEdit=\"\";\r\n            suppotType= \"\";\r\n            shortDescription=\"\";\r\n            description=\"\";\r\n            startDate= \"\";\r\n            endDate= \"\";\r\n            skillsToEdit= \"\";\r\n            estimatedHours= \"\";\r\n            comments= \"\";\r\n            status = \"\";\r\n            closeCode = '';\r\n            disableMarket = true;\r\n            requestorContactNo = '';\r\n            technicalContactNo = '';\r\n        }\r\n        if(stateObj?.dbData){\r\n            var dbData = stateObj.dbData.dbData;\r\n            var supportList = dbData.supportList[0].supportType;\r\n            var geoList = dbData.geoList;\r\n            var skillList = dbData.skillList;\r\n            for (var i=0; i < statusList.length; i++) {\r\n                \r\n                statusListItem = (\r\n                    <option\r\n                    className=\"bx--select-option\"\r\n                    value={statusList[i]}\r\n                    selected={statusList[i] == status}\r\n                    >\r\n                    {statusList[i]}\r\n                    </option>\r\n                );\r\n                itemsStatusList.push(statusListItem);\r\n            }\r\n            for (var i=0; i < closeCodeList.length; i++) {\r\n                \r\n                closeCodeListItem = (\r\n                    <option\r\n                    className=\"bx--select-option\"\r\n                    value={closeCodeList[i]}\r\n                    selected={closeCodeList[i] == closeCode}\r\n                    >\r\n                    {closeCodeList[i]}\r\n                    </option>\r\n                );\r\n                itemscloseCodeList.push(closeCodeListItem);\r\n            }\r\n            for (var i=0; i < supportList.length; i++) {\r\n                suportItem = (\r\n                    <option\r\n                    className=\"bx--select-option\"\r\n                    value={supportList[i]}\r\n                    selected={supportList[i] == suppotType}\r\n                    >\r\n                    {supportList[i]}\r\n                    </option>\r\n                );\r\n                itemssuport.push(suportItem);\r\n            }\r\n            Object.entries(geoList).map(([key, value]) => {\r\n                  geoItem = <option\r\n                    className=\"bx--select-option\"\r\n                    value={value.geo}\r\n                    selected={value.geo == geoToEdit}\r\n                  >\r\n                    {value.geo}\r\n                  </option>\r\n                itemsGeo.push(geoItem);\r\n              });\r\n\r\n              var skillSet = ''\r\n              var skillCheck = '';\r\n              var editSkill = [];\r\n              var editPlatform = '';\r\n              var itemSkillArr = [];\r\n              var fromDBToEdit1 ;\r\n              var skillsToEdit1\r\n\r\n        if(this.state?.reqData?.reqUpdate){\r\n            disableAll= true;\r\n            //if(not admin) // disable resources\r\n            if(!this.props.location?.state?.admin || requestStatus === \"Pending\"){\r\n                disableResources = true\r\n                 addResourceStyle = {\r\n                    cursor: \"not-allowed\",\r\n                    opacity: \"50%\",\r\n                    hover: \"none\",\r\n                  };\r\n            }\r\n            \r\n        }\r\n            Object.entries(skillList).map(([key, value]) => {\r\n                skillSet = '';\r\n                skillCheck = '';\r\n                editSkill = [];\r\n                editPlatform = '';\r\n                itemSkillArr = [];\r\n                if(this.state?.reqID){ \r\n                    //edit flow\r\n                    fromDBToEdit1 = this.state?.reqData?.dataToUI;\r\n                    skillsToEdit1= fromDBToEdit1.skills;\r\n                    editSkill = skillsToEdit1[value.category];\r\n                    if(editSkill == undefined){\r\n                        editSkill = [0];\r\n                    }\r\n                }\r\n                \r\n                for(var i = 0; i< value.skills.length; i++){\r\n                    var skills = value.skills[i];\r\n                    if(editSkill.includes(skills)){\r\n                        skillSet = <div className=\"checkbox checkboxDisplayStyle\">\r\n                                    <input className=\"checkboxDisplayInline checkboxInput\" disabled={disableAll} type=\"checkbox\" checked name={skills} data-value={value.category} onClick={ (event) => { this.handleCheckbox3({skills}, event) }}  />\r\n                                    <label className=\"bx--checkbox-label-text checkboxClass\">\r\n                                        {skills}\r\n                                    </label>\r\n                                </div> \r\n                    }else{\r\n                        skillSet = <div className=\"checkbox checkboxDisplayStyle\">\r\n                                    <input className=\"checkboxDisplayInline checkboxInput\" disabled={disableAll} type=\"checkbox\" checkboxChecked name={skills} data-value={value.category} onClick={ (event) => { this.handleCheckbox3({skills}, event) }}  />\r\n                                    <label className=\"bx--checkbox-label-text checkboxClass\">\r\n                                        {skills}\r\n                                    </label>\r\n                                </div> \r\n                    }\r\n                    itemSkillArr.push(skillSet)\r\n                }\r\n                itemCategory = <Tab className=\"tabStyle\" href=\"#\" id=\"tab-1\" label={value.category} >\r\n                                    <div className=\"some-content\">\r\n                                        {itemSkillArr}\r\n                                    </div>\r\n                                </Tab>\r\n\r\n                itemsSkill.push(itemCategory);\r\n              });\r\n              Object.entries(geoList).map(([key, value]) => {\r\n                if (this.state.reqGeo !== \"Choose an Option\") {\r\n                  if (value.geo == (this.state.reqGeo || geoToEdit)) {\r\n                    var market = value.market;\r\n                    for (var i = 0; i < market.length; i++) {\r\n                      formOptionMarket = (\r\n                        <option\r\n                          className=\"bx--select-option\"\r\n                          value={market[i]}\r\n                          selected={market[i] ==marketToEdit}\r\n                        >\r\n                          {market[i]}\r\n                        </option>\r\n                      );\r\n                      itemsMarket.push(formOptionMarket);\r\n                    }\r\n                  }\r\n                }\r\n            });\r\n        }\r\n\r\n       \r\n        return (\r\n                <LazyLoad>\r\n\r\n                    <Form onSubmit={this.formSubmit}>\r\n                    <div className=\"bx--grid gridPadd\">\r\n                        {this.state?.reqData?.reqUpdate &&\r\n                            <div className=\"bx--row\">\r\n                                <div className=\"bx--col\">\r\n                                <Select className=\"labelFont\" data-value=\"adminUpdate\" id=\"status\" name=\"status\" labelText=\"Status\" defaultValue={status} onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)}  >\r\n                                    <SelectItem\r\n                                        // selected={impactingEvent == true}\r\n                                        value=\"\"\r\n                                        text=\"Choose an Option\"\r\n                                    />\r\n                                    {itemsStatusList}\r\n                                </Select>\r\n                            </div>\r\n                            <div className=\"bx--col\">\r\n                                <Select className=\"labelFont \"  id=\"closeCode\" name=\"closeCode\" labelText=\"Close Code\" defaultValue={closeCode} onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)}  >\r\n                                    <SelectItem\r\n                                        // selected={impactingEvent == true}\r\n                                        value=\"\"\r\n                                        text=\"Choose an Option\"\r\n                                    />\r\n                                    {itemscloseCodeList}\r\n                                </Select>\r\n                            </div>\r\n                            </div>\r\n                        }\r\n                        <div className=\"bx--row\">\r\n                            <div className=\"bx--col\">\r\n                                <TextInput disabled={disableAll} type=\"text\" className=\"bx--text-input bx--text__input\"  id=\"requesterEmail\" name=\"requesterEmail\" labelText= \"Requester Email\"  placeholder=\"Requester Email\" onBlur={(e) => this.handleInputChange(e)} \r\n                                onChange={(e) => {\r\n                                    const email = e.target.value.trim();\r\n                                    const isValidEmail = validator.isEmail(e.target.value.trim());\r\n                                    const allowedDomains = process.env.REACT_APP_ALLOWED_DOMAINS?.split(\",\") || []\r\n                                    const validDomain = allowedDomains.find(domain => email.toLowerCase().includes(domain + \".\"));\r\n                                    const enterprise = 'Kyndryl';\r\n                                    const validEmail = email.toLowerCase().includes(\".\" + enterprise.toLowerCase() + \".\") || email.toLowerCase().includes(\"@\" + enterprise.toLowerCase() + \".\");\r\n                                    if (!isValidEmail || !validDomain || !validEmail )\r\n                                      e.target.setCustomValidity(\r\n                                        \"Please provide a valid \" + enterprise + \" email id\"\r\n                                      );\r\n                                    else e.target.setCustomValidity(\"\");\r\n                                    this.updateValue(e);\r\n                                  }}\r\n                                defaultValue={reqEMail} required=\"required\"  />\r\n                                {this.state?.inValid_requesterEmail &&\r\n                                    <small className=\"fontRed\">\r\n                                        <b className=\"blgrperrorMsg\">{this.state.inValid_requesterEmail}</b>\r\n                                    </small>\r\n                                }\r\n                            </div>\r\n                            <div className=\"bx--col\">\r\n                                <TextInput  type=\"text\" disabled={disableAll} className=\"bx--text-input bx--text__input\"  id=\"alternateContactEmail\" name=\"alternateContactEmail\" labelText= \"Alternate Contact Email\"  placeholder=\"Alternate Contact Email\" onBlur={(e) => this.handleInputChange(e)} \r\n                                onChange={(e) => {\r\n                                    if(e.target.value.trim() !== ''){\r\n                                        const isValidEmail = validator.isEmail(e.target.value.trim());\r\n                                        if (!isValidEmail){\r\n                                            e.target.setCustomValidity(\r\n                                                \"Please provide a valid email id\"\r\n                                            );\r\n                                        }else {\r\n                                            e.target.setCustomValidity(\"\");\r\n                                        }\r\n                                    }\r\n                                    this.updateValue(e);\r\n                                  }}\r\n                                defaultValue={altEmail} />\r\n                                {this.state?.inValid_alternateContactEmail &&\r\n                                    <small className=\"fontRed\">\r\n                                        <b className=\"blgrperrorMsg\">{this.state.inValid_alternateContactEmail}</b>\r\n                                    </small>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bx--row\">\r\n                            <div className=\"bx--col\">\r\n                                <TextInput disabled={disableAll} type=\"text\" className=\"bx--text-input bx--text__input\"  id=\"requestorContactNo\" name=\"requestorContactNo\" labelText= \"Contact No. of Requestor\"  placeholder=\"Contact No. of Requester\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={requestorContactNo} required=\"required\"  />\r\n                            </div>\r\n                            <div className=\"bx--col\">\r\n                                <TextInput  type=\"text\" disabled={disableAll} className=\"bx--text-input bx--text__input\"  id=\"technicalContactNo\" name=\"technicalContactNo\" labelText= \"Technical Contact\"  placeholder=\"Contact No. of Technical Contact\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={technicalContactNo} required=\"required\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bx--row\">\r\n                            <div className=\"bx--col\">\r\n                                <TextInput type=\"text\" disabled={disableAll} className=\"bx--text-input bx--text__input\"  id=\"account\" name=\"account\" labelText= \"Account\"  placeholder=\"Account\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={account} required=\"required\"  />\r\n                            </div>\r\n                            <div className=\"bx--col\">\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bx--row\">\r\n                            <div className=\"bx--col\">\r\n                                <Select className=\"labelFont \" disabled={disableAll} id=\"reqGeo\" name=\"reqGeo\" labelText=\"Geo\" defaultValue=\"\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} required=\"required\"  >\r\n                                    <SelectItem\r\n                                        // selected={impactingEvent == true}\r\n                                        value=\"\"\r\n                                        text=\"Choose an Option\"\r\n                                    />\r\n                                   {itemsGeo}\r\n                                </Select>\r\n                            </div>\r\n                            <div className=\"bx--col\">\r\n                                <Select className=\"labelFont \" disabled={disableAll} id=\"reqMarket\" name=\"reqMarket\" labelText=\"Market\" defaultValue=\"\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} required={this.state.required} >\r\n                                    <SelectItem\r\n                                        // selected={impactingEvent == true}\r\n                                        value=\"\"\r\n                                        text=\"Choose an Option\"\r\n                                    />\r\n                                    {itemsMarket}\r\n                                </Select>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bx--row\">\r\n                            <div className=\"bx--col\">\r\n                                <Select className=\"labelFont \" disabled={disableAll} id=\"supportType\" name=\"supportType\" labelText=\"Support Type(Channel)\" defaultValue=\"\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} required=\"required\"  >\r\n                                    <SelectItem\r\n                                        // selected={impactingEvent == true}\r\n                                        value=\"\"\r\n                                        text=\"Choose an Option\"\r\n                                    />\r\n                                    {itemssuport}\r\n                                </Select>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bx--row\">\r\n                            <div className=\"bx--col\">\r\n                                {this.state?.maxLengthErr_shortDescription &&\r\n                                    <small className=\"fontRed\">\r\n                                        <b className=\"blgrperrorMsg\">{this.state.maxLengthErr_shortDescription}</b>\r\n                                    </small>\r\n                                }\r\n                                <TextArea className=\"labelFont\" disabled={disableAll} maxlength=\"300\" cols={50} rows={2} labelText={<>Short Description <span className=\"specialCharacterLabel\">(Special characters &lt; &gt; # $ ^ & * \\ = {} ; \\\\ | ? ~ are not allowed)</span></>} placeholder=\"Short Description\" onKeyUp={(e) => this.handleCharacterChange(e)} onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} name=\"shortDescription\" defaultValue={shortDescription} required=\"required\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bx--row\">\r\n                            <div className=\"bx--col\">\r\n                                {this.state?.maxLengthErr_description &&\r\n                                    <small className=\"fontRed\">\r\n                                        <b className=\"blgrperrorMsg\">{this.state.maxLengthErr_description}</b>\r\n                                    </small>\r\n                                }\r\n                                <TextArea className=\"labelFont\" disabled={disableAll} maxlength=\"1500\"  cols={50} rows={5} labelText={<>Description <span className=\"specialCharacterLabel\">(Special characters &lt; &gt; # $ ^ & * \\ = {} ; \\\\ | ? ~ are not allowed)</span></>} placeholder=\"Description\" onKeyUp={(e) => this.handleCharacterChange(e)} onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} name=\"description\" defaultValue={description} required=\"required\" />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"bx--row\">\r\n                            <div className=\"bx--col\">\r\n                                <label for=\"startDate\" className=\"bx--label\">Assignment Start Date </label>\r\n                                {this.state?.reqData?.reqUpdate &&\r\n                                    <div className=\"divDTP\">{startDate}</div>\r\n                                }\r\n                                <Datetime \r\n                                    onBlur={(e) => this.updateValue(e)}\r\n                                    onChange={(e) => this.handleChange2(e)}\r\n                                    name=\"startDate\"\r\n                                    // defaultValue={startDate}\r\n                                    renderInput={ this.renderInput }\r\n                                    placeholder={\"Test\"}\r\n                                    dateFormat=\"DD/MM/YYYY\" \r\n                                    timeFormat={false}\r\n                                    initialValue={initialStartDate}\r\n                                    // disable={disableAll}\r\n                                />\r\n                            </div>\r\n                            <div className=\"bx--col\">\r\n                                <label for=\"startDate\" className=\"bx--label\">Assignment End Date</label>\r\n                                {this.state?.reqData?.reqUpdate &&\r\n                                    <div className=\"divDTP\">{endDate}</div>\r\n                                }\r\n                                <Datetime \r\n                                    onBlur={(e) => this.updateValue(e)}\r\n                                    onChange={(e) => this.handleChange1(e)}\r\n                                    name=\"endDate\"\r\n                                    // defaultValue={endDate}\r\n                                    renderInput={ this.renderInput }\r\n                                    // isValidDate={this.checkIfSelectedDateIsValid}\r\n                                    dateFormat=\"DD/MM/YYYY\" \r\n                                    timeFormat={false}\r\n                                    initialValue={initialEndDate}\r\n                                />\r\n                                {!this.state.isValidEndDate &&\r\n                                    <small className=\"fontRed\">\r\n                                        <b className=\"blgrperrorMsg\">{this.state.inValidDateDescription}</b>\r\n                                    </small>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bx--row\">\r\n                            <div className=\"bx--col\">\r\n                                <div className=\"skillDivMain\">\r\n                                    <div>\r\n                                        <Tabs scrollIntoView={false} className=\"test\">\r\n                                            {itemsSkill}\r\n                                        </Tabs>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bx--row\">\r\n                            <div className=\"bx--col\">\r\n                                <TextInput type=\"number\" disabled={disableAll}  className=\"bx--text-input bx--text__input\"  id=\"estimatedHours\" name=\"estimatedHours\" labelText= \"Estimated Hours\"  placeholder=\"Estimated Hours\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue={estimatedHours} />\r\n                            </div>\r\n                            <div className=\"bx--col\">\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bx--row\">\r\n                            <div className=\"bx--col\">\r\n                                {this.state?.maxLengthErr_comments &&\r\n                                    <small className=\"fontRed\">\r\n                                        <b className=\"blgrperrorMsg\">{this.state.maxLengthErr_comments}</b>\r\n                                    </small>\r\n                                }\r\n                                <TextArea className=\"labelFont\" disabled={disableAll} maxlength=\"300\"  cols={50} rows={5} labelText={<>Comments <span className=\"specialCharacterLabel\">(Special characters &lt; &gt; # $ ^ & * \\ = {} ; \\\\ | ? ~ are not allowed)</span></>} placeholder=\"Comments\" onKeyUp={(e) => this.handleCharacterChange(e)} onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} name=\"comments\" defaultValue={comments} />\r\n                            </div>\r\n                        </div>\r\n                        {this.state?.reqData?.reqUpdate && \r\n                            <div className=\"bx--row\">\r\n                                <div className=\"paramsInlineDiv\">\r\n                                    <h4 className=\"bx--label paramsLabel\">\r\n                                    Resources\r\n                                    </h4>\r\n                                    {!disableResources &&\r\n                                        <AddAlt32\r\n                                            className=\"addParam\"\r\n                                            onClick={this.addParamField}\r\n                                            style ={addResourceStyle}\r\n                                        />\r\n                                    }\r\n                                </div>\r\n                                <div className=\"rulesDivStyle\" style={{ marginTop: \"0\", width: \"100%\" }} onChange={this.handleParam} onClick={this.handleParam} >\r\n                                { this.state?.resourceEmail.map(\r\n                                    (param, i) => param != undefined && (\r\n                                        <div className=\"rulesSubDiv\" key={i}>\r\n                                        <TextInput id={\"inputResource-\" + i}  disabled={disableResources} defaultValue={this.state.resourceEmail[i]} name={i} className=\"bx--text-input bx--text__input\" placeholder=\"Resource Email\" />\r\n                                        </div>\r\n                                    )\r\n                                )}\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                        <div className=\"bx--row\" style={{padding: \"17px 13px\"}}>\r\n                            <div className=\"checkbox checkBoxDes\">\r\n                                <input type=\"checkbox\" name=\"claimTerms\" className=\"checkboxInput checkboxDisplayInline\" onClick={ (event) => { this.handleCheckbox1('claimTerms', event) }} required=\"required\" />\r\n                                <label className=\"bx--checkbox-label-text checkboxClass\">\r\n                                    <strong>Claim Terms:</strong> I confirm that I will make available the need Claim Work Item Access\r\n                                </label>\r\n                            </div>  \r\n                            <div className=\"checkbox checkBoxDes\">\r\n                                <input type=\"checkbox\" name=\"complianceTerms\" style={{width: \"22px\"}} className=\"checkboxInput checkboxDisplayInline\" onClick={ (event) => { this.handleCheckbox2('complianceTerms', event) }} required=\"required\" />\r\n                                <label className=\"bx--checkbox-label-text checkboxClass\">\r\n                                    <strong>Compliance Terms:</strong> I consent to my information being collected and stored for the purpose of identifying community members in support of the TEAMIt Program. The data only retained for as long as the program is active.\r\n                                </label>\r\n                            </div> \r\n                        </div>\r\n                        <div className=\"bx--row\">\r\n                            <div className=\"bx--col\">\r\n                                <Button kind=\"primary\"\r\n                                disabled={this.state.disableBtn_startDate == true || this.state.disableBtn_endDate == true || this.state.disableBtn_shortDescription == true || this.state.disableBtn_description == true || this.state.disableBtn_comments} \r\n                                tabIndex={0} type=\"submit\" className=\"btnMarginExt\" style={{marginbottom: '2%'}}>Submit </Button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bx--row btnMarginExt\">\r\n                            <div className=\"bx--col\">\r\n                                {\r\n                                    this.state['resErrMsg'] && \r\n                                    <small className=\"fontRed\">\r\n                                    <b className=\"blgrperrorMsg\">{this.state.resErrMsg.validateReqSkillMsg}</b>\r\n                                    </small>\r\n                                }\r\n                                {\r\n                                    this.state['resErrMsg'] && \r\n                                    <small className=\"fontRed\">\r\n                                    <b className=\"blgrperrorMsg\">{this.state.resErrMsg.validateReqDateMsg}</b>\r\n                                    </small>\r\n                                }\r\n                                {\r\n                                    this.state['resErrMsg'] && \r\n                                    <small className=\"fontRed\">\r\n                                    <b className=\"blgrperrorMsg\">{this.state.resErrMsg.dateError}</b>\r\n                                    </small>\r\n                                }\r\n                                {\r\n                                    this.state['resErrMsg'] && \r\n                                    <small className=\"fontRed\">\r\n                                    <b className=\"blgrperrorMsg\">{this.state.resErrMsg.resourceError}</b>\r\n                                    </small>\r\n                                }\r\n                                {\r\n                                    this.state['specialCharacterErr'] &&\r\n                                    <small className=\"fontRed\">\r\n                                        <b className=\"errorMsg specialCharErr\">{this.state['specialCharacterErr']}</b>\r\n                                    </small>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    </Form> \r\n                </LazyLoad>\r\n        );\r\n    }\r\n    renderInput( props, openCalendar, closeCalendar ){\r\n        function clear(){\r\n            props.onChange({target: {value: ''}});\r\n        }\r\n        return (\r\n            <div>\r\n                <input {...props} onChange={(e) => this.updateValue1(e)} name=\"endData\" className=\"dtpStyle\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default withRouter(ReqHome);","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ISTogether\\Volunteer\\VolunteerBreadCrump.jsx",["1416","1417","1418","1419","1420","1421","1422","1423"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nclass VolunteerBreadCrump extends React.Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = (\r\n    //         {\r\n    //             data: '',\r\n    //         }\r\n    //     );\r\n    // }\r\n    // componentDidMount() {\r\n    //     const search = this.props.location.search;\r\n    //     const recordId = new URLSearchParams(search).get(\"id\");\r\n    //     this.setState({recordId: recordId})\r\n    //     trackPromise(\r\n    //         fetch(\"/mui/getCIOUserData?id=\"+recordId)\r\n    //         .then((res) => {\r\n    //             return res.json();\r\n    //         })\r\n    //         .then((cioUserData) => {\r\n    //             var dateFormat = cioUserData.cioUserData.weekDayName;\r\n    //             this.setState({ date:dateFormat });\r\n    //         })\r\n    //     );\r\n    // }\r\n  render() {\r\n    //   var date = this.state.date;\r\n    return (\r\n        <div className=\"breadCrumpDiv headerDiv sectionMargin  mainMargin\">\r\n            {/* <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/home\">Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem isCurrentPage>\r\n                    <Link to=\"/mui/dailyReporting\">Report</Link>\r\n                </BreadcrumbItem>\r\n            </Breadcrumb> */}\r\n            <h2 className=\"headerText\">Volunteer</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(VolunteerBreadCrump);","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ISTogether\\Volunteer\\Volunteer.jsx",["1424","1425","1426","1427","1428","1429","1430","1431","1432","1433","1434","1435","1436","1437","1438","1439","1440","1441","1442","1443","1444","1445","1446","1447","1448","1449","1450","1451","1452","1453","1454","1455","1456","1457","1458","1459","1460","1461","1462","1463","1464","1465","1466","1467","1468","1469","1470","1471","1472","1473","1474","1475","1476","1477","1478","1479","1480","1481"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport {  Button, Tabs, Tab, ListItem, Form, TextInput, TextArea, Select, SelectItem  } from 'carbon-components-react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { TrashCan32 } from \"@carbon/icons-react\";\r\nimport Datetime from 'react-datetime';\r\nimport \"react-datetime/css/react-datetime.css\";\r\nimport { validate } from '../../../validation/validate.js';\r\n\r\n// import DRForm from './DRForm';\r\nimport LazyLoad from \"react-lazyload\";\r\nclass VolunteerHome extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = (\r\n            {\r\n                disableMarket: true,\r\n                required: \"required\",\r\n                disableMarket1: true,\r\n                required1: \"required\",\r\n                geoMarket: [{addGeo: \"\", addMarket: \"\"}],\r\n                supportGlobally: false,\r\n                loginToClientSyatem: false,\r\n                provideConsultingSupport: false,\r\n            }\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        trackPromise(\r\n            fetch(\"/mui/teamITData\")\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((dbData) => {\r\n                // collect geo List \r\n                let geoListObj =  dbData.dbData.geoList;\r\n\r\n                const geoList = Object.entries(geoListObj).map(([key, value]) => {\r\n                        return value.geo;\r\n                })\r\n                const geoMarketMapping = {};\r\n                for(let value of  Object.values(geoListObj)) {\r\n                geoMarketMapping[value.geo] = value.market;\r\n                }\r\n                // Prepare data for initial geo market Selects(dropdowns)\r\n                let geoMarketSelectList = {0: {geo: \"\", market:\"\", marketOptions: [], disableAddMarket:true}};\r\n                this.setState({ dbData, geoList, geoMarketMapping, geoMarketSelectList});\r\n \r\n             })\r\n        );\r\n    }\r\n\r\n\r\n        //modified handle change\r\n        handleChangeNew(i, e) {\r\n            const { name, value } = e.target;\r\n            const [selectOptionName, indexStr] = name.split('_');\r\n            const index = parseInt(indexStr);\r\n            let updatedGeoMarketObj = {}\r\n            let marketOptions = [];\r\n            if(selectOptionName === \"addGeo\"){\r\n                const currentGeoMarketObj = this.state.geoMarketSelectList[index];\r\n                 marketOptions = value ? this.state.geoMarketMapping[value]: [];\r\n                const disableAddMarket = value? false : true;\r\n                updatedGeoMarketObj = {...currentGeoMarketObj, geo:value, market: \"\", marketOptions, disableAddMarket }\r\n            }else if(selectOptionName === \"addMarket\"){\r\n                const currentGeoMarketObj = this.state.geoMarketSelectList[index];\r\n                updatedGeoMarketObj = {...currentGeoMarketObj, market:value}\r\n            }\r\n            const updatedGeoMarketList = {...this.state.geoMarketSelectList , [index]: updatedGeoMarketObj}\r\n            this.setState({geoMarketSelectList: updatedGeoMarketList, currentSelectGeoIndex:index })\r\n\r\n   }\r\n\r\n   onChangeAddGeo = (e) => {\r\n    const {name, value} = e.target;\r\n    const [selectOptionName, indexStr] = name.split('_');\r\n            const index = parseInt(indexStr);\r\n            let updatedGeoMarketObj = {}\r\n            if(selectOptionName === \"addGeo\"){\r\n                const currentGeoMarketObj = this.state.geoMarketSelectList[index];\r\n                // const marketOptions = this.state.geoMarketMapping[value];\r\n                const disableAddMarket = value ? false : true;\r\n                updatedGeoMarketObj = {...currentGeoMarketObj,  disableAddMarket }\r\n            }\r\n\r\n            const updatedGeoMarketList = {...this.state.geoMarketSelectList , [index]: updatedGeoMarketObj}\r\n            this.setState({geoMarketSelectList: updatedGeoMarketList})\r\n\r\n};\r\n\r\n     createSelectElement() {\r\n         if(this.state.geoMarketSelectList){\r\n\r\n            let geoMarketList =  this.state.geoMarketSelectList;\r\n            const geoMarketListKeys = Object.keys(geoMarketList);\r\n\r\n            let  formOptionGeo = '';\r\n            // let disableAddMarket = true;\r\n            const geoItems1 = [];\r\n            for(let geo of this.state.geoList){\r\n                formOptionGeo = (\r\n                    <option\r\n                        className=\"bx--select-option\"\r\n                        value={geo}\r\n                    //   selected={market[i] == accountsData.market}\r\n                    >\r\n                        {geo}\r\n                    </option>\r\n                    );\r\n                    geoItems1.push(formOptionGeo);\r\n            }\r\n            return geoMarketListKeys.map((el, i) => {\r\n                const {marketOptions, geo, market, disableAddMarket} = this.state.geoMarketSelectList[el]\r\n                let  formOptionMarket = '';\r\n                const matketItems1 = [];\r\n                for(let market of marketOptions){\r\n                    formOptionMarket = (\r\n                        <option\r\n                            className=\"bx--select-option\"\r\n                            value={market}\r\n                        //   selected={market[i] == accountsData.market}\r\n                        >\r\n                            {market}\r\n                        </option>\r\n                        );\r\n                        matketItems1.push(formOptionMarket);\r\n                }\r\n                return( <div key={i} className=\"addSelectInline\">\r\n                        <div className=\"bx--col\">\r\n                            <Select className=\"labelFont \" id= {\"addGeo_\"+i} name={\"addGeo_\"+i} labelText=\"Geo\" defaultValue={geo || ''} onBlur={this.handleChangeNew.bind(this, i)} onChange={(e) => this.onChangeAddGeo(e)} required=\"required\" >\r\n                                <SelectItem\r\n                                    // selected={impactingEvent == true}\r\n                                    value=\"\"\r\n                                    text=\"Choose an Option\"\r\n                                />\r\n                                {geoItems1}\r\n                            </Select>\r\n                        </div>\r\n                        <div className=\"bx--col\">\r\n                                        <Select className=\"labelFont \"disabled={disableAddMarket} id={\"addMarket_\"+i} name={\"addMarket_\"+i} labelText=\"Market\" defaultValue={market || ''} onBlur={this.handleChangeNew.bind(this, i)} required={this.state.required1} >\r\n                                            <SelectItem\r\n                                                // selected={impactingEvent == true}\r\n                                                value=\"\"\r\n                                                text=\"Choose an Option\"\r\n                                            />\r\n                                            {matketItems1}\r\n                                        </Select>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            } )\r\n        }\r\n    }\r\n    addClick(){\r\n        let geoMarketList =  this.state.geoMarketSelectList;\r\n        const indexGeoMarket = Object.keys(geoMarketList).length;\r\n        const updatedGeoMarketList = {...geoMarketList, [indexGeoMarket]: {geo: \"\", market: \"\", marketOptions: [], disableAddMarket: true}};\r\n        this.setState({geoMarketSelectList: updatedGeoMarketList})\r\n    }\r\n\r\n \r\n   removeClick(i){\r\n      let geoMarket = [...this.state.geoMarket];\r\n      geoMarket.splice(i, 1);\r\n      this.setState({ geoMarket });\r\n   }\r\n    handleChange1 = (e) => {\r\n        this.setState({ endDate: e._d });\r\n    }\r\n    handleChange2 = (e) => {\r\n        this.setState({ startDate: e._d });\r\n    }\r\n    handleInputChange = (e) => {\r\n        if ((e.target.value && e.target.value.includes(\"script\") && e.target.value.includes(\"<\")) || e.target.value.includes(\">\")){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n        if(e.target.name == \"serviceLine\"){\r\n            var targetValue = e.target.value;\r\n            var updatedTargetValue = targetValue+\"-service\";\r\n            this.setState({\r\n                [e.target.name]: updatedTargetValue,\r\n            });\r\n        }\r\n        if(e.target.name == \"volunteerEmail\" || e.target.name == \"managerEmail\"){\r\n            if (e.target.value && e.target.value.includes(\"@\")){\r\n                this.setState({\r\n                    [e.target.name]: e.target.value,\r\n                });\r\n                this.setState({\r\n                    [\"inValid_\" + e.target.name]: \"\",\r\n                });\r\n            }else{\r\n                this.setState({\r\n                    [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n                });\r\n                return;\r\n            }\r\n        }\r\n        if(e.target.name == \"primaryPhone\" || e.target.name == \"altPhone\"){\r\n            var format = /[!@#$%^&*_\\=\\[\\]{};':\"\\\\|,.<>\\/?]+/;\r\n            if(format.test(e.target.value)){\r\n                this.setState({\r\n                    [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n                });\r\n                return;\r\n            }else{\r\n                this.setState({\r\n                    [e.target.name]: e.target.value,\r\n                });\r\n                this.setState({\r\n                    [\"inValid_\" + e.target.name]: \"\",\r\n                });\r\n            }\r\n        }\r\n        \r\n        \r\n    };\r\n    updateValue = (e) => {\r\n        if(e.target.name == \"reqGeo\" && e.target.value != \"\"){\r\n            this.setState({disableMarket: false})\r\n            this.setState({required: \"required\"})\r\n        }\r\n        if(e.target.name == \"reqGeo\" && e.target.value == \"\"){\r\n            this.setState({disableMarket: true})\r\n            this.setState({required: \"\"})\r\n        }\r\n        if(e.target.name == \"addGeo\" && e.target.value != \"\"){\r\n            this.setState({disableMarket1: false})\r\n            this.setState({required1: \"required\"})\r\n        }\r\n        if(e.target.name == \"addGeo\" && e.target.value == \"\"){\r\n            this.setState({disableMarket1: true})\r\n            this.setState({required1: \"\"})\r\n        }\r\n        \r\n        // this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n    updateValue1 = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n    handleCheckbox1(name, event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.checked,\r\n        });\r\n    };\r\n    handleCheckbox3(name, event) {\r\n        if(event.target.checked == true) {\r\n            this.setState({\r\n                [event.target.name]: event.target.getAttribute(\"data-value\"),\r\n            });\r\n        }else{\r\n            this.setState({[event.target.name]: \"\"})\r\n        }\r\n    };\r\n    handleCheckbox2(name, event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.checked,\r\n        });\r\n    };\r\n    handleCheckbox5(name, event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.checked,\r\n        });\r\n    };\r\n    handleCheckbox6(name, event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.checked,\r\n        });\r\n    };\r\n    handleCheckbox7(name, event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.checked,\r\n        });\r\n    };\r\n    handleCharacterChange = (e) => {\r\n        if(e.target.name == \"comments\" ){\r\n            if(e.target.value.length == 300){\r\n                this.setState({[\"disableBtn_\"+ e.target.name]: true})\r\n                this.setState({[\"maxLengthErr_\" + e.target.name]: \"You have reached the maximum limit of characters allowed\"})\r\n            }else{\r\n                this.setState({[\"disableBtn_\"+ e.target.name]: false})\r\n                this.setState({[\"maxLengthErr_\" + e.target.name]: \"\"})\r\n            }\r\n        }\r\n        if(e.target.name == \"shortDescription\"){\r\n            if(e.target.value.length == 300){\r\n                this.setState({[\"disableBtn_\"+ e.target.name]: true})\r\n                this.setState({[\"maxLengthErr_\" + e.target.name]: \"You have reached the maximum limit of characters allowed\"})\r\n            }else{\r\n                this.setState({[\"disableBtn_\"+ e.target.name]: false})\r\n                this.setState({[\"maxLengthErr_\" + e.target.name]: \"\"})\r\n            }\r\n        }\r\n        if(e.target.name == \"description\"){\r\n            if(e.target.value.length == 1500){\r\n                this.setState({[\"disableBtn_\"+ e.target.name]: true})\r\n                this.setState({[\"maxLengthErr_\" + e.target.name]: \"You have reached the maximum limit of characters allowed\"})\r\n            }else{\r\n                this.setState({[\"disableBtn_\"+ e.target.name]: false})\r\n                this.setState({[\"maxLengthErr_\" + e.target.name]: \"\"})\r\n            }\r\n        }\r\n    }\r\n    formSubmit= (e) => {\r\n        e.preventDefault();\r\n        var skills = {};\r\n            var splitServiceLine = ''\r\n            var dataToSent = {};\r\n            var supportLocation = [];\r\n            let [skillArr1, skillArr2,skillArr3, skillArr4,skillArr5, skillArr6, skillArr7, skillArr8, skillArr9, skillArr10 ] = [[], [], [], [], [], [], [], [], [], []];\r\n            const selectedGeoMarket = this.state.geoMarketSelectList;\r\n            let count =0;\r\n            for (let geoMarket in selectedGeoMarket){\r\n                count = count +1;\r\n            }\r\n            for (let i=0; i <count ;i++) {\r\n                let geoMarketObj = {}\r\n                geoMarketObj[\"geo\"] = selectedGeoMarket[i].geo;\r\n                geoMarketObj[\"market\"] = selectedGeoMarket[i].market;\r\n                supportLocation.push(geoMarketObj);\r\n            }\r\n            dataToSent[supportLocation] = supportLocation;\r\n            for (var key in this.state) {\r\n                if (this.state.hasOwnProperty(key)) {\r\n                    if(key == \"serviceLine\"){\r\n                        splitServiceLine = this.state[key].split(\"-\");\r\n                        var serviceLine = splitServiceLine[0]\r\n                        dataToSent[\"serviceLine\"] = splitServiceLine[0]\r\n                    }\r\n                    if(this.state[key] == \"Platform\"){\r\n                        skillArr1.push(key);\r\n                        skills[this.state[key]] = skillArr1\r\n                    }\r\n                    if(this.state[key] == \"Database\"){\r\n                        skillArr2.push(key);\r\n                        skills[this.state[key]] = skillArr2\r\n                    }\r\n                    if(this.state[key] == \"Middleware\"){\r\n                        skillArr3.push(key);\r\n                        skills[this.state[key]] = skillArr3\r\n                    }\r\n                    if(this.state[key] == \"SAP ERP\"){\r\n                        skillArr4.push(key);\r\n                        skills[this.state[key]] = skillArr4\r\n                    }\r\n                    if(this.state[key] == \"Network\"){\r\n                        skillArr5.push(key);\r\n                        skills[this.state[key]] = skillArr5\r\n                    }\r\n                    if(this.state[key] == \"Resiliency\"){\r\n                        skillArr6.push(key);\r\n                        skills[this.state[key]] = skillArr6\r\n                    }\r\n                    if(this.state[key] == \"Storage\"){\r\n                        skillArr7.push(key);\r\n                        skills[this.state[key]] = skillArr7\r\n                    }\r\n                    if(this.state[key] == \"Mainframe\"){\r\n                        skillArr8.push(key);\r\n                        skills[this.state[key]] = skillArr8\r\n                    }\r\n                    if(this.state[key] == \"WMS & Deskside (DWS)\"){\r\n                        skillArr9.push(key);\r\n                        skills[this.state[key]] = skillArr9\r\n                    }\r\n                    if(this.state[key] == \"Service Desk(DWS)\"){\r\n                        skillArr10.push(key);\r\n                        skills[this.state[key]] = skillArr10\r\n                    }\r\n                }\r\n            }\r\n            var dataToSave = {\r\n                skills: skills,\r\n                email: this.state.volunteerEmail,\r\n                supportLocation: supportLocation,\r\n                managerEmail: this.state.managerEmail,\r\n                phone: this.state.primaryPhone ,\r\n                alternatePhone: this.state.altPhone,\r\n                geo: this.state.reqGeo,\r\n                market: this.state.reqMarket,\r\n                country: this.state.country,\r\n                timezone: this.state.timezone,\r\n                supportGlobal: this.state.supportGlobally,\r\n                loginToClientSystem: this.state.loginToClientSyatem,\r\n                consultingSupport: this.state.provideConsultingSupport,\r\n                gsePractice: this.state.gsePractice,\r\n                serviceLine: this.state.serviceLine,  \r\n                complianceTerms: this.state.complianceTerms\r\n            }\r\n            dataToSent[\"skills\"] = skills;\r\n         // SpecialCharacter validation\r\n         var validateFields = validate(dataToSave);\r\n         if(validateFields.length > 0){\r\n             var message = \"\";\r\n             for(var i =0; i<validateFields.length; i++){\r\n                 var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n                 if(element){\r\n                    message += element.title + \", \";\r\n                }else{\r\n                    message += validateFields[i] + \", \"\r\n                }\r\n             }\r\n             this.setState({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n         }else{\r\n            trackPromise(\r\n                    fetch('/mui/saveTeamITVolunteer' , {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        'Content-type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(dataToSave)\r\n                })\r\n                .then((result) => {\r\n                    if (result.status === 404 || result.status === 400 || result.status === 500)  {\r\n                        result.json().then((object)=> {\r\n                            this.setState({resErrMsg: object.fetchErrorfromRequester});\r\n                        })\r\n                    } else if (result.status === 409) {\r\n                        result.json().then((object)=> {\r\n                            this.setState({resErrMsg: object.fetchErrorfromRequester});\r\n                        })\r\n                    } else if(result.status == 200){\r\n                        this.props.history.push(\"/mui/thankyou\");\r\n                    }\r\n            })\r\n                .catch(err => { \r\n                this.setState({errorMessage: err.message});\r\n                })\r\n            )\r\n        }\r\n    }\r\n    render() {\r\n        var stateObj = this.state;\r\n        var suportItem = ''\r\n        const itemssuport = [];\r\n        var gsePracticeItem = ''\r\n        const itemsGsePractice = [];\r\n        var serviceLineItem = ''\r\n        const itemsServiceLine = [];\r\n        var timeZoneItem = ''\r\n        const itemsTimeZone = [];\r\n        var countryItem = '';\r\n        const itemsCountry = [];\r\n        var geoItem = ''\r\n        const itemsGeo = [];\r\n        const itemsMarket = [];\r\n        var formOptionMarket = \"\";\r\n        var disableMarket = this.state.disableMarket;\r\n        var itemsSkill = [];\r\n        var itemCategory = \"\";\r\n        if(stateObj?.dbData){\r\n            var dbData = stateObj.dbData.dbData;\r\n            var supportList = dbData.supportList[0].supportType;\r\n            var serviceLineList = dbData.serviceLineList[0].serviceLine;\r\n            var gsePracticeList = dbData.gsePracticeList[0].gsePractice;\r\n            var timezoneList = dbData.timezoneList;\r\n            var countryList = dbData.countryList;\r\n            var geoList = dbData.geoList;\r\n            var skillList = dbData.skillList;\r\n            for (var i=0; i < supportList.length; i++) {\r\n                suportItem = (\r\n                    <option\r\n                    className=\"bx--select-option\"\r\n                    value={supportList[i]}\r\n                    // selected={value.name == workspaceNameFromDB}\r\n                    >\r\n                    {supportList[i]}\r\n                    </option>\r\n                );\r\n                itemssuport.push(suportItem);\r\n            }\r\n            for (var i=0; i < serviceLineList.length; i++) {\r\n                serviceLineItem = (\r\n                    <option\r\n                    className=\"bx--select-option\"\r\n                    value={serviceLineList[i]}\r\n                    // selected={value.name == workspaceNameFromDB}\r\n                    >\r\n                    {serviceLineList[i]}\r\n                    </option>\r\n                );\r\n                itemsServiceLine.push(serviceLineItem);\r\n            }\r\n            for (var i=0; i < gsePracticeList.length; i++) {\r\n                gsePracticeItem = (\r\n                    <option\r\n                    className=\"bx--select-option\"\r\n                    value={gsePracticeList[i]}\r\n                    // selected={value.name == workspaceNameFromDB}\r\n                    >\r\n                    {gsePracticeList[i]}\r\n                    </option>\r\n                );\r\n                itemsGsePractice.push(gsePracticeItem);\r\n            }\r\n            for (var i=0; i < timezoneList.length; i++) {\r\n                timeZoneItem = (\r\n                    <option\r\n                    className=\"bx--select-option\"\r\n                    value={timezoneList[i].abbr}\r\n                    // selected={value.name == workspaceNameFromDB}\r\n                    >\r\n                    {timezoneList[i].value}\r\n                    </option>\r\n                );\r\n                itemsTimeZone.push(timeZoneItem);\r\n            }\r\n            for (var i=0; i < countryList.length; i++) {\r\n                countryItem = (\r\n                    <option\r\n                    className=\"bx--select-option\"\r\n                    value={countryList[i].desc}\r\n                    // selected={value.name == workspaceNameFromDB}\r\n                    >\r\n                    {countryList[i].desc}\r\n                    </option>\r\n                );\r\n                itemsCountry.push(countryItem);\r\n            }\r\n            Object.entries(geoList).map(([key, value]) => {\r\n                  geoItem = <option\r\n                    className=\"bx--select-option\"\r\n                    value={value.geo}\r\n                    // selected={value.geo == accountsData.geo}\r\n                  >\r\n                    {value.geo}\r\n                  </option>\r\n                itemsGeo.push(geoItem);\r\n            });\r\n            Object.entries(skillList).map(([key, value]) => {\r\n                var skillSet = ''\r\n                var skillCheck = '';\r\n                const itemSkillArr = []\r\n                for(var i = 0; i< value.skills.length; i++){\r\n                    var skills = value.skills[i];\r\n                    skillSet = <div className=\"checkbox checkboxDisplayStyle\">\r\n                                    <input className=\"checkboxDisplayInline checkboxInput\" type=\"checkbox\" name={skills} data-value={value.category} onClick={ (event) => { this.handleCheckbox3({skills}, event) }} />\r\n                                    <label className=\"bx--checkbox-label-text checkboxClass\">\r\n                                        {skills}\r\n                                    </label>\r\n                                </div> \r\n                    itemSkillArr.push(skillSet)\r\n                }\r\n                itemCategory = <Tab className=\"tabStyle\" href=\"#\" id=\"tab-1\" label={value.category} >\r\n                                    <div className=\"some-content\">\r\n                                        {itemSkillArr}\r\n                                    </div>\r\n                                </Tab>\r\n\r\n                itemsSkill.push(itemCategory);\r\n              });\r\n              Object.entries(geoList).map(([key, value]) => {\r\n                if (this.state.reqGeo !== \"Choose an Option\") {\r\n                  if (value.geo == this.state.reqGeo) {\r\n                    var market = value.market;\r\n                    for (var i = 0; i < market.length; i++) {\r\n                      formOptionMarket = (\r\n                        <option\r\n                          className=\"bx--select-option\"\r\n                          value={market[i]}\r\n                        //   selected={market[i] == accountsData.market}\r\n                        >\r\n                          {market[i]}\r\n                        </option>\r\n                      );\r\n                      itemsMarket.push(formOptionMarket);\r\n                    }\r\n                  }\r\n                }\r\n            });\r\n        }\r\n        return (\r\n                <LazyLoad>\r\n\r\n                    <Form onSubmit={this.formSubmit}>\r\n                    <div className=\"bx--grid gridPadd\">\r\n                        <div className=\"bx--row\">\r\n                            <div className=\"bx--col\">\r\n                                <TextInput type=\"text\" className=\"bx--text-input bx--text__input\"  id=\"volunteerEmail\" name=\"volunteerEmail\" labelText= \"Volunteer Email\"  placeholder=\"Volunteer Email\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue='' required=\"required\" />\r\n                                {this.state?.inValid_volunteerEmail &&\r\n                                    <small className=\"fontRed\">\r\n                                        <b className=\"blgrperrorMsg\">{this.state.inValid_volunteerEmail}</b>\r\n                                    </small>\r\n                                }\r\n                            </div>\r\n                            <div className=\"bx--col\">\r\n                                <TextInput type=\"text\" className=\"bx--text-input bx--text__input\"  id=\"managerEmail\" name=\"managerEmail\" labelText= \"Manager Email\"  placeholder=\"Manager Email\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue='' />\r\n                                {this.state?.inValid_managerEmail &&\r\n                                    <small className=\"fontRed\">\r\n                                        <b className=\"blgrperrorMsg\">{this.state.inValid_managerEmail}</b>\r\n                                    </small>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bx--row\">\r\n                            <div className=\"bx--col\">\r\n                                <TextInput type=\"text\" className=\"bx--text-input bx--text__input\"  id=\"primaryPhone\" name=\"primaryPhone\" labelText= \"Primary Phone\"  placeholder=\"Primary Phone\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue='' required=\"required\" />\r\n                                {\r\n                                    this.state['inValid_primaryPhone'] &&\r\n                                    <small className=\"fontRed\">\r\n                                        <b className=\"blgrperrorMsg\">{this.state['inValid_primaryPhone']}</b>\r\n                                    </small>\r\n                                }\r\n                            </div>\r\n                            <div className=\"bx--col\">\r\n                                <TextInput type=\"text\" className=\"bx--text-input bx--text__input\"  id=\"altPhone\" name=\"altPhone\" labelText= \"Alternate Phone\"  placeholder=\"Alternate Phone\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue=''  />\r\n                                {\r\n                                    this.state['inValid_altPhone'] &&\r\n                                    <small className=\"fontRed\">\r\n                                        <b className=\"blgrperrorMsg\">{this.state['inValid_altPhone']}</b>\r\n                                    </small>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bx--row\">\r\n                            <div className=\"bx--col\">\r\n                                <Select className=\"labelFont \" id=\"reqGeo\" name=\"reqGeo\" labelText=\"Geo\" defaultValue=\"\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} required=\"required\" >\r\n                                    <SelectItem\r\n                                        // selected={impactingEvent == true}\r\n                                        value=\"\"\r\n                                        text=\"Choose an Option\"\r\n                                    />\r\n                                   {itemsGeo}\r\n                                </Select>\r\n                            </div>\r\n                            <div className=\"bx--col\">\r\n                                <Select className=\"labelFont \" disabled={this.state.disableMarket} id=\"reqMarket\" name=\"reqMarket\" labelText=\"Market\" defaultValue=\"\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} required={this.state.required} >\r\n                                    <SelectItem\r\n                                        // selected={impactingEvent == true}\r\n                                        value=\"\"\r\n                                        text=\"Choose an Option\"\r\n                                    />\r\n                                    {itemsMarket}\r\n                                </Select>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bx--row\">\r\n                            <div className=\"bx--col\">\r\n                                <Select className=\"labelFont \" id=\"country\" name=\"country\" labelText=\"Country\" defaultValue=\"\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} required=\"required\" >\r\n                                    <SelectItem\r\n                                        // selected={impactingEvent == true}\r\n                                        value=\"\"\r\n                                        text=\"Choose an Option\"\r\n                                    />\r\n                                   {itemsCountry}\r\n                                </Select>\r\n                            </div>\r\n                            <div className=\"bx--col\">\r\n                                <Select className=\"labelFont \" id=\"timezone\" name=\"timezone\" labelText=\"Timezone\" defaultValue=\"\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} required=\"required\" >\r\n                                    <SelectItem\r\n                                        // selected={impactingEvent == true}\r\n                                        value=\"\"\r\n                                        text=\"Choose an Option\"\r\n                                    />\r\n                                    {itemsTimeZone}\r\n                                </Select>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bx--row\" style={{padding: \"17px 13px\"}}>\r\n                            <div className=\"checkbox checkBoxDes\">\r\n                                <input type=\"checkbox\" name=\"supportGlobally\" className=\"checkboxInput checkboxDisplayInline\" onClick={ (event) => { this.handleCheckbox7('supportGlobally', event) }} />\r\n                                <label className=\"bx--checkbox-label-text checkboxClass\">\r\n                                    Willing to support globally?\r\n                                </label>\r\n                            </div>  \r\n                        </div>\r\n                        <div className=\"bx--row\">\r\n                            {/* <div className=\"bx--col\"> */}\r\n                                <div className=\"addUserDivMain\">\r\n                                    {/* <div> */}\r\n                                    {this.createSelectElement()}                                         <a className=\"linkStyle\"  value='add more' onClick={this.addClick.bind(this)}>Add</a>\r\n                                </div>\r\n                                {/* </div> */}\r\n                            {/* </div> */}\r\n                        </div>\r\n                        <div className=\"bx--row\">\r\n                            <div className=\"bx--col\">\r\n                                <Select className=\"labelFont \" id=\"gsePractice\" name=\"gsePractice\" labelText=\"GSE Practice\" defaultValue=\"\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} required=\"required\" >\r\n                                    <SelectItem\r\n                                        // selected={impactingEvent == true}\r\n                                        value=\"\"\r\n                                        text=\"Choose an Option\"\r\n                                    />\r\n                                   {itemsGsePractice}\r\n                                </Select>\r\n                            </div>\r\n                            <div className=\"bx--col\">\r\n                                <Select className=\"labelFont \" id=\"serviceLine\" name=\"serviceLine\" labelText=\"Service Line\" defaultValue=\"\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} required=\"required\" >\r\n                                    <SelectItem\r\n                                        // selected={impactingEvent == true}\r\n                                        value=\"\"\r\n                                        text=\"Choose an Option\"\r\n                                    />\r\n                                    {itemsServiceLine}\r\n                                </Select>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bx--row\" style={{padding: \"17px 13px\"}}>\r\n                            <div className=\"bx--col\">\r\n                                <div className=\"checkbox checkBoxDes1\">\r\n                                    <input type=\"checkbox\" name=\"loginToClientSyatem\" className=\"checkboxInput checkboxDisplayInline\" onClick={ (event) => { this.handleCheckbox5('loginToClientSyatem', event) }}  />\r\n                                    <label className=\"bx--checkbox-label-text checkboxClass\">\r\n                                        Willing to Login into client system?\r\n                                    </label>\r\n                                </div>  \r\n                                <div className=\"checkbox checkBoxDes1\">\r\n                                    <input type=\"checkbox\" name=\"provideConsultingSupport\" className=\"checkboxInput checkboxDisplayInline\" onClick={ (event) => { this.handleCheckbox6('provideConsultingSupport', event) }}  />\r\n                                    <label className=\"bx--checkbox-label-text checkboxClass\">\r\n                                        Provide consulting support?\r\n                                    </label>\r\n                                </div> \r\n                            </div>\r\n                            \r\n                        </div>\r\n                        <div className=\"bx--row\">\r\n                            <div className=\"bx--col\">\r\n                                <div className=\"skillDivMain\">\r\n                                    <div>\r\n                                        <Tabs scrollIntoView={false} className=\"test\">\r\n                                            {itemsSkill}\r\n                                        </Tabs>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bx--row\" style={{padding: \"17px 13px\"}}>\r\n                            <div className=\"checkbox checkBoxDes\">\r\n                                <input type=\"checkbox\" name=\"complianceTerms\" style={{width: \"22px\"}} className=\"checkboxInput checkboxDisplayInline\" onClick={ (event) => { this.handleCheckbox2('complianceTerms', event) }} required=\"required\" />\r\n                                <label className=\"bx--checkbox-label-text checkboxClass\">\r\n                                    <strong>Compliance Terms:</strong> I consent to my information being collected and stored for the purpose of identifying community members in support of the TEAMIt Program. The data only retained for as long as the program is active.\r\n                                </label>\r\n                            </div> \r\n                        </div>\r\n                        <div className=\"bx--row\">\r\n                            <div className=\"bx--col\">\r\n                                <Button kind=\"primary\"\r\n                                disabled={this.state.disableBtn_shortDescription == true || this.state.disableBtn_description == true || this.state.disableBtn_comments || this.state['inValid_primaryPhone'] || this.state['inValid_altPhone'] } \r\n                                tabIndex={0} type=\"submit\" className=\"btnMarginExt\" style={{marginbottom: '2%'}}>Submit </Button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bx--row btnMarginExt\">\r\n                            <div className=\"bx--col\">\r\n                                {\r\n                                    this.state['resErrMsg'] && \r\n                                    <small className=\"fontRed\">\r\n                                    <b className=\"blgrperrorMsg\">{this.state.resErrMsg.validateVolunteerSkillMsg}</b>\r\n                                    </small>\r\n                                }\r\n                                {\r\n                                    this.state['resErrMsg'] && \r\n                                    <small className=\"fontRed\">\r\n                                    <b className=\"blgrperrorMsg\">{this.state.resErrMsg.emailCheckMsg}</b>\r\n                                    </small>\r\n                                }\r\n                                {\r\n                                    this.state['resErrMsg'] && \r\n                                    <small className=\"fontRed\">\r\n                                    <b className=\"blgrperrorMsg\">{this.state.resErrMsg.dateError}</b>\r\n                                    </small>\r\n                                }\r\n                                {\r\n                                    this.state['specialCharacterErr'] &&\r\n                                    <small className=\"fontRed\">\r\n                                        <b className=\"errorMsg specialCharErr\">{this.state['specialCharacterErr']}</b>\r\n                                    </small>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    </Form> \r\n                </LazyLoad>\r\n        );\r\n    }\r\n    renderInput( props, openCalendar, closeCalendar ){\r\n        function clear(){\r\n            props.onChange({target: {value: ''}});\r\n        }\r\n        return (\r\n            <div>\r\n                <input {...props} onChange={(e) => this.updateValue1(e)} name=\"endData\" className=\"dtpStyle\" required=\"required\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default withRouter(VolunteerHome);","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ISTogether\\Admin\\AdminBreadCrump.jsx",["1482","1483","1484","1485","1486","1487","1488","1489"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nclass AdminBreadCrump extends React.Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = (\r\n    //         {\r\n    //             data: '',\r\n    //         }\r\n    //     );\r\n    // }\r\n    // componentDidMount() {\r\n    //     const search = this.props.location.search;\r\n    //     const recordId = new URLSearchParams(search).get(\"id\");\r\n    //     this.setState({recordId: recordId})\r\n    //     trackPromise(\r\n    //         fetch(\"/mui/getCIOUserData?id=\"+recordId)\r\n    //         .then((res) => {\r\n    //             return res.json();\r\n    //         })\r\n    //         .then((cioUserData) => {\r\n    //             var dateFormat = cioUserData.cioUserData.weekDayName;\r\n    //             this.setState({ date:dateFormat });\r\n    //         })\r\n    //     );\r\n    // }\r\n  render() {\r\n    //   var date = this.state.date;\r\n    return (\r\n        <div className=\"breadCrumpDiv headerDiv sectionMargin  mainMargin\">\r\n            {/* <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/home\">Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem isCurrentPage>\r\n                    <Link to=\"/mui/dailyReporting\">Report</Link>\r\n                </BreadcrumbItem>\r\n            </Breadcrumb> */}\r\n            <h2 className=\"headerText\">Admin</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(AdminBreadCrump);","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\forms\\AAForm\\AdditionalProp.jsx",[],"C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ISTogether\\Admin\\Admin.jsx",["1490","1491","1492","1493"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { Table, TableBody, Select,SelectItem, TableHead, TableHeader, TableRow } from \"carbon-components-react\";\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport \"react-datetime/css/react-datetime.css\";\r\nimport LazyLoad from \"react-lazyload\";\r\nclass AdminLanding extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { reqData: [] };\r\n      }\r\n      componentDidMount() {\r\n        trackPromise(\r\n            fetch(\"/mui/teamITAdminData\")\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((reqData) => {\r\n                this.setState({ reqData });\r\n            })\r\n        );\r\n      }\r\n\r\n    handleInputChange = (e) => {\r\n        if ((e.target.value && e.target.value.includes(\"script\") && e.target.value.includes(\"<\")) || e.target.value.includes(\">\")){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n    applyFilter = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n        var requestToFilter = {}\r\n        requestToFilter[e.target.name] = e.target.value;\r\n        trackPromise(\r\n            fetch('/mui/postRequestFilter' , {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify(requestToFilter)\r\n            })\r\n            .then((result) => {result.json()\r\n                if(result.status == 200){\r\n                    e.preventDefault();\r\n                    this.loadRequests();\r\n                }\r\n            })\r\n            \r\n        )\r\n    };\r\n    loadRequests() {\r\n        trackPromise(\r\n            fetch(\"/mui/teamITAdminData\")\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((reqData) => {\r\n                this.setState({ reqData });\r\n            })\r\n        );\r\n      }\r\n    editAccountClick= (e) => {\r\n        e.preventDefault();\r\n        var accID = e.currentTarget.id;\r\n        fetch('/mui/editAdmin' , {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"accID\": accID\r\n             })\r\n        })\r\n        .then((result) => {result.json()\r\n            // if(result.status == 200){\r\n            //   window.location.href = \"/mui/addAccountDetails\";\r\n            // }\r\n        })\r\n    }\r\n    updateValue = (e) => {\r\n        \r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n    \r\n    render() {\r\n        var stateObj = this.state;\r\n        var dbData = stateObj?.reqData?.dbData;\r\n        var statusdbData = stateObj?.reqData?.teamITRequestDataFromDB;\r\n        const items = [];\r\n        const itemsSelect = [];\r\n        var rows;\r\n        var statusrows;\r\n        var headers = [\r\n        \"ID\",\r\n        \"Status\",\r\n        \"Account\",\r\n        \"Channel\",\r\n        \"Geo\",\r\n        \"Market\",\r\n        \"Short Description\"\r\n        ];\r\n        if (dbData != undefined) {\r\n            rows = dbData;\r\n            statusrows = statusdbData;\r\n            var uniqueStatus = [...new Set(statusrows.map(a => a.status))];\r\n            for(var i = 0; i < uniqueStatus.length; i++){\r\n                var selectedOption = \"\";\r\n                selectedOption = (\r\n                    <option\r\n                          className=\"bx--select-option\"\r\n                          defaultValue={uniqueStatus[i]}\r\n                        //   select\r\n                        >\r\n                          {uniqueStatus[i]}\r\n                    </option>\r\n                  );\r\n                  itemsSelect.push(selectedOption);\r\n            }\r\n            Object.entries(rows).map(([key, value]) => {\r\n                let tableTr = \"\";\r\n                const redirect = {\r\n                    pathname: \"/mui/teamit/requester\",\r\n                    search: `?id=${value.requestID}`,\r\n                    state: {admin: true}\r\n                }\r\n                tableTr = (\r\n                    <tr>\r\n                      <td><Link className=\"reqIDLink\" id=\"adminUpdate\" to={redirect} >{value.requestID}</Link></td>\r\n                      <td>{value.status}</td>\r\n                      <td>{value.account}</td>\r\n                      <td>{value.supportType}</td>\r\n                      <td>{value.geo}</td>\r\n                      <td>{value.market}</td>\r\n                      <td>{value.shortDesc}</td>\r\n                    </tr>\r\n                  );\r\n                  items.push(tableTr);\r\n                  \r\n            });\r\n        }\r\n        \r\n        return (\r\n                <LazyLoad>\r\n                    <div>\r\n                        <div className=\"selectFloat\">\r\n                            <Select\r\n                            className=\"labelFont\"\r\n                            id=\"reaStatusFilter\"\r\n                            labelText=\"Filter Request with Status\"\r\n                            defaultValue=\"\"\r\n                            name=\"reaStatusFilter\"\r\n                            onChange={(e) => this.applyFilter(e)}\r\n                            >\r\n                                <SelectItem value=\"noFilter\" text=\"No Filter\" />\r\n                                {itemsSelect}\r\n                            </Select>\r\n                        </div>\r\n                        <Table style={{margin: \"0 0 4% 0\"}}>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                {headers.map((header) => (\r\n                                    <TableHeader key={header}>{header}</TableHeader>\r\n                                ))}\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {items}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </div>\r\n                </LazyLoad>\r\n        );\r\n    }\r\n}\r\nexport default withRouter(AdminLanding);","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SALandingSidebar.jsx",["1494","1495","1496","1497","1498","1499"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SALandingSidebar extends React.Component {\r\n    \r\n  render() {\r\n    return (\r\n        <div className=\"gridSidebar sidebarHeight\">\r\n            <div className=\"sidebarMain\">\r\n                <p className=\"sidebarNav\">\r\n                    <Link className=\"linkClass\" to=\"/mui/workspaces\">\r\n                        Workspace\r\n                    </Link>\r\n                </p>\r\n                <p className=\"sidebarNav\">\r\n                    <Link className=\"linkClass\" to=\"/mui/commands\">\r\n                        Commands\r\n                    </Link>\r\n                </p>\r\n                {/* <p className=\"sidebarNav\">\r\n                    <Link className=\"linkClass\" to=\"/mui/settings\">\r\n                        Global Settings\r\n                    </Link>\r\n                </p> */}\r\n                {/* <div className=\"nestedMenu\">\r\n                    <p className=\"sidebarNav sidebarBorderNested\">\r\n                        <Link className=\"linkClass\" to=\"/mui/settings\">\r\n                            Source Systems\r\n                        </Link>\r\n                    </p>\r\n                    <div className=\"nestedMenuITem\">\r\n                        <p className=\"sidebarNavNested\">\r\n                            <Link className=\"linkClass\" to=\"/mui/settings\">\r\n                                Source Systems\r\n                            </Link>\r\n                        </p>\r\n                        <p className=\"sidebarNavNested\">\r\n                            <Link className=\"linkClass\" to=\"/mui/settings\">\r\n                                Status Mapping \r\n                            </Link>\r\n                        </p>\r\n                        <p className=\"sidebarNavNested\">\r\n                            <Link className=\"linkClass\" to=\"/mui/settings\">\r\n                                Global \r\n                            </Link>\r\n                        </p>\r\n                    </div>\r\n                </div> */}\r\n                <div className=\"nestedMenu\">\r\n                    <p className=\"sidebarNav sidebarBorderNested\">\r\n                        {/* <Link className=\"linkClass\" to=\"/mui/settings\"> */}\r\n                            Cloud services\r\n                        {/* </Link> */}\r\n                    </p>\r\n                    <div className=\"nestedMenuITem\">\r\n                        <p className=\"sidebarNavNested\">\r\n                            <Link className=\"linkClass\" to=\"/mui/eventStreams\">\r\n                                Event Streams \r\n                            </Link>\r\n                        </p>\r\n                        <p className=\"sidebarNavNested\">\r\n                            <Link className=\"linkClass\" to=\"/mui/assistants\">\r\n                                Assistants\r\n                            </Link>\r\n                        </p>\r\n                        {/* <p className=\"sidebarNav\">\r\n                            <Link className=\"linkClass\" to=\"/mui/groups\">\r\n                                Groups\r\n                            </Link>\r\n                        </p> */}\r\n                        {/* <p className=\"sidebarNavNested\">\r\n                            <Link className=\"linkClass\" to=\"/mui/settings\">\r\n                                Translator \r\n                            </Link>\r\n                        </p> */}\r\n                    </div>\r\n                </div>\r\n                <p className=\"sidebarNav\">\r\n                    <Link className=\"linkClass\" to=\"/mui/groups\">\r\n                        Groups\r\n                    </Link>\r\n                </p>\r\n                <div className=\"nestedMenu\">\r\n                    <p className=\"sidebarNav sidebarBorderNested\">\r\n                        {/* <Link className=\"linkClass\" to=\"/mui/settings\"> */}\r\n                            Configure Settings\r\n                        {/* </Link> */}\r\n                    </p>\r\n                    <div className=\"nestedMenuITem\">\r\n                        <p className=\"sidebarNavNested\">\r\n                            <Link className=\"linkClass\" to=\"/mui/indexChannels\">\r\n                                Index Channel\r\n                            </Link>\r\n                        </p>\r\n                        <p className=\"sidebarNavNested\">\r\n                            <Link className=\"linkClass\" to=\"/mui/globalAssignments\">\r\n                                Global Assignments \r\n                            </Link>\r\n                        </p>\r\n                        <p className=\"sidebarNavNested\">\r\n                            <Link className=\"linkClass\" to=\"/mui/ansibleInstance\">\r\n                              CACF Ansible Instances\r\n                            </Link>\r\n                        </p>  \r\n                        {/* <p className=\"sidebarNavNested\">\r\n                            <Link className=\"linkClass\" to=\"/mui/settings\">\r\n                                Instance Settings\r\n                            </Link>\r\n                        </p>\r\n                        */}\r\n                    </div>\r\n                </div>\r\n                <p className=\"sidebarNav\">\r\n                    <Link className=\"linkClass\" to=\"/mui/features\">\r\n                        Features\r\n                    </Link>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default SALandingSidebar;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\AnsibleInstance\\AddAnsibleInstances\\AddAnsibleInstancesBreadcrump.jsx",["1500","1501","1502","1503"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass AddAnsibleInstancesBreadcrump extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"breadCrumpDiv\">\r\n            <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/home\">Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/superAdmin\">Admin</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/ansibleInstance\">CACF Ansible Instances</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem isCurrentPage>\r\n                    <Link to=\"/mui/addAnsibleIntances\">Add CACF Ansible Instance</Link>\r\n                </BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <h2 className=\"headerText\">Add CACF Ansible Instance</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default AddAnsibleInstancesBreadcrump;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Features\\AddFeature\\AddFeatureBreadcrump.jsx",["1504","1505","1506","1507"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SAAddFeatureBreadCrump extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"breadCrumpDiv\">\r\n            <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/home\">Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/superAdmin\">Admin</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/features\">Features</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem isCurrentPage>\r\n                    <Link to=\"/mui/addFeature\">Add Feature</Link>\r\n                </BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <h2 className=\"headerText\">Add Feature</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default SAAddFeatureBreadCrump;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\AnsibleInstance\\SAAnsibleInstances\\SAAnsibleInstancesList.jsx",["1508","1509","1510","1511"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Button,Form, TextInput  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { withRouter } from 'react-router-dom';\r\nclass SAAnsibleInstancesList extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { \r\n            showPopup: false,\r\n            ansibleInstancesData: [],\r\n            ansibleInstancesId: '',\r\n            deleteConfirm: '',\r\n            toDeleteID: ''\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        trackPromise(\r\n            fetch(\"/mui/ansibleInstance/list\")\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((ansibleInstancesData) => {\r\n                this.setState({ ansibleInstancesData });\r\n            })\r\n        );\r\n    }\r\n    handleInputChange = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    loadAnsibleInstance = () => {\r\n        this.props.history.push(\"/mui/ansibleInstance\");\r\n        trackPromise(\r\n            fetch('/mui/ansibleInstance/list')\r\n            .then(res => {\r\n                return res.json()\r\n            })\r\n            .then(ansibleInstancesData => { \r\n                this.setState({ ansibleInstancesData })\r\n            })\r\n        )\r\n    }\r\n\r\n    render() {\r\n        var stateSet = this.state;\r\n        var ansibleInstancesitem ='';\r\n        const itemsAnsibleInstances = [];\r\n        if(stateSet.ansibleInstancesData){\r\n            var ansibleInstancesFromState = stateSet.ansibleInstancesData;\r\n            var ansibleInstancesStateData = ansibleInstancesFromState.ansibleInstancesData;\r\n            if(ansibleInstancesStateData != undefined){\r\n                for(var i=0; i< ansibleInstancesStateData.length; i++){\r\n                    var redirectUrl = \"/mui/addAnsibleIntances?\"+ansibleInstancesStateData[i]._id;\r\n                    ansibleInstancesitem = (\r\n                        <div className=\"col3 cacf-list-card\">\r\n                            <div className=\"cardMain\">\r\n                                <p className=\"cardTitle\">{ansibleInstancesStateData[i].name}</p>\r\n                                <p class=\"cardTitleSub\">URL : {ansibleInstancesStateData[i].url}</p>\r\n                                <p class=\"cardTitleSub\">X-Instance-id : {ansibleInstancesStateData[i].instanceId}</p>\r\n                                <div className=\"actionDiv\">\r\n                                <Link  id={ansibleInstancesStateData[i]._id} to={redirectUrl} >\r\n                                    <p className=\"actionItem\" id={ansibleInstancesStateData[i]._id}>EDIT</p>\r\n                                </Link>\r\n                            </div>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    itemsAnsibleInstances.push(ansibleInstancesitem)\r\n                }\r\n            }\r\n        }\r\n    return (\r\n        <div className=\"col13Main\">\r\n            <div className=\"rowWidthDiv1\">\r\n                <Link className=\"addBtnDivCss\" to=\"/mui/addAnsibleIntances\">\r\n                    <Button className=\"addAccBtn addBtnMargin addBtnCss addBtnPACss\">\r\n                        <Link to=\"/mui/addAnsibleIntances\">Add CACF Ansible Instance</Link>\r\n                    </Button>\r\n                </Link>\r\n            </div>\r\n            <div className=\"rowWidthDiv row13\">\r\n                {itemsAnsibleInstances}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n  }\r\n}\r\nexport default withRouter(SAAnsibleInstancesList);","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\AnsibleInstance\\SAAnsibleInstances\\SAAnsibleInstancesBreadcrump.jsx",["1512","1513","1514","1515"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SAAnsibleInstancesBreadcrump extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"breadCrumpDiv stickyDiv\">\r\n            <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/home\">Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/superAdmin\">Admin</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem isCurrentPage>\r\n                    <Link to=\"/mui/ansibleInstance\">CACF Ansible Instances</Link>\r\n                </BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <h2 className=\"headerText\">CACF Ansible Instances</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default SAAnsibleInstancesBreadcrump;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Features\\SAFeatures\\SAFeatureList.jsx",["1516","1517","1518","1519","1520","1521","1522","1523","1524"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Button,Form, TextInput  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { Close32 } from \"@carbon/icons-react\";\r\nimport { withRouter } from 'react-router-dom';\r\nclass SAFeaturesList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            showPopup: false,\r\n            featureData: [],\r\n            featureId: '',\r\n            deleteConfirm: '',\r\n            toDeleteID: ''\r\n        };\r\n        this.loadAssistants = this.loadAssistants.bind(this);\r\n        \r\n    }\r\n    componentDidMount() {\r\n        trackPromise(\r\n            fetch(\"/mui/fetchfeatureData\")\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((featureData) => {\r\n                this.setState({ featureData });\r\n            })\r\n        );\r\n    }\r\n    handleInputChange = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n    showModal = (e) => {\r\n        this.setState({\r\n            showPopup: true,\r\n        });\r\n        this.setState({resErrMsg: ''});\r\n        var assistantsToDel = e.target.getAttribute(\"data-name\");\r\n        this.setState({\r\n            featureId: e.target.id,\r\n            featureNameToDelete: assistantsToDel\r\n        })\r\n    };\r\n    cancelModal = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            showPopup: false,\r\n        });\r\n    };\r\n    deleteAssistants = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n            showPopup: false,\r\n        });\r\n        const featureData = {\r\n            deleteConfirm: this.state.delete,\r\n            toDeleteID: this.state.featureId\r\n        };\r\n        trackPromise(\r\n            fetch(\"/mui/deleteAssistants\", {\r\n              method: \"POST\",\r\n              headers: {\r\n                \"Content-type\": \"application/json\",\r\n              },\r\n              body: JSON.stringify(featureData),\r\n            })\r\n            .then((result) => {\r\n                if (result.status === 404 || result.status === 400)  {\r\n                    this.setState({\r\n                        showPopup: true,\r\n                    });\r\n                    result.json().then((object)=> {\r\n                    this.setState({resErrMsg: object.assistantsError});\r\n                    })\r\n                } else if (result.status === 409) {\r\n                    this.setState({\r\n                        showPopup: true,\r\n                    });\r\n                    result.json().then((object)=> {\r\n                        this.setState({resErrMsg: object.assistantsError});\r\n                    })\r\n                } else if(result.status == 200){\r\n                    e.preventDefault();\r\n                    this.setState({\r\n                        showPopup: false,\r\n                    });\r\n                    this.loadAssistants();\r\n                }\r\n           })\r\n        );\r\n    }\r\n    loadAssistants = () => {\r\n        this.props.history.push(\"/mui/assistants\");\r\n        trackPromise(\r\n            fetch('/mui/fetchfeatureData')\r\n            .then(res => {\r\n                return res.json()\r\n            })\r\n            .then(featureData => { \r\n                this.setState({ featureData })\r\n            })\r\n        )\r\n    }\r\n    render() {\r\n        console.log(this.props.searchVal,\"----searchVal\");\r\n        var stateSet = this.state;\r\n        var featuresitem ='';\r\n        const itemsFeatures = [];\r\n        var featureIdToDelete = '';\r\n        var featureNameToDelete = '';\r\n        if(this.state.featureId){\r\n            featureIdToDelete = this.state.featureId\r\n            featureNameToDelete = this.state.featureNameToDelete\r\n        }\r\n        if(stateSet.featureData){\r\n            var featureFromState = stateSet.featureData;\r\n            let featuresStateData = featureFromState.featureData;\r\n\r\n            //check for Search Value from Program Admin\r\n            if(this.props.searchVal && this.props.searchVal !== 'all'){\r\n                featuresStateData = featuresStateData.filter(features => features.publishToSpecificAcount.includes(this.props.searchVal))\r\n            }\r\n            if(featuresStateData != undefined){\r\n                for(var i=0; i< featuresStateData.length; i++){\r\n                    var redirectUrl = \"/mui/addFeature?\"+featuresStateData[i]._id;\r\n                    \r\n                    featuresitem = (\r\n                        <div className=\"col3\">\r\n                            <div className=\"cardMain\">\r\n                                <p className=\"cardTitle\">{featuresStateData[i].name}</p>\r\n                                <p class=\"cardTitleSub\">Category: {featuresStateData[i].category}</p>\r\n                                {/* <p class=\"cardTitleSub\">publish: {featuresStateData[i].publish}</p> */}\r\n                                <p class=\"cardTitleSub descriptionDiv\">Description: {featuresStateData[i].description}</p>\r\n                                <div className=\"actionDiv\">\r\n                                {/* <Link  id={featuresStateData[i]._id} to={redirectUrl} >\r\n                                    <p className=\"actionItem\" id={featuresStateData[i]._id}>EDIT</p>\r\n                                </Link>\r\n                                <a className=\"deleteWorkspaceLink\" data-name={featuresStateData[i].name} onClick={(e) => {this.showModal(e);}} id={featuresStateData[i]._id} >\r\n                                    <p className=\"actionItem\" data-name={featuresStateData[i].name} id={featuresStateData[i]._id}>DELETE</p>\r\n                                </a> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    itemsFeatures.push(featuresitem)\r\n                }\r\n            }\r\n        }\r\n    return (\r\n        <div className=\"col13Main\">\r\n            {this.props.type !== 'program_admin' && (\r\n                <div className=\"rowWidthDiv1\">\r\n                    <Link className=\"addBtnDivCss\" to=\"/mui/addFeature\">\r\n                        <Button className=\"addAccBtn addBtnMargin addBtnCss addBtnPACss\">\r\n                            <Link to=\"/mui/addFeature\">Add Feature</Link>\r\n                        </Button>\r\n                    </Link>\r\n                </div>\r\n            )}\r\n            <div className=\"rowWidthDiv row13\">\r\n                {itemsFeatures}\r\n            </div>\r\n            {/* {this.state.showPopup ? (\r\n                <div className=\"popup\">\r\n                <div className=\"bx--modal-container modal-css\">\r\n                    <div className=\"bx--modal-header modalHeaderCss\">\r\n                    <p className=\"bx--modal-header__heading bx--type-beta modalHeaderTitlePadd\" id=\"modal-addWorkspace-heading\" >Do you want to delete Feature?</p>\r\n                    <button className=\"bx--modal-close\" type=\"button\" data-modal-close aria-label=\"close modal\" > \r\n                        <Close32 className=\"iconEditSize\" onClick={this.cancelModal} />\r\n                    </button>\r\n                    </div>\r\n                    <div className=\"bx--modal-content modalContentCss\">\r\n                    <p className=\"modalContentPara\">About to delete Feature <span className=\"modalSpanClass\">{featureNameToDelete}</span>. Any saved data will also be deleted</p>\r\n                    <p className=\"modalContentPara\">This deletion cannot be undone.</p>\r\n                    <Form>\r\n                        <TextInput className=\"bx--text-input bx--text__input labelDeleteCSS\" id={featureIdToDelete} name=\"delete\" defaultValue='' labelText=\"Please type DELETE to complete this action\" placeholder=\"Delete Feature\" onBlur={this.handleInputChange} />\r\n                    </Form>\r\n                    {\r\n                        this.state['resErrMsg'] && \r\n                        <small className=\"fontRed\">\r\n                        <b className=\"blgrperrorMsg\">{this.state.resErrMsg}</b>\r\n                        </small>\r\n                    }\r\n                    </div>\r\n                    <div className=\"bx--modal-content--overflow-indicator\"></div>\r\n                    <div className=\"bx--modal-footer\">\r\n                    <Button kind=\"secondary\" className=\"btnSACss\" onClick={this.cancelModal} >Cancel</Button>\r\n                    <Button kind='danger' onClick={this.deleteAssistants} type=\"submit\" className=\"btnSACss\" >Delete </Button>\r\n                    </div>\r\n                </div>\r\n                <span tabindex=\"0\"></span>\r\n                </div>\r\n            ) : null} */}\r\n        </div>\r\n\r\n    );\r\n  }\r\n}\r\nexport default withRouter(SAFeaturesList);","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Features\\SAFeatures\\SAFeatureBreadcrump.jsx",["1525","1526","1527","1528"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SAFeatureBreadCrump extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"breadCrumpDiv stickyDiv\">\r\n            <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/home\">Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/superAdmin\">Admin</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem isCurrentPage>\r\n                    <Link to=\"/mui/features\">Features</Link>\r\n                </BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <h2 className=\"headerText\">Features</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default SAFeatureBreadCrump;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\GlobalAssignment\\AddGlobalAssignments\\AddGlobalAssignmentsBreadcrump.jsx",["1529","1530","1531","1532"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass AddGlobalAssignmentsBreadcrump extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"breadCrumpDiv\">\r\n            <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/home\">Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/superAdmin\">Admin</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/globalAssignments\">Global Assignments</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem isCurrentPage>\r\n                    <Link to=\"/mui/addGlobalAssignments\">Add GLobal Assignment</Link>\r\n                </BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <h2 className=\"headerText\">Add Global Assignment</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default AddGlobalAssignmentsBreadcrump;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\IndexChannel\\AddIndexChannel\\AddIndexChannelBreadcrump.jsx",["1533","1534","1535","1536"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SAAddIndexChannelBreadCrump extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"breadCrumpDiv\">\r\n            <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/home\">Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/superAdmin\">Admin</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/indexChannels\">Index Channel</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem isCurrentPage>\r\n                    <Link to=\"/mui/addIndexChannel\">Add Index Channel</Link>\r\n                </BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <h2 className=\"headerText\">Add Index Channel</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default SAAddIndexChannelBreadCrump;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Assistants\\AddAssistants\\AddAssistantsBreadcrump.jsx",["1537","1538","1539","1540"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SAWorkspaceBreadCrump extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"breadCrumpDiv\">\r\n            <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/home\">Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/superAdmin\">Admin</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/assistants\">Assistants</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem isCurrentPage>\r\n                    <Link to=\"/mui/addAssistants\">Add Assistants</Link>\r\n                </BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <h2 className=\"headerText\">Add Assistants</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default SAWorkspaceBreadCrump;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\IndexChannel\\SAIndexChannel\\SAIndexChannelList.jsx",["1541","1542","1543","1544","1545","1546","1547","1548","1549"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Button,Form, TextInput, Select, SelectItem  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { Close32 } from \"@carbon/icons-react\";\r\nimport { withRouter } from 'react-router-dom';\r\nclass SAIndexChannelList extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { \r\n            showPopup: false,\r\n            inedexChannelData: [],\r\n            inedexChannelId: '',\r\n            deleteConfirm: '',\r\n            toDeleteID: ''\r\n        };\r\n        // this.loadIndexChannel = this.loadIndexChannel.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        trackPromise(\r\n            fetch(\"/mui/fetchIndexChannelData\")\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((inedexChannelData) => {\r\n                this.setState({ inedexChannelData });\r\n            })\r\n        );\r\n    }\r\n    handleInputChange = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n    showModal = (e) => {\r\n        this.setState({\r\n            showPopup: true,\r\n        });\r\n        this.setState({resErrMsg: ''});\r\n        var indexChannelToDel = e.target.getAttribute(\"data-name\");\r\n        this.setState({\r\n            indexChannelId: e.target.id,\r\n            indexChannelNameToDelete: indexChannelToDel\r\n        })\r\n    };\r\n    cancelModal = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            showPopup: false,\r\n        });\r\n    };\r\n    deleteIndexChannel = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n            showPopup: false,\r\n        });\r\n        const indexChannelData = {\r\n            toDeleteField:'indexChannel',\r\n            deleteConfirm: this.state.delete,\r\n            toDeleteID: this.state.indexChannelId\r\n        };\r\n        trackPromise(\r\n            fetch(\"/mui/deleteIndexChannel\", {\r\n              method: \"POST\",\r\n              headers: {\r\n                \"Content-type\": \"application/json\",\r\n              },\r\n              body: JSON.stringify(indexChannelData),\r\n            })\r\n            .then((result) => {\r\n                if (result.status === 404 || result.status === 400)  {\r\n                    this.setState({\r\n                        showPopup: true,\r\n                    });\r\n                    result.json().then((object)=> {\r\n                    this.setState({resErrMsg: object.indexChannelError});\r\n                    })\r\n                } else if (result.status === 409) {\r\n                    this.setState({\r\n                        showPopup: true,\r\n                    });\r\n                    result.json().then((object)=> {\r\n                        this.setState({resErrMsg: object.indexChannelError});\r\n                    })\r\n                } else if(result.status == 200){\r\n                    e.preventDefault();\r\n                    this.setState({\r\n                        showPopup: false,\r\n                    });\r\n                    this.loadIndexChannel();\r\n                }\r\n           })\r\n        );\r\n    }\r\n    loadIndexChannel = (collabTool='') => {\r\n        this.props.history.push(\"/mui/indexChannels\");\r\n        trackPromise(\r\n            fetch('/mui/fetchIndexChannelData')\r\n            .then(res => {\r\n                return res.json()\r\n            })\r\n            .then(inedexChannelData => { \r\n                let filteredData = [];\r\n                if(collabTool){\r\n                    filteredData = inedexChannelData.inedexChannelData.filter(data => {\r\n                        if(collabTool.toLowerCase() === 'teams'){\r\n                            return data.workspaceType && data.workspaceType.toLowerCase() === collabTool.toLowerCase();\r\n                        }\r\n                        else {\r\n                            return data.workspaceType === undefined || data.workspaceType.toLowerCase() === collabTool.toLowerCase();\r\n                        }\r\n                    })\r\n                }\r\n                if(filteredData){\r\n                    inedexChannelData = {\r\n                        inedexChannelData: filteredData\r\n                    };\r\n                }\r\n                this.setState({ inedexChannelData });\r\n            })\r\n        )\r\n    }\r\n    changeWorkSpace = (e) => {\r\n        const collabTool = e.target.value;\r\n        this.loadIndexChannel(collabTool);\r\n    }\r\n    render() {\r\n        var stateSet = this.state;\r\n        var indexChannelitem ='';\r\n        const itemsIndexChannel = [];\r\n        var indexChannelIdToDelete = '';\r\n        var indexChannelNameToDelete = '';\r\n        if(this.state.indexChannelId){\r\n            indexChannelIdToDelete = this.state.indexChannelId\r\n            indexChannelNameToDelete = this.state.indexChannelNameToDelete\r\n        }\r\n        if(stateSet.inedexChannelData){\r\n            var indexChannelFromState = stateSet.inedexChannelData;\r\n            var indexChannelStateData = indexChannelFromState.inedexChannelData;\r\n            var deleteItem = '';\r\n            var minifyItem = '';\r\n            var test = []\r\n            if(indexChannelStateData != undefined){\r\n                for(var i=0; i< indexChannelStateData.length; i++){\r\n                    var redirectUrl = \"/mui/addIndexChannel?\"+indexChannelStateData[i].channel;\r\n                    if(indexChannelStateData[i].minify != undefined){\r\n                        if(indexChannelStateData[i].minify == true || indexChannelStateData[i].minify == 'true'){\r\n                            minifyItem = <p class=\"cardTitleSub\">minify: true</p>\r\n                        }else{\r\n                            minifyItem = <p class=\"cardTitleSub\">minify: false</p>\r\n                        }\r\n                    }else{\r\n                        minifyItem = ''\r\n                    }\r\n                    indexChannelitem = (\r\n                        <div className=\"col3-Large\">\r\n                            <div className=\"cardLarge\">\r\n                                <p className=\"cardTitle\">{indexChannelStateData[i].channel}</p>\r\n                                <p class=\"cardTitleSub\">workspaceName: {indexChannelStateData[i].workspaceName}</p>\r\n                                <p class=\"cardTitleSubRule\">rule: {indexChannelStateData[i].rule}</p>\r\n                                {minifyItem}\r\n                                <div className=\"actionDiv\">\r\n                                    <Link  id={indexChannelStateData[i].channel} to={redirectUrl} >\r\n                                        <p className=\"actionItem\" id={indexChannelStateData[i].channel}>EDIT</p>\r\n                                    </Link>\r\n                                    <a className=\"deleteWorkspaceLink\" data-name={indexChannelStateData[i].channel} onClick={(e) => {this.showModal(e);}} id={indexChannelStateData[i].channel} >\r\n                                        <p className=\"actionItem\" data-name={indexChannelStateData[i].channel} id={indexChannelStateData[i].channel}>DELETE</p>\r\n                                    </a>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    itemsIndexChannel.push(indexChannelitem)\r\n                }\r\n            }\r\n        }\r\n    return (\r\n        <div className=\"col13Main\">\r\n            <div className=\"rowWidthDiv1\">\r\n                <Link className=\"addBtnDivCss\" to=\"/mui/addIndexChannel\">\r\n                    <Button className=\"addAccBtn addBtnMargin addBtnCss addBtnPACss\">\r\n                        <Link to=\"/mui/addIndexChannel\">Add Index Channel</Link>\r\n                    </Button>\r\n                </Link>\r\n            </div>\r\n            <div className=\"rowWidthDiv row13\" style={{width:\"33%\",paddingLeft:\"10px\"}}>\r\n            <Select className=\"labelFont\" id=\"collabTool\" \r\n                labelText={<><b>Collaboration tool</b> </>}\r\n                defaultValue=\"\" \r\n                    onChange={(e) => this.changeWorkSpace(e)}>\r\n                    <SelectItem hidden\r\n                            value=\"\"\r\n                            text=\"Choose an option\"\r\n                        />\r\n                    <SelectItem\r\n                        value=\"SLACK\"\r\n                        text=\"SLACK\"\r\n                    />\r\n                    <SelectItem\r\n                        value=\"TEAMS\"\r\n                        text=\"TEAMS\"\r\n                    />\r\n            </Select>\r\n            </div>\r\n            \r\n            <div className=\"rowWidthDiv row13\">\r\n                {itemsIndexChannel}\r\n            </div>\r\n            {this.state.showPopup ? (\r\n                <div className=\"popup\">\r\n                <div className=\"bx--modal-container modal-css\">\r\n                    <div className=\"bx--modal-header modalHeaderCss\">\r\n                    <p className=\"bx--modal-header__heading bx--type-beta modalHeaderTitlePadd\" id=\"modal-addWorkspace-heading\" >Do you want to delete Index Channel?</p>\r\n                    <button className=\"bx--modal-close\" type=\"button\" data-modal-close aria-label=\"close modal\" > \r\n                        <Close32 className=\"iconEditSize\" onClick={this.cancelModal} />\r\n                    </button>\r\n                    </div>\r\n                    <div className=\"bx--modal-content modalContentCss\">\r\n                    <p className=\"modalContentPara\">About to delete Index Channel <span className=\"modalSpanClass\">{indexChannelNameToDelete}</span>. Any saved data will also be deleted</p>\r\n                    <p className=\"modalContentPara\">This deletion cannot be undone.</p>\r\n                    <Form>\r\n                        <TextInput className=\"bx--text-input bx--text__input labelDeleteCSS\" id={indexChannelIdToDelete} name=\"delete\" defaultValue='' labelText=\"Please type DELETE to complete this action\" placeholder=\"Delete Index Channel\" onBlur={this.handleInputChange} />\r\n                    </Form>\r\n                    {\r\n                        this.state['resErrMsg'] && \r\n                        <small className=\"fontRed\">\r\n                        <b className=\"blgrperrorMsg\">{this.state.resErrMsg}</b>\r\n                        </small>\r\n                    }\r\n                    </div>\r\n                    <div className=\"bx--modal-content--overflow-indicator\"></div>\r\n                    <div className=\"bx--modal-footer\">\r\n                    <Button kind=\"secondary\" className=\"btnSACss\" onClick={this.cancelModal} >Cancel</Button>\r\n                    <Button kind='danger' onClick={this.deleteIndexChannel} type=\"submit\" className=\"btnSACss\" >Delete </Button>\r\n                    </div>\r\n                </div>\r\n                <span tabindex=\"0\"></span>\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n\r\n    );\r\n  }\r\n}\r\nexport default withRouter(SAIndexChannelList);","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\IndexChannel\\SAIndexChannel\\SAIndexChannelBreadcrump.jsx",["1550","1551","1552","1553"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SAIndexChannelBreadCrump extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"breadCrumpDiv stickyDiv\">\r\n            <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/home\">Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/superAdmin\">Admin</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem isCurrentPage>\r\n                    <Link to=\"/mui/indexChannels\">Index Channel</Link>\r\n                </BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <h2 className=\"headerText\">Index Channel</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default SAIndexChannelBreadCrump;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\GlobalAssignment\\SAGlobalAssignments\\SAGlobalAssignmentsList.jsx",["1554","1555","1556","1557","1558"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Button,Form, TextInput  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { Close32 } from \"@carbon/icons-react\";\r\nimport { withRouter } from 'react-router-dom';\r\nclass SAGlobalAssignmentsList extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { \r\n            showPopup: false,\r\n            globalAssignmentsData: [],\r\n            globalAssignmentsId: '',\r\n            deleteConfirm: '',\r\n            toDeleteID: ''\r\n        };\r\n        // this.loadAssignments = this.loadAssignments.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        trackPromise(\r\n            fetch(\"/mui/fetchGlobalAssignmentsData\")\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((globalAssignmentsData) => {\r\n                this.setState({ globalAssignmentsData });\r\n            })\r\n        );\r\n    }\r\n    handleInputChange = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n    showModal = (e) => {\r\n        this.setState({\r\n            showPopup: true,\r\n        });\r\n        this.setState({resErrMsg: ''});\r\n        var GAToDel = e.target.getAttribute(\"data-name\");\r\n        this.setState({\r\n            globalAssignmentID: e.target.id,\r\n            globalAssignmentsNameToDelete: GAToDel\r\n        })\r\n    };\r\n    cancelModal = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            showPopup: false,\r\n        });\r\n    };\r\n    deleteGlobalAssignments = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n            showPopup: false,\r\n        });\r\n        const assistantsData = {\r\n            deleteConfirm: this.state.delete,\r\n            toDeleteID: this.state.globalAssignmentID\r\n        };\r\n        trackPromise(\r\n            fetch(\"/mui/deleteGlobalAssignments\", {\r\n              method: \"POST\",\r\n              headers: {\r\n                \"Content-type\": \"application/json\",\r\n              },\r\n              body: JSON.stringify(assistantsData),\r\n            })\r\n            .then((result) => {\r\n                if (result.status === 404 || result.status === 400)  {\r\n                    this.setState({\r\n                        showPopup: true,\r\n                    });\r\n                    result.json().then((object)=> {\r\n                    this.setState({resErrMsg: object.globalAssignmentErr});\r\n                    })\r\n                } else if (result.status === 409) {\r\n                    this.setState({\r\n                        showPopup: true,\r\n                    });\r\n                    result.json().then((object)=> {\r\n                        this.setState({resErrMsg: object.globalAssignmentErr});\r\n                    })\r\n                } else if(result.status == 200){\r\n                    e.preventDefault();\r\n                    this.setState({\r\n                        showPopup: false,\r\n                    });\r\n                    this.loadAssignments();\r\n                }\r\n           })\r\n        );\r\n    }\r\n    loadAssignments = () => {\r\n        this.props.history.push(\"/mui/globalAssignments\");\r\n        trackPromise(\r\n            fetch('/mui/fetchGlobalAssignmentsData')\r\n            .then(res => {\r\n                return res.json()\r\n            })\r\n            .then(globalAssignmentsData => { \r\n                this.setState({ globalAssignmentsData })\r\n            })\r\n        )\r\n    }\r\n    render() {\r\n        var stateSet = this.state;\r\n        var globalAssignmentsitem ='';\r\n        const itemsGlobalAssignments = [];\r\n        var globalAssignmentsIdToDelete = '';\r\n        var globalAssignmentsNameToDelete = '';\r\n        if(this.state.globalAssignmentID){\r\n            globalAssignmentsIdToDelete = this.state.globalAssignmentID\r\n            globalAssignmentsNameToDelete = this.state.globalAssignmentsNameToDelete\r\n        }\r\n        if(stateSet.globalAssignmentsData){\r\n            var globalAssignmentsFromState = stateSet.globalAssignmentsData;\r\n            var globalAssignmentsStateData = globalAssignmentsFromState.globalAssignmentsData;\r\n            var deleteItem = '';\r\n            if(globalAssignmentsStateData != undefined){\r\n                for(var i=0; i< globalAssignmentsStateData.length; i++){\r\n                    var redirectUrl = \"/mui/addGlobalAssignments?\"+globalAssignmentsStateData[i]._id;\r\n                    if(globalAssignmentsStateData[i].name != \"primary\"){\r\n                        deleteItem = <p className=\"actionItem\" data-name={globalAssignmentsStateData[i].name} id={globalAssignmentsStateData[i]._id}>DELETE</p>\r\n                    }else{\r\n                        deleteItem = '';\r\n                    }\r\n                    globalAssignmentsitem = (\r\n                        <div className=\"col3\">\r\n                            <div className=\"cardMain\">\r\n                                <p className=\"cardTitle\">{globalAssignmentsStateData[i].name}</p>\r\n                                <p class=\"cardTitleSub\">Group: {globalAssignmentsStateData[i].groups}</p>\r\n                                <p class=\"cardTitleSubRule\">rule: {globalAssignmentsStateData[i].rule}</p>\r\n                                <div className=\"actionDiv\">\r\n                                <Link  id={globalAssignmentsStateData[i]._id} to={redirectUrl} >\r\n                                    <p className=\"actionItem\" id={globalAssignmentsStateData[i]._id}>EDIT</p>\r\n                                </Link>\r\n                                <a className=\"deleteWorkspaceLink\" data-name={globalAssignmentsStateData[i].name} onClick={(e) => {this.showModal(e);}} id={globalAssignmentsStateData[i]._id} >\r\n                                    {deleteItem}\r\n                                </a>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    itemsGlobalAssignments.push(globalAssignmentsitem)\r\n                }\r\n            }\r\n        }\r\n    return (\r\n        <div className=\"col13Main\">\r\n            <div className=\"rowWidthDiv1\">\r\n                <Link className=\"addBtnDivCss\" to=\"/mui/addGlobalAssignments\">\r\n                    <Button className=\"addAccBtn addBtnMargin addBtnCss addBtnPACss\">\r\n                        <Link to=\"/mui/addGlobalAssignments\">Add Global Assignment</Link>\r\n                    </Button>\r\n                </Link>\r\n            </div>\r\n            <div className=\"rowWidthDiv row13\">\r\n                {itemsGlobalAssignments}\r\n            </div>\r\n            {this.state.showPopup ? (\r\n                <div className=\"popup\">\r\n                <div className=\"bx--modal-container modal-css\">\r\n                    <div className=\"bx--modal-header modalHeaderCss\">\r\n                    <p className=\"bx--modal-header__heading bx--type-beta modalHeaderTitlePadd\" id=\"modal-addWorkspace-heading\" >Do you want to delete Global Assignment?</p>\r\n                    <button className=\"bx--modal-close\" type=\"button\" data-modal-close aria-label=\"close modal\" > \r\n                        <Close32 className=\"iconEditSize\" onClick={this.cancelModal} />\r\n                    </button>\r\n                    </div>\r\n                    <div className=\"bx--modal-content modalContentCss\">\r\n                    <p className=\"modalContentPara\">About to delete Assignment <span className=\"modalSpanClass\">{globalAssignmentsNameToDelete}</span>. Any saved data will also be deleted</p>\r\n                    <p className=\"modalContentPara\">This deletion cannot be undone.</p>\r\n                    <Form>\r\n                        <TextInput className=\"bx--text-input bx--text__input labelDeleteCSS\" id={globalAssignmentsIdToDelete} name=\"delete\" defaultValue='' labelText=\"Please type DELETE to complete this action\" placeholder=\"Delete Assignment\" onBlur={this.handleInputChange} />\r\n                    </Form>\r\n                    {\r\n                        this.state['resErrMsg'] && \r\n                        <small className=\"fontRed\">\r\n                        <b className=\"blgrperrorMsg\">{this.state.resErrMsg}</b>\r\n                        </small>\r\n                    }\r\n                    </div>\r\n                    <div className=\"bx--modal-content--overflow-indicator\"></div>\r\n                    <div className=\"bx--modal-footer\">\r\n                    <Button kind=\"secondary\" className=\"btnSACss\" onClick={this.cancelModal} >Cancel</Button>\r\n                    <Button kind='danger' onClick={this.deleteGlobalAssignments} type=\"submit\" className=\"btnSACss\" >Delete </Button>\r\n                    </div>\r\n                </div>\r\n                <span tabindex=\"0\"></span>\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n\r\n    );\r\n  }\r\n}\r\nexport default withRouter(SAGlobalAssignmentsList);","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\GlobalAssignment\\SAGlobalAssignments\\SAGlobalAssignmentsBreadcrump.jsx",["1559","1560","1561","1562"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SAGlobalAssignmentsBreadcrump extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"breadCrumpDiv stickyDiv\">\r\n            <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/home\">Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/superAdmin\">Admin</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem isCurrentPage>\r\n                    <Link to=\"/mui/globalAssignments\">Global Assignments</Link>\r\n                </BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <h2 className=\"headerText\">Global Assignments</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default SAGlobalAssignmentsBreadcrump;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\EventStreams\\AddEventStreams\\AddEventStreamsBreadcrum.jsx",["1563","1564","1565","1566"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SAEventStreamsBreadCrump extends React.Component {\r\n    \r\n  render() {\r\n    return (\r\n        <div className=\"breadCrumpDiv\">\r\n            <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/home\">Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/superAdmin\">Admin</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/eventStreams\">Event Stream</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem isCurrentPage>\r\n                    <Link to=\"/mui/addEventStreams\">Add Event Stream</Link>\r\n                </BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <h2 className=\"headerText\">Add Event Stream</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default SAEventStreamsBreadCrump;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\EventStreams\\SAEventStreams\\SAEventStreamsBreadcrump.jsx",["1567","1568","1569","1570"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SAEventStreamsBreadCrump extends React.Component {\r\n    \r\n  render() {\r\n    return (\r\n        <div className=\"breadCrumpDiv stickyDiv\">\r\n            <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/home\">Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/superAdmin\">Admin</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem isCurrentPage>\r\n                    <Link to=\"/mui/eventStreams\">Event Streams</Link>\r\n                </BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <h2 className=\"headerText\">Event Streams</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default SAEventStreamsBreadCrump;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\groups\\ChatopsGroupUtil.js",["1571","1572"],"export const UserTypes = {\r\n    owner : \"OWNER\",\r\n    admin : \"ADMINISTRATOR\",\r\n    member : \"MEMBER\"\r\n}\r\n\r\nexport const isUniqueGroup = async (grpName) => {\r\n    try {\r\n      const res = await fetch(\"/mui/uniqueGroup/\" + grpName);\r\n      if (res.status == 200) {\r\n        const { unique } = await res.json();\r\n        return unique;\r\n      } \r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\nexport const isUniqueGroupUser = async (groupId, email, userType) => {\r\n    const grpData = {\r\n        groupId,\r\n        email,\r\n        userType\r\n    }\r\n    try {\r\n      const res = await fetch(\"/mui/uniqueGroupUser\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(grpData),\r\n      })\r\n      if (res.status == 200) {\r\n        const { unique } = await res.json();\r\n        return unique;\r\n      } \r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n// export default  UserType;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\EventStreams\\SAEventStreams\\SAEventStreamsList.jsx",["1573","1574","1575","1576"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Button,Form, TextInput  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { Close32 } from \"@carbon/icons-react\";\r\nimport { withRouter } from 'react-router-dom';\r\nclass SAEventStreamsList extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { \r\n            eventStreamData: [],\r\n            showPopup: false,\r\n        };\r\n        this.loadEventStreams = this.loadEventStreams.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        trackPromise(\r\n            fetch(\"/mui/fetchEventStreamData\")\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((eventStreamData) => {\r\n                this.setState({ eventStreamData });\r\n            })\r\n        );\r\n    }\r\n    handleInputChange = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n    showModal = (e) => {\r\n        this.setState({\r\n            showPopup: true,\r\n        });\r\n        this.setState({resErrMsg: ''});\r\n        var eventStreamToDel = e.target.getAttribute(\"data-name\")\r\n        this.setState({\r\n            eventStreamId: e.target.id,\r\n            eventStreamToDelete: eventStreamToDel\r\n        })\r\n    };\r\n    cancelModal = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            showPopup: false,\r\n        });\r\n    };\r\n    deleteEventStream = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n            showPopup: false,\r\n        });\r\n        const eventStreamData = {\r\n            deleteConfirm: this.state.delete,\r\n            toDeleteID: this.state.eventStreamId\r\n        };\r\n        trackPromise(\r\n            fetch(\"/mui/deleteEventStream\", {\r\n              method: \"POST\",\r\n              headers: {\r\n                \"Content-type\": \"application/json\",\r\n              },\r\n              body: JSON.stringify(eventStreamData),\r\n            })\r\n            .then((result) => {\r\n                if (result.status === 404 || result.status === 400)  {\r\n                    this.setState({\r\n                        showPopup: true,\r\n                    });\r\n                    result.json().then((object)=> {\r\n                    this.setState({resErrMsg: object.eventSteamError});\r\n                    })\r\n                } else if (result.status === 409) {\r\n                    this.setState({\r\n                        showPopup: true,\r\n                    });\r\n                    result.json().then((object)=> {\r\n                        this.setState({resErrMsg: object.eventSteamError});\r\n                    })\r\n                } else if(result.status == 200){\r\n                    e.preventDefault();\r\n                    this.setState({\r\n                        showPopup: false,\r\n                    });\r\n                    this.loadEventStreams();\r\n                }\r\n           })\r\n        );\r\n    }\r\n    loadEventStreams = () => {\r\n        this.props.history.push(\"/mui/eventStreams\");\r\n        trackPromise(\r\n            fetch('/mui/fetchEventStreamData')\r\n            .then(res => {\r\n                return res.json()\r\n            })\r\n            .then(eventStreamData => { \r\n                this.setState({ eventStreamData })\r\n            })\r\n        )\r\n    }\r\n    render() {\r\n        var stateSet = this.state;\r\n        var eventStreamitem ='';\r\n        const itemsEventStream = [];\r\n        var eventStreamIdToDelete = '';\r\n        var eventStreamNameToDelete = '';\r\n        if(this.state.eventStreamId){\r\n            eventStreamIdToDelete = this.state.eventStreamId\r\n            eventStreamNameToDelete = this.state.eventStreamToDelete\r\n        }\r\n        if(stateSet.eventStreamData){\r\n            var eventStramFromState = stateSet.eventStreamData;\r\n            var eventStreamStateData = eventStramFromState.eventStreamData;\r\n            if(eventStreamStateData != undefined){\r\n                for(var i=0; i< eventStreamStateData.length; i++){\r\n                    var redirectUrl = \"/mui/addEventStreams?\"+eventStreamStateData[i]._id;\r\n                    eventStreamitem = (\r\n                        <div className=\"col3\">\r\n                            <div className=\"cardMain\">\r\n                                <p className=\"cardTitle\">{eventStreamStateData[i].name}</p>\r\n                                <div className=\"actionDiv\">\r\n                                <Link  id={eventStreamStateData[i]._id} to={redirectUrl} >\r\n                                    <p className=\"actionItem\" id={eventStreamStateData[i]._id}>EDIT</p>\r\n                                </Link>\r\n                                <a className=\"deleteWorkspaceLink\" data-name={eventStreamStateData[i].name} onClick={(e) => {this.showModal(e);}} id={eventStreamStateData[i]._id} >\r\n                                    <p className=\"actionItem\" data-name={eventStreamStateData[i].name} id={eventStreamStateData[i]._id}>DELETE</p>\r\n                                </a>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    itemsEventStream.push(eventStreamitem)\r\n                }\r\n            }\r\n        }\r\n    return (\r\n        <div className=\"col13Main\">\r\n            <div className=\"rowWidthDiv1\">\r\n                <Link className=\"addBtnDivCss\" to=\"/mui/addEventStreams\">\r\n                    <Button className=\"addAccBtn addBtnMargin addBtnCss addBtnPACss\">\r\n                        <Link to=\"/mui/addEventStreams\">Add Event Streams</Link>\r\n                    </Button>\r\n                </Link>\r\n            </div>\r\n            <div className=\"rowWidthDiv row13\">\r\n                {itemsEventStream}\r\n            </div>\r\n            {this.state.showPopup ? (\r\n                <div className=\"popup\">\r\n                <div className=\"bx--modal-container modal-css\">\r\n                    <div className=\"bx--modal-header modalHeaderCss\">\r\n                    <p className=\"bx--modal-header__heading bx--type-beta modalHeaderTitlePadd\" id=\"modal-addWorkspace-heading\" >Do you want to delete EventStreams</p>\r\n                    <button className=\"bx--modal-close\" type=\"button\" data-modal-close aria-label=\"close modal\" > \r\n                        <Close32 className=\"iconEditSize\" onClick={this.cancelModal} />\r\n                    </button>\r\n                    </div>\r\n                    <div className=\"bx--modal-content modalContentCss\">\r\n                    <p className=\"modalContentPara\">About to delete eventStream <span className=\"modalSpanClass\">{eventStreamNameToDelete}</span>. Any saved data will also be deleted</p>\r\n                    <p className=\"modalContentPara\">This deletion cannot be undone.</p>\r\n                    <Form>\r\n                        <TextInput className=\"bx--text-input bx--text__input labelDeleteCSS\" id={eventStreamIdToDelete} name=\"delete\" defaultValue='' labelText=\"Please type DELETE to complete this action\" placeholder=\"Delete Event Stream\" onBlur={this.handleInputChange} />\r\n                    </Form>\r\n                    {\r\n                        this.state['resErrMsg'] && \r\n                        <small className=\"fontRed\">\r\n                        <b className=\"blgrperrorMsg\">{this.state.resErrMsg}</b>\r\n                        </small>\r\n                    }\r\n                    </div>\r\n                    <div className=\"bx--modal-content--overflow-indicator\"></div>\r\n                    <div className=\"bx--modal-footer\">\r\n                    <Button kind=\"secondary\" className=\"btnSACss\" onClick={this.cancelModal} >Cancel</Button>\r\n                    <Button kind='danger' onClick={this.deleteEventStream} type=\"submit\" className=\"btnSACss\" >Delete </Button>\r\n                    </div>\r\n                </div>\r\n                <span tabindex=\"0\"></span>\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n        \r\n    );\r\n  }\r\n}\r\nexport default withRouter(SAEventStreamsList);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Assistants\\SAAssistants\\SAAssistantsList.jsx",["1577","1578","1579","1580","1581"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Button,Form, TextInput  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { Close32 } from \"@carbon/icons-react\";\r\nimport { withRouter } from 'react-router-dom';\r\nclass SAAssistatnsList extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { \r\n            showPopup: false,\r\n            assistantsData: [],\r\n            assistantsId: '',\r\n            deleteConfirm: '',\r\n            toDeleteID: ''\r\n        };\r\n        this.loadAssistants = this.loadAssistants.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        trackPromise(\r\n            fetch(\"/mui/fetchAssistantsData\")\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((assistantsData) => {\r\n                this.setState({ assistantsData });\r\n            })\r\n        );\r\n    }\r\n    handleInputChange = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n    showModal = (e) => {\r\n        this.setState({\r\n            showPopup: true,\r\n        });\r\n        this.setState({resErrMsg: ''});\r\n        var assistantsToDel = e.target.getAttribute(\"data-name\");\r\n        this.setState({\r\n            assistantsId: e.target.id,\r\n            assistantsNameToDelete: assistantsToDel\r\n        })\r\n    };\r\n    cancelModal = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            showPopup: false,\r\n        });\r\n    };\r\n    deleteAssistants = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n            showPopup: false,\r\n        });\r\n        const assistantsData = {\r\n            deleteConfirm: this.state.delete,\r\n            toDeleteID: this.state.assistantsId\r\n        };\r\n        trackPromise(\r\n            fetch(\"/mui/deleteAssistants\", {\r\n              method: \"POST\",\r\n              headers: {\r\n                \"Content-type\": \"application/json\",\r\n              },\r\n              body: JSON.stringify(assistantsData),\r\n            })\r\n            .then((result) => {\r\n                if (result.status === 404 || result.status === 400)  {\r\n                    this.setState({\r\n                        showPopup: true,\r\n                    });\r\n                    result.json().then((object)=> {\r\n                    this.setState({resErrMsg: object.assistantsError});\r\n                    })\r\n                } else if (result.status === 409) {\r\n                    this.setState({\r\n                        showPopup: true,\r\n                    });\r\n                    result.json().then((object)=> {\r\n                        this.setState({resErrMsg: object.assistantsError});\r\n                    })\r\n                } else if(result.status == 200){\r\n                    e.preventDefault();\r\n                    this.setState({\r\n                        showPopup: false,\r\n                    });\r\n                    this.loadAssistants();\r\n                }\r\n           })\r\n        );\r\n    }\r\n    loadAssistants = () => {\r\n        this.props.history.push(\"/mui/assistants\");\r\n        trackPromise(\r\n            fetch('/mui/fetchAssistantsData')\r\n            .then(res => {\r\n                return res.json()\r\n            })\r\n            .then(assistantsData => { \r\n                this.setState({ assistantsData })\r\n            })\r\n        )\r\n    }\r\n    render() {\r\n        var stateSet = this.state;\r\n        var assistantsitem ='';\r\n        const itemsAssistants = [];\r\n        var assistantsIdToDelete = '';\r\n        var assistantsNameToDelete = '';\r\n        if(this.state.assistantsId){\r\n            assistantsIdToDelete = this.state.assistantsId\r\n            assistantsNameToDelete = this.state.assistantsNameToDelete\r\n        }\r\n        if(stateSet.assistantsData){\r\n            var assistantsFromState = stateSet.assistantsData;\r\n            var assistantsStateData = assistantsFromState.assistantsData;\r\n            var deleteItem = '';\r\n            if(assistantsStateData != undefined){\r\n                for(var i=0; i< assistantsStateData.length; i++){\r\n                    var redirectUrl = \"/mui/addAssistants?\"+assistantsStateData[i]._id;\r\n                    if(assistantsStateData[i].name != \"primary\"){\r\n                        deleteItem = <p className=\"actionItem\" data-name={assistantsStateData[i].name} id={assistantsStateData[i]._id}>DELETE</p>\r\n                    }else{\r\n                        deleteItem = '';\r\n                    }\r\n                    assistantsitem = (\r\n                        <div className=\"col3\">\r\n                            <div className=\"cardMain\">\r\n                                <p className=\"cardTitle\">{assistantsStateData[i].name}</p>\r\n                                <div className=\"actionDiv\">\r\n                                <Link  id={assistantsStateData[i]._id} to={redirectUrl} >\r\n                                    <p className=\"actionItem\" id={assistantsStateData[i]._id}>EDIT</p>\r\n                                </Link>\r\n                                <a className=\"deleteWorkspaceLink\" data-name={assistantsStateData[i].name} onClick={(e) => {this.showModal(e);}} id={assistantsStateData[i]._id} >\r\n                                    {deleteItem}\r\n                                </a>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    itemsAssistants.push(assistantsitem)\r\n                }\r\n            }\r\n        }\r\n    return (\r\n        <div className=\"col13Main\">\r\n            <div className=\"rowWidthDiv1\">\r\n                <Link className=\"addBtnDivCss\" to=\"/mui/addAssistants\">\r\n                    <Button className=\"addAccBtn addBtnMargin addBtnCss addBtnPACss\">\r\n                        <Link to=\"/mui/addAssistants\">Add Assistants</Link>\r\n                    </Button>\r\n                </Link>\r\n            </div>\r\n            <div className=\"rowWidthDiv row13\">\r\n                {itemsAssistants}\r\n            </div>\r\n            {this.state.showPopup ? (\r\n                <div className=\"popup\">\r\n                <div className=\"bx--modal-container modal-css\">\r\n                    <div className=\"bx--modal-header modalHeaderCss\">\r\n                    <p className=\"bx--modal-header__heading bx--type-beta modalHeaderTitlePadd\" id=\"modal-addWorkspace-heading\" >Do you want to delete Assistant?</p>\r\n                    <button className=\"bx--modal-close\" type=\"button\" data-modal-close aria-label=\"close modal\" > \r\n                        <Close32 className=\"iconEditSize\" onClick={this.cancelModal} />\r\n                    </button>\r\n                    </div>\r\n                    <div className=\"bx--modal-content modalContentCss\">\r\n                    <p className=\"modalContentPara\">About to delete Assistant <span className=\"modalSpanClass\">{assistantsNameToDelete}</span>. Any saved data will also be deleted</p>\r\n                    <p className=\"modalContentPara\">This deletion cannot be undone.</p>\r\n                    <Form>\r\n                        <TextInput className=\"bx--text-input bx--text__input labelDeleteCSS\" id={assistantsIdToDelete} name=\"delete\" defaultValue='' labelText=\"Please type DELETE to complete this action\" placeholder=\"Delete Assistant\" onBlur={this.handleInputChange} />\r\n                    </Form>\r\n                    {\r\n                        this.state['resErrMsg'] && \r\n                        <small className=\"fontRed\">\r\n                        <b className=\"blgrperrorMsg\">{this.state.resErrMsg}</b>\r\n                        </small>\r\n                    }\r\n                    </div>\r\n                    <div className=\"bx--modal-content--overflow-indicator\"></div>\r\n                    <div className=\"bx--modal-footer\">\r\n                    <Button kind=\"secondary\" className=\"btnSACss\" onClick={this.cancelModal} >Cancel</Button>\r\n                    <Button kind='danger' onClick={this.deleteAssistants} type=\"submit\" className=\"btnSACss\" >Delete </Button>\r\n                    </div>\r\n                </div>\r\n                <span tabindex=\"0\"></span>\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n\r\n    );\r\n  }\r\n}\r\nexport default withRouter(SAAssistatnsList);","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\Assistants\\SAAssistants\\SAAssistatnsBreadcrump.jsx",["1582","1583","1584","1585"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SAAssistatnsBreadCrump extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"breadCrumpDiv stickyDiv\">\r\n            <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/home\">Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/superAdmin\">Admin</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem isCurrentPage>\r\n                    <Link to=\"/mui/assistants\">Assistants</Link>\r\n                </BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <h2 className=\"headerText\">Assistants</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default SAAssistatnsBreadCrump;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SACommands\\CommandsBreadCrumb.jsx",["1586"],"import React, { Component } from \"react\";\r\nimport { Breadcrumb, BreadcrumbItem } from \"carbon-components-react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nclass CommandsBreadCrumb extends Component {\r\n  state = {};\r\n  render() {\r\n    const { links, header } = this.props;\r\n    return (\r\n      <div className=\"breadCrumpDiv\">\r\n        <Breadcrumb>\r\n          {Object.entries(links).map(([title, link], i, arr) => (\r\n            <BreadcrumbItem key={i} isCurrentPage={i == arr.length - 1}>\r\n              <Link to={link}>{title}</Link>\r\n            </BreadcrumbItem>\r\n          ))}\r\n          {/* <BreadcrumbItem>\r\n            <Link to=\"/mui/home\">Home</Link>\r\n          </BreadcrumbItem>\r\n          <BreadcrumbItem isCurrentPage>\r\n            <Link to=\"/mui/commands\">Commands</Link>\r\n          </BreadcrumbItem> */}\r\n        </Breadcrumb>\r\n        <h2 className=\"headerText\">{header}</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(CommandsBreadCrumb);\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ServiceManager\\DeleteRuleModal.jsx",["1587","1588"],"import React, { Component } from 'react'\r\nimport {\r\n    Button,\r\n    ComposedModal,\r\n    Form,\r\n    ModalBody,\r\n    ModalFooter,\r\n    TextInput,\r\n  } from \"carbon-components-react\";\r\n\r\nexport default class DeleteRuleModal extends Component {\r\n    closeModal () {\r\n        this.props.onDeleteCancel();\r\n    }\r\n    render() {\r\n        return (\r\n            <ComposedModal open={this.props.isModalOpen} onClose={() => this.props.onDeleteCancel()}>\r\n                <ModalBody className=\"my-2 py-2\" hasScrollingContent={true}>\r\n                    <p className=\"\" >\r\n                    Are you sure you want to delete this Rule ?\r\n                    </p>\r\n                </ModalBody>\r\n                <ModalFooter secondaryButtonText=\"Cancel\">\r\n                    <Button kind=\"danger\" onClick={() => this.props.onDeleteConfrim()}>\r\n                        Delete\r\n                    </Button>\r\n                </ModalFooter>\r\n      </ComposedModal>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\groups\\modals\\DeleteModal.jsx",["1589","1590"],"import React, { Component } from 'react'\r\nimport {\r\n    Button,\r\n    ComposedModal,\r\n    Form,\r\n    ModalBody,\r\n    ModalFooter,\r\n    TextInput,\r\n  } from \"carbon-components-react\";\r\n\r\nexport default class DeleteModal extends Component {\r\n    closeModal () {\r\n        this.props.onDeleteCancel();\r\n    }\r\n    render() {\r\n        return (\r\n            <ComposedModal open={this.props.isModalOpen} onClose={() => this.props.onDeleteCancel()}>\r\n                <ModalBody className=\"my-2 py-2\" hasScrollingContent={true}>\r\n                    <p className=\"\" >\r\n                    Are you sure you want to delete the {this.props.modalText} ?\r\n                    </p>\r\n                </ModalBody>\r\n                <ModalFooter secondaryButtonText=\"Cancel\">\r\n                    <Button kind=\"danger\" onClick={() => this.props.onDeleteConfrim()}>\r\n                        Delete\r\n                    </Button>\r\n                </ModalFooter>\r\n      </ComposedModal>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\groups\\modals\\CreateUserModal.jsx",["1591","1592","1593","1594","1595"],"import {\r\n    Button,\r\n    ComposedModal,\r\n    Form,\r\n    ModalBody,\r\n    ModalFooter,\r\n    TextInput,\r\n  } from \"carbon-components-react\";\r\n  import React, { Component } from \"react\";\r\n  import { Close32 } from \"@carbon/icons-react\";\r\n  import validator from \"validator\";\r\n  \r\n  export default class CreateUserModal extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { \r\n            email: '',\r\n            invalid_email:''\r\n        };\r\n    }\r\n    closeModal() {\r\n        this.setState({email: ''},() => {\r\n          this.setState({invalid_email:''},()=>{\r\n            this.props.onCloseModal();\r\n          });\r\n        });\r\n    }\r\n  \r\n    addUser() {\r\n      let isValid = true;\r\n      let userEmailList = [];\r\n      if(this.state.email.indexOf(',')> -1){\r\n        userEmailList = this.state.email.split(',');\r\n      } else {\r\n        userEmailList.push(this.state.email);\r\n      }\r\n\r\n      for (const userEmail of userEmailList) {\r\n        if(!this.validateUserEmail(userEmail.trim())){\r\n          this.setState({\r\n                invalid_email:\r\n                  \"Invalid email or email domain.\",\r\n              });\r\n          isValid = false;\r\n          return;\r\n        }\r\n      }\r\n      if(isValid){\r\n        this.props.onSaveUser(this.state.email);\r\n        this.setState({email: ''});\r\n      }\r\n    }\r\n    handleInputChange = (e) => {\r\n      e.preventDefault();\r\n      // Validations\r\n      if (\r\n        (e.target.value &&\r\n          e.target.value.includes(\"script\") &&\r\n          e.target.value.includes(\"<\")) ||\r\n        e.target.value.includes(\">\")\r\n      ) {\r\n        this.setState({\r\n          [\"invalid_\" + e.target.name]: \"Invalid Input.\",\r\n        });\r\n        return;\r\n      }\r\n      if (\r\n        e.target.value &&\r\n        e.target.value.match(/[!<>#%]/)\r\n      ) {\r\n        this.setState({\r\n          [\"invalid_\" + e.target.name]:\r\n            \"Email should not contain !<>#% Characters.\",\r\n        });\r\n        return;\r\n      }\r\n      // Validate User email for kyndryl Domain\r\n      const enterprises = [\"kyndryl.com\", \"onmicrosoft.com\" ];\r\n      let splitUser = e.target.value.split(\"@\");\r\n      const matchEnterprises = enterprises.some(enterprise => \r\n        splitUser[1].toLowerCase().includes(enterprise)\r\n      );\r\n      // if (splitUser && splitUser[1].toLowerCase() !== \"kyndryl.com\") {\r\n      if (splitUser && !matchEnterprises) {\r\n        this.setState({\r\n          [\"invalid_\" + e.target.name]:\r\n            \"Invalid email domain.\",\r\n        });\r\n        return;\r\n      }else {\r\n        this.setState({\r\n          [\"invalid_\" + e.target.name]: undefined,\r\n        });\r\n      }\r\n      let userList = [];\r\n      if(e.target.value.indexOf(',')> -1){\r\n        userList = e.target.value.split(',');\r\n      } else {\r\n        userList.push(e.target.value);\r\n      }\r\n    // let userList = e.target.value.split(',');\r\n    for (const userEmail of userList) {\r\n      if(!this.validateUserEmail(userEmail.trim())){\r\n        this.setState({\r\n              [\"invalid_\" + e.target.name]:\r\n                \"Invalid email or email domain.\",\r\n            });\r\n        return;\r\n      } else {\r\n        this.setState({\r\n          [\"invalid_\" + e.target.name]:''\r\n        });\r\n      }\r\n    }\r\n    // let splitUser = e.target.value.split(\"@\");\r\n    // if (splitUser && splitUser[1].toLowerCase() !== \"kyndryl.com\") {\r\n    //   this.setState({\r\n    //     [\"invalid_\" + e.target.name]:\r\n    //       \"Invalid email domain.\",\r\n    //   });\r\n    //   return;\r\n    // }else {\r\n    //   this.setState({\r\n    //     [\"invalid_\" + e.target.name]: undefined,\r\n    //   });\r\n    // }\r\n      this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n\r\n    validateUserEmail = (userEmail) => {\r\n      let isValidEmail = true;\r\n      let allowedDomains = [\"kyndryl.com\", \"onmicrosoft.com\" ];\r\n      let splitUser = userEmail.split('@');\r\n      const matchEnterprises = allowedDomains.some(enterprise => \r\n        splitUser[1].toLowerCase().includes(enterprise)\r\n      );\r\n      if(userEmail && !validator.isEmail(userEmail)){\r\n        isValidEmail = false;\r\n      } else if (splitUser && !matchEnterprises) {\r\n        isValidEmail = false;\r\n      }\r\n      return isValidEmail;\r\n    }\r\n    checkValidEmail = ((userList)=>{\r\n      const emailList = userList.split(',');\r\n      let isValid = true;\r\n      for (const userEmail of emailList) {\r\n        if(!this.validateUserEmail(userEmail.trim())){\r\n          isValid = false;\r\n        }\r\n      }\r\n      return isValid;\r\n    });\r\n    render() {\r\n      const { isModalOpen } = this.props;\r\n      var email = this.state.email;\r\n      return(\r\n            <div>\r\n                {this.props.isModalOpen ? (\r\n                    <div className=\"popup\">\r\n                    <div className=\"bx--modal-container modal-css\">\r\n                        <div className=\"bx--modal-header modalHeaderCss\">\r\n                            <button className=\"bx--modal-close\" type=\"button\" data-modal-close aria-label=\"close modal\" > \r\n                                <Close32 className=\"iconEditSize\" onClick={() => this.closeModal()} />\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"bx--modal-content\">\r\n                            <Form>\r\n                                <TextInput\r\n                                    labelText={\r\n                                        <>\r\n                                        Email Address <b style={{ color: \"red\" }}>*</b>\r\n                                        </>\r\n                                    }\r\n                                    placeholder=\"Email Address\"\r\n                                    name=\"email\"\r\n                                    className=\"modalText\"\r\n                                    onChange={(e) => this.handleInputChange(e)}\r\n                                    defaultValue=''\r\n                                    onKeyDown={(e)=>{\r\n                                      if(e.key === 'Enter'){\r\n                                        e.preventDefault();\r\n                                        if(this.checkValidEmail(e.target.value)){\r\n                                          this.addUser();\r\n                                        }\r\n                                      }\r\n                                    }}\r\n                                    required\r\n                                />\r\n                                {/* <TextInput className=\"bx--text-input bx--text__input labelDeleteCSS\" id={assistantsIdToDelete} name=\"delete\" defaultValue='' labelText=\"Please type DELETE to complete this action\" placeholder=\"Delete Assistant\" onBlur={this.handleInputChange} /> */}\r\n                            </Form>\r\n                            {this.state[\"invalid_email\"] && (\r\n                                <small className=\"danger\">\r\n                                <b className=\"errorMsg\">{this.state[\"invalid_email\"]}</b>\r\n                                </small>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"bx--modal-content--overflow-indicator\"></div>\r\n                        <div className=\"bx--modal-footer\">\r\n                        <Button kind=\"secondary\" className=\"btnSACss\" onClick={() => this.closeModal()}>Cancel</Button>\r\n                        <Button kind='primary' onClick={() => this.addUser()} type=\"submit\" className=\"btnSACss\" >Add </Button>\r\n                        </div>\r\n                    </div>\r\n                    <span tabindex=\"0\"></span>\r\n                    </div>\r\n                 ) : null}\r\n            </div>\r\n      );\r\n    }\r\n  }\r\n  ","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\groups\\UserList.jsx",["1596"],"import {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableHeader,\r\n    TableRow,\r\n  } from \"carbon-components-react\";\r\n  import React, { Component } from \"react\";\r\n  import ReactDOM from \"react-dom\";\r\n  // import DeleteGroupModal from \"./modals/DeleteGroupModal\";\r\n  import { RowDelete32 , TrashCan32} from \"@carbon/icons-react\";\r\n  import DeleteModal from \"./modals/DeleteModal\";\r\n  import { UserTypes } from \"./ChatopsGroupUtil\";\r\n  \r\n  export default class UserList extends Component {\r\n    headers = [\"Email Address\", \"\"];\r\n    state = {\r\n      isDeleteModalOpen: false,\r\n      userToDelete: \"\",\r\n      userType: \"\",\r\n    };\r\n    openDeleteModal = (userToDelete) => {\r\n      this.setState({ isDeleteModalOpen: true, userToDelete });\r\n    };\r\n  \r\n    onDeletModalCancel = () => {\r\n      this.setState({ isDeleteModalOpen: false });\r\n    };\r\n    onDeletModalConfirm = () => {\r\n      console.log(\"Email id  to be delete is : \", this.state.userToDelete);\r\n      this.setState({ isDeleteModalOpen: false });\r\n      //  pass this user email to modify the list for deleteion\r\n      this.props.deleteUsers(this.state.userToDelete, this.state.userType);\r\n    };\r\n  \r\n    componentDidMount() {\r\n      this.setState({ user: this.props.users, userType: this.props.userType });\r\n    }\r\n    render() {\r\n      let deleteRow = (\r\n        <TrashCan32 className=\"iconEditSize editIconPA\" aria-label=\"Delete\" />\r\n      );\r\n      const delete__enabled = {\r\n        cursor: \"pointer\",\r\n      };\r\n  \r\n      const delete__disabled = {\r\n        cursor: \"not-allowed\",\r\n        opacity: \"50%\",\r\n        hover: \"none\",\r\n      };\r\n  \r\n      let deleteStyle;\r\n  \r\n      switch (this.props.loggedInUserType) {\r\n        case UserTypes.owner:\r\n          if(this.props.users.length <= 1 && this.props.tab === UserTypes.owner){\r\n            deleteStyle = delete__disabled ;\r\n          }else {\r\n            deleteStyle = delete__enabled\r\n          }\r\n          \r\n          break;\r\n        case UserTypes.admin:\r\n          if (\r\n            this.state.userType === UserTypes.admin ||\r\n            this.state.userType === UserTypes.member\r\n          ) {\r\n            deleteStyle = delete__enabled;\r\n          }else{\r\n            deleteStyle = delete__disabled\r\n          }\r\n          break;\r\n        case UserTypes.member:\r\n          deleteStyle = delete__disabled\r\n          break;\r\n  \r\n        default:\r\n          deleteStyle = delete__disabled\r\n          break;\r\n      }\r\n      let rows = this.props.users?.map((user) => {\r\n        return (\r\n          <TableRow key={user}>\r\n            <TableCell>{user}</TableCell>\r\n            <TableCell style={{ width: \"25%\" }}>\r\n              <div\r\n                onClick={() => this.openDeleteModal(user)}\r\n                style={deleteStyle}\r\n              >\r\n                {deleteRow}\r\n              </div>\r\n            </TableCell>\r\n          </TableRow>\r\n        );\r\n      });\r\n      return (\r\n        <div>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                {this.headers.map((header) => (\r\n                  <TableHeader key={header}>{header}</TableHeader>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>{rows}</TableBody>\r\n          </Table>\r\n          {!this.props.users.length && (\r\n            <div className=\"App\">\r\n              <p>No records found</p>\r\n            </div>\r\n          )}\r\n          {typeof document === \"undefined\"\r\n            ? null\r\n            : ReactDOM.createPortal(\r\n                <DeleteModal\r\n                  isModalOpen={this.state.isDeleteModalOpen}\r\n                  onDeleteCancel={() => this.onDeletModalCancel()}\r\n                  onDeleteConfrim={() => this.onDeletModalConfirm()}\r\n                  modalText={`User ${this.state.userToDelete}`}\r\n                />,\r\n                document.body\r\n              )}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  ","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\Webhooks\\WebhookBreadCrump.jsx",[],"C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\Webhooks\\Webhooks.jsx",["1597"],"import React, {useState, useEffect} from 'react';\r\nimport { \r\n    Table, TableBody, TableHead, TableHeader, TableRow, Button, TooltipIcon, Toggle\r\n} from \"carbon-components-react\";\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport \"react-datetime/css/react-datetime.css\";\r\nimport LazyLoad from \"react-lazyload\";\r\nimport { Copy16, Checkmark16, UserMultiple16 } from \"@carbon/icons-react\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\n\r\n\r\nconst Webhooks=(props) => {\r\n    const webhookInfo = props.data;\r\n    const [error, setErrorMessage] = useState({});\r\n    const [isCopied, setIsCopied] = useState({});\r\n    const [webhookList, setWebhookList] = useState([]);\r\n    const { id } = useParams();\r\n    let btnRedirect='';\r\n    if(webhookInfo){\r\n        if(webhookInfo.accountID !== \"\"){\r\n            btnRedirect = \"/mui/addWebhook/\"+webhookInfo.accountID\r\n        }\r\n        if(webhookInfo.serviceID !== \"\"){\r\n            btnRedirect = \"/mui/addWebhook/\"+webhookInfo.serviceID\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        setWebhookList(webhookInfo.tableData);\r\n    }, [webhookInfo.tableData])\r\n    const headers = [\r\n        \"Webhook Name\",\r\n        \"Webhook URL\",\r\n        \"\",\r\n        \"Tool Name\",\r\n        \"Channel Id\",\r\n        \"WorkSpace Name\",\r\n        // \"Channel Auto Create\",\r\n        // \"Allow Updates\",\r\n        \"Assigned Members\",\r\n        \"Enable/Disable\",\r\n    ];\r\n    const onCopied=(copyText, uniqueId)=> {\r\n        navigator.clipboard.writeText(copyText);\r\n        setIsCopied( prevCopied => {\r\n            return {\r\n                ...prevCopied,\r\n                [uniqueId]:true,\r\n            }\r\n        });\r\n        setTimeout(()=>{\r\n            setIsCopied( prevCopied => {\r\n                return {\r\n                    ...prevCopied,\r\n                    [uniqueId]:false,\r\n                };\r\n            });\r\n        }, 1000);\r\n    }\r\n    const getWebhooks=()=> {\r\n        trackPromise(\r\n            fetch(\"/mui/getWebhook/\"+id)\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((webhookData) => {\r\n                setWebhookList(webhookData.dbData.tableData);\r\n            })\r\n            );\r\n    };\r\n    const handleEnableDisable=(checked, id)=>{\r\n        console.log(checked);\r\n        const webhooks = {\r\n            id : id,\r\n            isEnabled: checked,\r\n        }\r\n        trackPromise(\r\n            fetch('/mui/webhooks' , {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify(webhooks)\r\n            })\r\n            .then((result) => {\r\n                if (result.status === 404 || result.status === 400 || result.status === 500)  {\r\n                    result.json().then((object)=> {\r\n                        setErrorMessage({resErrMsg: object.webhookError});\r\n                    })\r\n                } else if (result.status === 409) {\r\n                    result.json().then((object)=> {\r\n                        setErrorMessage({errorMessage: object.webhookError});\r\n                    })\r\n                } else if(result.status === 200){\r\n                    getWebhooks();\r\n                }\r\n            })\r\n            .catch(err => { \r\n                setErrorMessage({errorMessage: err.message});\r\n            })\r\n        );\r\n    }\r\n    return (\r\n        <LazyLoad>\r\n            <div>\r\n            <Link class=\"addBtnPACss\" to={btnRedirect}>\r\n                <Button className=\"addAccBtn addBtnCss addBtnPACss btnMarginNew\">\r\n                    <Link to={btnRedirect}>Add Webhook</Link>\r\n                </Button>\r\n            </Link>\r\n                <Table style={{margin: \"0 0 4% 0\"}}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                        {headers.map((header) => (\r\n                            <TableHeader key={header}>{header}</TableHeader>\r\n                        ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {webhookList && webhookList.map((value) => {\r\n                            let assignedMembers = \"\";\r\n                             assignedMembers = value.assignedMembers.join(', ');\r\n                            return (\r\n                                <tr key={value.uniqueId}>\r\n                                    <td>{value.webhookName}</td>\r\n                                    <td>{value.webhookURL}\r\n                                    </td>\r\n                                    <td>{ !isCopied[value.uniqueId] ? \r\n                                    <TooltipIcon \r\n                                    renderIcon={Copy16} \r\n                                    onClick={() => {onCopied(value.webhookURL, value.uniqueId)}} \r\n                                    tooltipText=\"Click here to copy the URL\"\r\n                                    style={{marginLeft:\"10px\"}}\r\n                                    />\r\n                                  :\"\"\r\n                                    }\r\n                                   { isCopied[value.uniqueId] ?\r\n                                   <TooltipIcon \r\n                                    renderIcon={Checkmark16}\r\n                                    style={{marginLeft:\"10px\", fill:\"green\"}}\r\n                                    tooltipText=\"Copied the URL\"\r\n                                   />\r\n                                   : \"\"}</td>\r\n                                    <td>{value.toolName}</td>\r\n                                    <td>{value.channelId}</td>\r\n                                    <td>{value.workSpaceName}</td>\r\n                                    {/* <td>{value.ChannelAutoCreate?\"Yes\":\"No\"}</td>\r\n                                    <td>{value.allowUpdates?\"Yes\":\"No\"}</td> */}\r\n                                    <td>\r\n                                        <TooltipIcon \r\n                                            renderIcon={UserMultiple16} \r\n                                            direction=\"bottom\" \r\n                                            tabIndex={0} \r\n                                            tooltipText={assignedMembers}\r\n                                            >\r\n                                        </TooltipIcon>\r\n                                    </td>\r\n                                    <td>\r\n                                    <Toggle\r\n                                        labelText=\"\"\r\n                                        size=\"sm\"\r\n                                        toggled={value.isEnabled?true:false}\r\n                                        labelA='Disabled'\r\n                                        labelB='Enabled'\r\n                                        id={value.uniqueId}\r\n                                        onToggle={(checked)=>handleEnableDisable(checked,value._id)}\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </div>\r\n        </LazyLoad>\r\n    );\r\n}\r\n\r\nexport default Webhooks;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\DailyReport\\DRBreadCrumb.jsx",["1598","1599","1600","1601"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nclass DRBreadCrump extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = (\r\n            {\r\n                data: '',\r\n            }\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        const search = this.props.location.search;\r\n        const recordId = new URLSearchParams(search).get(\"id\");\r\n        this.setState({recordId: recordId})\r\n        trackPromise(\r\n            fetch(\"/mui/getCIOUserData?id=\"+recordId)\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((cioUserData) => {\r\n                var dateFormat = cioUserData.cioUserData.weekDayName;\r\n                this.setState({ date:dateFormat });\r\n            })\r\n        );\r\n    }\r\n  render() {\r\n      var date = this.state.date;\r\n    return (\r\n        <div className=\"breadCrumpDiv headerDiv sectionMargin  mainMargin\">\r\n            <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/home\">Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem isCurrentPage>\r\n                    <Link to=\"/mui/dailyReporting\">Report</Link>\r\n                </BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <h2 className=\"headerText\">Daily Report ({date})</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(DRBreadCrump);","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\DailyReport\\DRForm.jsx",["1602","1603","1604","1605","1606","1607","1608","1609","1610","1611","1612","1613","1614","1615","1616","1617","1618","1619","1620","1621","1622","1623","1624","1625","1626","1627","1628","1629","1630","1631","1632","1633","1634","1635","1636","1637","1638","1639","1640","1641","1642","1643","1644","1645","1646","1647","1648","1649","1650","1651","1652","1653","1654","1655","1656","1657","1658","1659","1660","1661","1662","1663"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport {  Button,UnorderedList, ListItem, Form, TextInput, TextArea, Select, SelectItem  } from 'carbon-components-react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { TrashCan32 } from \"@carbon/icons-react\";\r\nimport DRForm from './DRForm';\r\nimport LazyLoad from \"react-lazyload\";\r\nimport { validate } from '../../validation/validate.js';\r\nclass DRHome extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = (\r\n            {\r\n                impactingEvent1: false,\r\n                disableBtn: false\r\n            }\r\n        );\r\n        this.state.filterText = \"\";\r\n        this.state.id = 1;\r\n        this.state.products = [\r\n        ];\r\n        this.state.filterTextCE = \"\";\r\n        this.state.escalations = [\r\n        ];\r\n    }\r\n    componentDidMount() {\r\n        const search = this.props.location.search;\r\n        const recordId = new URLSearchParams(search).get(\"id\");\r\n        this.setState({recordId: recordId})\r\n        trackPromise(\r\n            fetch(\"/mui/getCIOUserData?id=\"+recordId)\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((cioUserData) => {\r\n              var countryData = [];\r\n              if(cioUserData.cioUserData.CIOUserData){\r\n                countryData = Object.values(cioUserData.cioUserData.CIOUserData.geoCountryGrp);\r\n              }else{                \r\n                countryData = cioUserData.cioUserData.countryListToUI.split(\",\");\r\n              }   \r\n                var countryDataArr = countryData.flat();\r\n                var formOptionCountry = '';\r\n                const itemsCountry = [];\r\n                for (var i = 0; i < countryDataArr.length; i++) {\r\n                    formOptionCountry = (\r\n                      <option\r\n                        className=\"bx--select-option\"\r\n                        defaultValue={countryDataArr[i]}\r\n                      >\r\n                        {countryDataArr[i]}\r\n                      </option>\r\n                    );\r\n                    itemsCountry.push(formOptionCountry);\r\n                }\r\n                this.setState({ cioUserData:cioUserData, itemsCountry: itemsCountry ,countryData:countryData });\r\n            })\r\n        );\r\n    }\r\n    handleUserInputCE(filterTextCE) {\r\n        this.setState({filterTextCE: filterTextCE});\r\n      };\r\n      handleRowDelCE(escalation) {\r\n        var index = this.state.escalations.indexOf(escalation);\r\n        this.state.escalations.splice(index, 1);\r\n        this.setState(this.state.escalations);\r\n      };\r\n    \r\n      handleAddEventCE(evt) {\r\n        var id = (+ new Date() + Math.floor(Math.random() * 999999)).toString(36);\r\n        var escalation = {\r\n            id: id,\r\n            country: '',\r\n            customers: '',\r\n            accountTeamContact: '',\r\n            CEstatus: '',\r\n            CEsummary: '',\r\n            ksatHelp: '',\r\n            incidentDeacription: '',\r\n            ksatContactInfo: '',\r\n            // TierofIncident: ''\r\n        }\r\n        this.state.escalations.push(escalation);\r\n        this.setState(this.state.escalations);\r\n    \r\n      }\r\n    \r\n      handleEscalationTable(evt) {\r\n        var itemCE = {\r\n          id: evt.target.id,\r\n          name: evt.target.name,\r\n          value: evt.target.value\r\n        };\r\n    var escalations = this.state.escalations.slice();\r\n      var newescalations = escalations.map(function(escalation) {\r\n    \r\n        for (var key in escalation) {\r\n          if (key == itemCE.name && escalation.id == itemCE.id) {\r\n            escalation[key] = itemCE.value;\r\n    \r\n          }\r\n        }\r\n        return escalation;\r\n      });\r\n        this.setState({escalations:newescalations});\r\n      };\r\n    handleUserInput(filterText) {\r\n        this.setState({filterText: filterText});\r\n      };\r\n      handleRowDel(product) {\r\n        var index = this.state.products.indexOf(product);\r\n        this.state.products.splice(index, 1);\r\n        this.setState(this.state.products);\r\n      };\r\n    \r\n      handleAddEvent(evt) {\r\n        var id = ( + new Date() + Math.floor(Math.random() * 999999)).toString(36);\r\n        var product = {\r\n            id: id,\r\n            country: '',\r\n            customers: '',\r\n            accountTeamContact: '',\r\n            mistatus: '',\r\n            misummary: '',\r\n            ksatHelp: '',\r\n            incidentDeacription: '',\r\n            ksatContactInfo: '',\r\n            tierOfIncident: ''\r\n        }\r\n        this.state.products.push(product);\r\n        this.setState(this.state.products);\r\n    \r\n      }\r\n      \r\n      handleProductTable(evt) {\r\n        var item = {\r\n          id: evt.target.id,\r\n          name: evt.target.name,\r\n          value: evt.target.value\r\n        };\r\n        var products = this.state.products.slice();\r\n        var newProducts = products.map(function(product) {\r\n    \r\n        for (var key in product) {\r\n          if (key == item.name && product.id == item.id) {\r\n            product[key] = item.value;\r\n    \r\n          }\r\n        }\r\n        return product;\r\n      });\r\n        this.setState({products:newProducts});\r\n      };\r\n    handleInputChange = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n    handleCharacterChange = (e) => {\r\n        var maxLength = e.target.getAttribute(\"maxlength\")\r\n        if(e.target.name == \"significantEventDescription\"){\r\n            if( (maxLength - (e.target.value.length) - 2) < 0 ){\r\n                this.setState({[\"maxLengthLimit_\" + e.target.name]: \"Characters left: 0\"})\r\n            }else{\r\n                this.setState({[\"maxLengthLimit_\" + e.target.name]: \"Characters left: \" + (maxLength - (e.target.value.length) - 2)})\r\n            }\r\n            if(e.target.value.length >= 1501){\r\n                this.setState({disableBtnSE: true})\r\n                this.setState({[\"maxLengthErr_\" + e.target.name]: \"You have reached the maximum limit of characters allowed\"})\r\n            }else{\r\n                this.setState({disableBtnSE: false})\r\n                this.setState({[\"maxLengthErr_\" + e.target.name]: \"\"})\r\n            }\r\n        }\r\n        if(this.state?.escalations[0]?.ksatHelp == \"yes\"){\r\n            if(e.target.name == \"incidentDeacription\"){\r\n                if (e.target.getAttribute(\"data-value\") == \"ceData\"){\r\n                    if( maxLength - (e.target.value.length) - 1 < 0 ){\r\n                        this.setState({[\"maxLengthLimit_\" + e.target.name]: \"Characters left: 0\"})\r\n                    }else{\r\n                        this.setState({[\"maxLengthLimit_\" + e.target.name]: \"Characters left: \" + (maxLength - (e.target.value.length) - 2)})\r\n                    }\r\n                    // this.setState({[\"maxLengthLimit_\" + e.target.name+ \"CE\"]: \"Characters left: \" + (maxLength - e.target.value.length)})\r\n                    if(e.target.value.length >= 1501){\r\n                        this.setState({disableBtnKSATCE: true})\r\n                        this.setState({[\"maxLengthErr_\" + e.target.name + \"CE\"]: \"You have reached the maximum limit of characters allowed for Incident Description\"})\r\n                    }else{\r\n                        this.setState({disableBtnKSATCE: false})\r\n                        this.setState({[\"maxLengthErr_\" + e.target.name + \"CE\"]: \"\"})\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(this.state?.products[0]?.ksatHelp == \"yes\"){\r\n            if(e.target.name == \"incidentDeacription\" && e.target.value){\r\n                if (e.target.getAttribute(\"data-value\") == \"miData\"){\r\n                    if( maxLength - (e.target.value.length) - 1 < 0 ){\r\n                        this.setState({[\"maxLengthLimit_\" + e.target.name]: \"Characters left: 0\"})\r\n                    }else{\r\n                        this.setState({[\"maxLengthLimit_\" + e.target.name]: \"Characters left: \" + (maxLength - (e.target.value.length) - 2)})\r\n                    }\r\n                    // this.setState({[\"maxLengthLimit_\" + e.target.name+ \"MI\"]: \"Characters left: \" + (maxLength - e.target.value.length)})\r\n                    if(e.target.value.length >= 1501){\r\n                        this.setState({disableBtnKSATMI: true})\r\n                        this.setState({[\"maxLengthErr_\" + e.target.name + \"MI\"]: \"You have reached the maximum limit of characters allowed for Incident Description\"})\r\n                    }else{\r\n                        this.setState({disableBtnKSATMI: false})\r\n                        this.setState({[\"maxLengthErr_\" + e.target.name + \"MI\"]: \"\"})\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(e.target.name == \"misummary\"){\r\n            if( maxLength - (e.target.value.length) - 1 < 0 ){\r\n                this.setState({[\"maxLengthLimit_\" + e.target.name]: \"Characters left: 0\"})\r\n            }else{\r\n                this.setState({[\"maxLengthLimit_\" + e.target.name]: \"Characters left: \" + (maxLength - (e.target.value.length) - 2)})\r\n            }\r\n            // this.setState({[\"maxLengthLimit_\" + e.target.name]: \"Characters left: \" + (maxLength - e.target.value.length)})\r\n            if(e.target.value.length >= 1501){\r\n                this.setState({disableBtnMISummary: true})\r\n                this.setState({[\"maxLengthErr_\" + e.target.name]: \"You have reached the maximum limit of characters allowed for MI Summary\"})\r\n            }else{\r\n                this.setState({disableBtnMISummary: false})\r\n                this.setState({[\"maxLengthErr_\" + e.target.name]: \"\"})\r\n            }\r\n        }\r\n        \r\n        if(e.target.name == \"CEsummary\"){\r\n            if( maxLength - (e.target.value.length) - 1 < 0 ){\r\n                this.setState({[\"maxLengthLimit_\" + e.target.name]: \"Characters left: 0\"})\r\n            }else{\r\n                this.setState({[\"maxLengthLimit_\" + e.target.name]: \"Characters left: \" + (maxLength - (e.target.value.length) - 2)})\r\n            }\r\n            // this.setState({[\"maxLengthLimit_\" + e.target.name]: \"Characters left: \" + (maxLength - e.target.value.length)})\r\n            if(e.target.value.length >= 1501){\r\n                this.setState({disableBtnCESummary: true})\r\n                this.setState({[\"maxLengthErr_\" + e.target.name]: \"You have reached the maximum limit of characters allowed for Client Escalation\"})\r\n            }else{\r\n                this.setState({disableBtnCESummary: false})\r\n                this.setState({[\"maxLengthErr_\" + e.target.name]: \"\"})\r\n            }\r\n        }\r\n        if(e.target.name == \"incidentDescriptionSE\"){\r\n            if( maxLength - (e.target.value.length) - 2 < 0 ){\r\n                this.setState({[\"maxLengthLimit_\" + e.target.name]: \"Characters left: 0\"})\r\n            }else{\r\n                this.setState({[\"maxLengthLimit_\" + e.target.name]: \"Characters left: \" + (maxLength - (e.target.value.length) - 2)})\r\n            }\r\n            // this.setState({[\"maxLengthLimit_\" + e.target.name]: \"Characters left: \" + (maxLength - e.target.value.length)})\r\n            if(e.target.value.length >= 1501){\r\n                this.setState({disableBtnKSATSE: true})\r\n                this.setState({[\"maxLengthErr_\" + e.target.name]: \"You have reached the maximum limit of characters allowed\"})\r\n            }else{\r\n                this.setState({disableBtnKSATSE: false})\r\n                this.setState({[\"maxLengthErr_\" + e.target.name]: \"\"})\r\n            }\r\n        }\r\n\r\n    };\r\n    handleSelectImapactingevent = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n        if(e.target.value == \"Yes\"){\r\n            this.setState({significantEvent: \"No\"})\r\n            this.setState({ksatHelpForSE: \"No\"})\r\n            this.setState({impactingEvent: \"Yes\"})\r\n        }else{\r\n            this.setState({impactingEvent: \"No\"})\r\n            this.setState({clientEscalation: \"\"})\r\n            this.setState({majorIncident: \"\"})\r\n        }\r\n    };\r\n    handleSelectMI = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n        if(e.target.value == \"Yes\"){\r\n            this.setState({clientEscalation: \"no\"})\r\n        }else{\r\n            this.setState({clientEscalation: \"\"})\r\n        }\r\n    };\r\n    handleSelectCEWithMI = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n        if(e.target.value == \"yes\"){\r\n            this.setState({clientEscalation : \"yes\"})\r\n        }\r\n    };\r\n    handleSelectCE = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n        if(e.target.value == \"yes\"){\r\n            this.setState({clientEscalation : \"yes\"})\r\n        }\r\n    };\r\n    handleSelectSE = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            maxLengthLimit_significantEventDescription:\"\",\r\n            maxLengthLimit_incidentDescriptionSE: \"\"\r\n        });\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n        if(e.target.value == \"Yes\"){\r\n            this.setState({significantEvent: \"Yes\"})\r\n        }else{\r\n            this.setState({significantEvent: \"No\"})\r\n            this.setState({clientEscalation: \"\"})\r\n            this.setState({majorIncident: \"\"})\r\n            \r\n        }\r\n    };\r\n    handleSelectKSATSE = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n    updateValue = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n    formSubmit= (e) => {\r\n        e.preventDefault();\r\n        var dataToSave = {\r\n            impactingEvent: this.state.impactingEvent,\r\n            majorIncidentPresent: this.state.majorIncident,\r\n            clientEscalationWithMI:this.state.clientEscalation,\r\n            majorIncident: this.state.products,\r\n            clientEscalation: this.state.escalations,\r\n            significantEvent: {significantEvent: this.state.significantEvent,\r\n                                significantEventDescription: this.state.significantEventDescription,\r\n                                ksatHelpForSE: this.state.ksatHelpForSE,\r\n                                ksatContactSE: this.state.ksatContactSE,\r\n                                incidentDescriptionSE: this.state.incidentDescriptionSE,    \r\n                            },    \r\n            reportId: this.state.recordId\r\n        };\r\n        // SpecialCharacter validation\r\n        var validateFields = validate(dataToSave);\r\n        if(validateFields.length > 0){\r\n            var message = \"\";\r\n            for(var i =0; i<validateFields.length; i++){\r\n                var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n                if(element){\r\n                    message += element.title + \", \";\r\n                }else{\r\n                    message += validateFields[i] + \", \"\r\n                }\r\n            }\r\n            this.setState({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n        }else{\r\n            trackPromise(\r\n                fetch('/mui/saveCIOUserData' , {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        'Content-type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(dataToSave)\r\n                })\r\n                .then((result) => {\r\n                    if (result.status === 404 || result.status === 400 || result.status === 500)  {\r\n                        result.json().then((object)=> {\r\n                            this.setState({resErrMsg: object.CIOUserDataErr});\r\n                        })\r\n                    } else if (result.status === 409) {\r\n                        result.json().then((object)=> {\r\n                            this.setState({resErrMsg: object.CIOUserDataErr});\r\n                        })\r\n                    } else if(result.status == 200){\r\n                        this.props.history.push(\"/mui/thankyou\");\r\n                    }\r\n                })\r\n                .catch(err => { \r\n                this.setState({errorMessage: err.message});\r\n                })\r\n            )\r\n        }\r\n    }\r\n    render() {\r\n        var stateObj = this.state;\r\n        var showMajorIncident;\r\n        var showsignificantEvent;\r\n        var miFlow, ksatHelpDiv, moreMIDiv, hideMiDiv, showCEDiv, ceDiv, showSignicantDiv, ksatHelpDivSE;\r\n        var dataPresentCheck = true;\r\n        var allowedEmailsCheck = true;\r\n        var dataPresentCheckMsg = '';\r\n        var dayFormat = '';\r\n        var labelText = '';\r\n        var allowedEmailsCheckMsg = '';\r\n        if(this.state?.cioUserData?.cioUserData?.dayFormat){\r\n            dayFormat = stateObj.cioUserData.cioUserData.dayFormat;\r\n            labelText = \"Where there any impacting events in your country in last \"+dayFormat+\" ?\";\r\n        }else{\r\n            labelText = \"Where there any impacting events in your country ?\";\r\n        }\r\n        if(this?.state?.cioUserData){\r\n            if(this.state?.cioUserData?.cioUserData?.dataPresentCheck == true){\r\n                dataPresentCheck = true;\r\n                dataPresentCheckMsg = \"\"\r\n            }else{\r\n                var weekday = stateObj.cioUserData.cioUserData.weekDayName\r\n                var countryList = stateObj.cioUserData.cioUserData.countryListToUI\r\n                dataPresentCheck = false; //Show\r\n                dataPresentCheckMsg = \"Data is already submitted for \"+ countryList + \", for \" +weekday ;\r\n            }\r\n        }\r\n        //Temp Comenting the code for testing\r\n        if(this.state?.cioUserData?.cioUserData?.allowedEmailsCheck == false){\r\n            allowedEmailsCheck = false; //Show\r\n            allowedEmailsCheckMsg = \"Not authorised to view this link.\"\r\n        }else{\r\n            allowedEmailsCheck = true;\r\n            allowedEmailsCheckMsg = \"\"\r\n        }\r\n        // allowedEmailsCheck = true;\r\n        // allowedEmailsCheckMsg = \"\"\r\n        // remove above 2 lines \r\n\r\n        return (\r\n            <div className=\"mainClassForm\">\r\n                {dataPresentCheck == false  && \r\n                    <div className=\"noAccessDiv\">\r\n                        {dataPresentCheckMsg}\r\n                    </div>\r\n                }\r\n                {allowedEmailsCheck == false && \r\n                    <div className=\"noAccessDiv\">\r\n                        {allowedEmailsCheckMsg}\r\n                    </div>\r\n                }\r\n                {dataPresentCheck && allowedEmailsCheck && \r\n                <LazyLoad>\r\n\r\n                    <Form onSubmit={this.formSubmit}>\r\n                    <Select className=\"labelFont widthProp\" id=\"impactingEvent\" name=\"impactingEvent\" labelText={labelText} defaultValue=\"\" onChange={(e) => this.handleSelectImapactingevent(e)}  required=\"required\" >\r\n                        <SelectItem\r\n                            // selected={impactingEvent == true}\r\n                            value=\"\"\r\n                            text=\"Choose an Option\"\r\n                        />\r\n                        <SelectItem\r\n                            // selected={impactingEvent == true}\r\n                            value=\"Yes\"\r\n                            text=\"Yes\"\r\n                        />\r\n                        <SelectItem\r\n                            // selected={impactingEvent == false}\r\n                            value=\"No\"\r\n                            text=\"No\"\r\n                        />\r\n                    </Select>\r\n                    {this.state.impactingEvent == \"Yes\" &&\r\n                        <Select className=\"labelFont widthProp\" id=\"majorIncident\" name=\"majorIncident\" labelText=\"Major Incidents?\" defaultValue=\"\" onChange={(e) => this.handleSelectMI(e)} required=\"required\" >\r\n                            <SelectItem\r\n                                // selected={impactingEvent == true}\r\n                                value=\"\"\r\n                                text=\"Choose an Option\"\r\n                            />\r\n                            <SelectItem\r\n                                // selected={impactingEvent == true}\r\n                                value=\"Yes\"\r\n                                text=\"Yes\"\r\n                            />\r\n                            <SelectItem\r\n                                // selected={impactingEvent == false}\r\n                                value=\"No\"\r\n                                text=\"No\"\r\n                            />\r\n                        </Select>\r\n                    }\r\n                    {this.state.majorIncident == \"Yes\" &&\r\n                        <div>\r\n                            {this.state?.maxLengthErr_misummary &&\r\n                                <small className=\"fontRed\">\r\n                                    <b className=\"blgrperrorMsg\">{this.state.maxLengthErr_misummary}</b>\r\n                                </small>\r\n                            }\r\n                            <br></br>\r\n                            <br></br>\r\n                            {this.state?.maxLengthErr_incidentDeacriptionMI &&\r\n                                <small className=\"fontRed\">\r\n                                    <b className=\"blgrperrorMsg\">{this.state.maxLengthErr_incidentDeacriptionMI}</b>\r\n                                </small>\r\n                            }\r\n                            \r\n                            <ProductTable onHandleCharacter = {this.handleCharacterChange.bind(this)} onProductTableUpdate={this.handleProductTable.bind(this)} onRowAdd={this.handleAddEvent.bind(this)} state={this.state} miData=\"miData\" countryOption={this.state.itemsCountry} recordId={this.state.recordId} onRowDel={this.handleRowDel.bind(this)} products={this.state.products} filterText={this.state.filterText}/>\r\n                            {\r\n                            this.state.invalidMI &&\r\n                            <small className=\"fontRed\">\r\n                                <b className=\"blgrperrorMsg\">Fill all required fields</b>\r\n                            </small>\r\n                            }\r\n                            {\r\n                            this.state.validAccContact &&\r\n                            <small className=\"fontRed\">\r\n                                <b className=\"fontNormal\">{this.state.validAccContactErr}</b>\r\n                            </small>\r\n                            }\r\n                            <Select className=\"labelFont widthProp\" id=\"clientEscalation\" name=\"clientEscalation\" labelText=\"Client Escalation?\" defaultValue=\"\" onChange={(e) => this.handleSelectCEWithMI(e)}  required=\"required\" >\r\n                                <SelectItem\r\n                                    // selected={impactingEvent == true}\r\n                                    value=\"\"\r\n                                    text=\"Choose an Option\"\r\n                                />\r\n                                <SelectItem\r\n                                    // selected={impactingEvent == true}\r\n                                    value=\"yes\"\r\n                                    text=\"Yes\"\r\n                                />\r\n                                <SelectItem\r\n                                    // selected={impactingEvent == false}\r\n                                    value=\"no\"\r\n                                    text=\"No\"\r\n                                />\r\n                            </Select>\r\n                        </div>\r\n                    }\r\n                    {this.state.majorIncident == \"No\" &&\r\n                    <div>\r\n                        <Select className=\"labelFont widthProp\" id=\"clientEscalation\" name=\"clientEscalation\" labelText=\"Client Escalation ?\" defaultValue=\"\" onChange={(e) => this.handleSelectCE(e)}  required=\"required\" >\r\n                        <SelectItem\r\n                            // selected={impactingEvent == true}\r\n                            value=\"\"\r\n                            text=\"Choose an Option\"\r\n                        />\r\n                        <SelectItem\r\n                            // selected={impactingEvent == true}\r\n                            value=\"yes\"\r\n                            text=\"Yes\"\r\n                        />\r\n                        <SelectItem\r\n                            // selected={impactingEvent == false}\r\n                            value=\"no\"\r\n                            text=\"No\"\r\n                        />\r\n                    </Select>\r\n                    </div>\r\n                    }\r\n                    \r\n                    {this.state.impactingEvent == \"No\" &&\r\n                        <Select className=\"labelFont widthProp\" id=\"significantEvent\" name=\"significantEvent\" labelText=\"Any other significant events that you would like to share with larger Kyndryl?\" defaultValue=\"\" onChange={(e) => this.handleSelectSE(e)} required=\"required\" >\r\n                            <SelectItem\r\n                                // selected={impactingEvent == true}\r\n                                value=\"\"\r\n                                text=\"Choose an Option\"\r\n                            />\r\n                            <SelectItem\r\n                                // selected={impactingEvent == true}\r\n                                value=\"Yes\"\r\n                                text=\"Yes\"\r\n                            />\r\n                            <SelectItem\r\n                                // selected={impactingEvent == false}\r\n                                value=\"No\"\r\n                                text=\"No\"\r\n                            />\r\n                        </Select>\r\n                    }\r\n                    {this.state.significantEvent == \"Yes\" &&\r\n                    <div>\r\n                        {this.state?.maxLengthLimit_significantEventDescription &&\r\n                            <small className=\"fontRed\">\r\n                                <b className=\"fontNormal\">{this.state.maxLengthLimit_significantEventDescription}</b>\r\n                            </small>\r\n                        }\r\n                        <TextArea className=\"labelFont widthProp\" maxlength=\"1502\" style={{marginBottom: \"16px\"}} cols={50} rows={5} id=\"significantEventDescription\" \r\n                        labelText={<>Significant Event Description <span className=\"specialCharacterLabel\">(Special characters &lt; &gt; # $ ^ & * \\ = {} ; \\\\ | ? ~ are not allowed)</span></>}\r\n                        placeholder=\"Significant Event Description\" onKeyUp={(e) => this.handleCharacterChange(e)} onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} name=\"significantEventDescription\" defaultValue='' required=\"required\" />\r\n                        {/* <span className=\"specialCharacterLabel noLabelInput\">(Special characters &lt; &gt; # $ ^ & * \\ = {} ; \\\\ | ? ~ are not allowed)</span> */}\r\n                        {this.state?.maxLengthErr_significantEventDescription &&\r\n                            <small className=\"fontRed\">\r\n                                <b className=\"blgrperrorMsg\">{this.state.maxLengthErr_significantEventDescription}</b>\r\n                            </small>\r\n                        }\r\n                        {/* <TextInput className=\"bx--text-input bx--text__input widthProp\" id=\"significantEventContact\" name=\"significantEventContact\" labelText= \"Contact Information\"  placeholder=\"Contact Information\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue='' /> */}\r\n                        <Select className=\"labelFont widthProp\"  id=\"ksatHelpForSE\" name=\"ksatHelpForSE\" labelText=\"Do you need any help? - Contact KSAT\" defaultValue=\"\" onChange={(e) => this.handleSelectKSATSE(e)}  required=\"required\" >\r\n                            <SelectItem\r\n                                // selected={impactingEvent == true}\r\n                                value=\"\"\r\n                                text=\"Choose an Option\"\r\n                            />\r\n                            <SelectItem\r\n                                // selected={impactingEvent == true}\r\n                                value=\"Yes\"\r\n                                text=\"Yes\"\r\n                            />\r\n                            <SelectItem\r\n                                // selected={impactingEvent == false}\r\n                                value=\"No\"\r\n                                text=\"No\"\r\n                            />\r\n                        </Select>\r\n                        {this.state.ksatHelpForSE == \"Yes\" &&\r\n                            <div>\r\n                                {this.state?.maxLengthLimit_incidentDescriptionSE &&\r\n                            <small className=\"fontRed\">\r\n                                <b className=\"fontNormal\">{this.state.maxLengthLimit_incidentDescriptionSE}</b>\r\n                            </small>\r\n                        }\r\n                            <TextArea className=\"labelFont widthProp\" maxlength=\"1502\" style={{marginBottom: \"16px\"}} cols={50} rows={5} id=\"incidentDescriptionSE\" labelText={<>Incident Description <span className=\"specialCharacterLabel\">(Special characters &lt; &gt; # $ ^ & * \\ = {} ; \\\\ | ? ~ are not allowed)</span></>} placeholder=\"Incident Description\" onKeyUp={(e) => this.handleCharacterChange(e)}  onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} name=\"incidentDescriptionSE\" defaultValue='' required=\"required\" />\r\n                        {this.state?.maxLengthErr_incidentDescriptionSE &&\r\n                            <small className=\"fontRed\">\r\n                                <b className=\"blgrperrorMsg\">{this.state.maxLengthErr_incidentDescriptionSE}</b>\r\n                            </small>\r\n                        }\r\n                                <TextInput type=\"email\" className=\"bx--text-input bx--text__input widthProp\"  id=\"ksatContactSE\" name=\"ksatContactSE\" labelText= \"Contact Email\"  placeholder=\"Contact Email\" onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} defaultValue='' required=\"required\" />\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    }\r\n                    {this.state.clientEscalation == \"yes\" &&\r\n                        <div>\r\n                            {this.state?.maxLengthErr_CEsummary &&\r\n                                <small className=\"fontRed\">\r\n                                    <b className=\"blgrperrorMsg\">{this.state.maxLengthErr_CEsummary}</b>\r\n                                </small>\r\n                            }\r\n                            <br></br>\r\n                            <br></br>\r\n                            {this.state?.maxLengthErr_incidentDeacriptionCE &&\r\n                                <small className=\"fontRed\">\r\n                                    <b className=\"blgrperrorMsg\">{this.state.maxLengthErr_incidentDeacriptionCE}</b>\r\n                                </small>\r\n                            }\r\n                            <EscalationTable onHandleCharacter = {this.handleCharacterChange.bind(this)} onEscalationTableUpdate={this.handleEscalationTable.bind(this)} onRowAddCE={this.handleAddEventCE.bind(this)} state={this.state} countryOption={this.state.itemsCountry} recordId={this.state.recordId} onRowDelCE={this.handleRowDelCE.bind(this)} escalations={this.state.escalations} filterTextCE={this.state.filterTextCE}/>\r\n                            {\r\n                                this.state.invalidCE &&\r\n                                <small className=\"fontRed\">\r\n                                    <b className=\"blgrperrorMsg\">Fill all required fields</b>\r\n                                </small>\r\n                            }\r\n                            {\r\n                            this.state.validAccContactCE &&\r\n                            <small className=\"fontRed\">\r\n                                <b className=\"blgrperrorMsg\">{this.state.validAccContactCEErr}</b>\r\n                            </small>\r\n                            }\r\n                        </div>\r\n                    }\r\n                    <div>\r\n                    {this.state?.resErrMsg?.dataPresentErr &&\r\n                        <small className=\"fontRed\">\r\n                            <b className=\"blgrperrorMsg\">{this.state.resErrMsg.dataPresentErr}</b>\r\n                        </small>\r\n                    }\r\n                    {this.state?.resErrMsg?.noMIErr &&\r\n                        <small className=\"fontRed\">\r\n                            <b className=\"blgrperrorMsg\">{this.state.resErrMsg.noMIErr}</b>\r\n                        </small>\r\n                    }\r\n                        <br></br>\r\n                        <br></br>\r\n                    {this.state?.resErrMsg?.noCEErr &&\r\n                        <small className=\"fontRed\">\r\n                            <b className=\"blgrperrorMsg\">{this.state.resErrMsg.noCEErr}</b>\r\n                        </small>\r\n                    }\r\n\r\n                    </div>\r\n                    <br></br>\r\n                    {\r\n                        this.state['specialCharacterErr'] &&\r\n                        <small className=\"fontRed\">\r\n                            <b className=\"errorMsg specialCharErr\">{this.state['specialCharacterErr']}</b>\r\n                        </small>\r\n                    }\r\n                    <br></br>\r\n                    <Button\r\n                        kind=\"primary\"\r\n                        tabIndex={0}\r\n                        type=\"submit\"\r\n                        disabled={this.state.disableBtnSE == true || this.state.disableBtnKSATCE == true || this.state.disableBtnKSATMI == true || this.state.disableBtnMISummary == true || this.state.disableBtnCESummary == true || this.state.disableBtnKSATSE == true}\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                    </Form> \r\n                    </LazyLoad>\r\n                }\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n  \r\n  class ProductTable extends React.Component {\r\n  \r\n    render() {\r\n      var onProductTableUpdate = this.props.onProductTableUpdate;\r\n      var onHandleCharacter = this.props.onHandleCharacter;\r\n      var rowDel = this.props.onRowDel;\r\n      var filterText = this.props.filterText;\r\n      var rowState = this.props.state;\r\n      var miData = this.props.miData;\r\n      var product = this.props.products.map(function(product) {\r\n        if (product.customers.indexOf(filterText) === -1) {\r\n          return;\r\n        }\r\n        return (<ProductRow onHandleCharacter={onHandleCharacter} onProductTableUpdate={onProductTableUpdate} product={product} stateRow={rowState} miData={miData} onDelEvent={rowDel.bind(this)} key={product.id}/>)\r\n      });\r\n      return (\r\n        <div>\r\n        <a type=\"button\" onClick={this.props.onRowAdd} className=\"btn btn-success pull-right btnTern\">Add Major Incident</a>\r\n        <p className=\"idDivTitleNoteDR\">*&nbsp;If multiple customers are impacted by 1 Major Incident, add one customer per line.</p>\r\n        <p className=\"idDivTitleNoteDR\">*&nbsp;Special characters &lt; &gt; # $ ^ & * \\ = {} ; \\\\ | \\ ? ~ are not allowed.</p>\r\n        <table className=\"table table-bordered tableGrid tableOverflow\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"thDataGrid tdWidthProp\">Country</th>\r\n                <th className=\"thDataGrid tdWidthProp\">Customer/s</th>\r\n                <th className=\"thDataGrid tdWidthProp\">Tier of Incident</th>\r\n                <th className=\"thDataGrid tdWidthProp\">Account Team Contact Email</th>\r\n                <th className=\"thDataGrid tdWidthProp\">MI Status</th>\r\n                <th className=\"thDataGrid tdWidthPropTextArea\">MI Summary</th>\r\n                <th className=\"thDataGrid tdWidthProp extraWidth\">Do you need any help? Contact KSAT</th>\r\n                <th className=\"thDataGrid noBackground\"></th>\r\n              </tr>\r\n            </thead>\r\n  \r\n            <tbody>\r\n              {product}\r\n  \r\n            </tbody>\r\n  \r\n          </table>\r\n        </div>\r\n      );\r\n  \r\n    }\r\n  \r\n  }\r\n  \r\n  class ProductRow extends React.Component {\r\n    onDelEvent() {\r\n      this.props.onDelEvent(this.props.product);\r\n  \r\n    }\r\n    render() {\r\n      return (\r\n        <tr className=\"eachRow\">\r\n            <EditableCellSelectCountry\r\n          onProductTableUpdate={this.props.onProductTableUpdate} cellData={{\r\n          type: \"country\",\r\n          state: this.props.stateRow,\r\n          value: this.props.product.summary,\r\n          id: this.props.product.id\r\n            }}/>\r\n          <EditableCellTextAreaCustomer onProductTableUpdate={this.props.onProductTableUpdate} cellData={{\r\n            type: \"customers\",\r\n            value: this.props.product.price,\r\n            id: this.props.product.id\r\n          }}/>\r\n          <EditableCellSelectTI\r\n          onProductTableUpdate={this.props.onProductTableUpdate} cellData={{\r\n          type: \"tierOfIncident\",\r\n          value: this.props.product.summary,\r\n          id: this.props.product.id\r\n            }}/>\r\n          <EditableCell onProductTableUpdate={this.props.onProductTableUpdate} cellData={{\r\n            type: \"accountTeamContact\",\r\n            value: this.props.product.qty,\r\n            id: this.props.product.id\r\n          }}/>\r\n          <EditableCellSelect\r\n          onProductTableUpdate={this.props.onProductTableUpdate} cellData={{\r\n          type: \"mistatus\",\r\n          value: this.props.product.summary,\r\n          id: this.props.product.id\r\n            }}/>\r\n          <EditableCellTextArea\r\n          onHandleCharacter ={this.props.onHandleCharacter}\r\n          onProductTableUpdate={this.props.onProductTableUpdate} cellData={{\r\n              type: \"misummary\",\r\n              value: this.props.product.summary,\r\n              id: this.props.product.id\r\n            }}/>\r\n            <div className=\"tdStyleGrid\">\r\n            <EditableCellSelectKSAT\r\n                onHandleCharacter ={this.props.onHandleCharacter}\r\n                onProductTableUpdate={this.props.onProductTableUpdate} cellData={{\r\n                type: \"ksatHelp\",\r\n                value: this.props.product.summary,\r\n                id: this.props.product.id\r\n            }}/>\r\n             {this.props.product.ksatHelp == \"yes\" && \r\n                <div className=\"externalLabelMain\">\r\n                    <div className=\"externalLabelDiv\">\r\n                        <label for={this.props.product.id} class=\"bx--label externalLabel\">Contact Email</label>\r\n                        <EditableCellKSAT onProductTableUpdate={this.props.onProductTableUpdate} cellData={{\r\n                        type: \"ksatContactInfo\",\r\n                        placeholder: \"Contact Email\",\r\n                        value: this.props.product.summary,\r\n                        id: this.props.product.id\r\n                        }}/>\r\n                    </div>\r\n                    <div className=\"externalLabelDiv\">\r\n                        <label for={this.props.product.id} class=\"bx--label externalLabel\">Incident Description</label>\r\n                        <EditableCellKSATTextArea onHandleCharacter ={this.props.onHandleCharacter} onProductTableUpdate={this.props.onProductTableUpdate} cellData={{\r\n                        type: \"incidentDeacription\",\r\n                        miData: this.props.miData,\r\n                        placeholder: \"Incident Description\",\r\n                        value: this.props.product.summary,\r\n                        id: this.props.product.id\r\n                        }}/>\r\n                    </div> \r\n                </div>\r\n            }\r\n            {this.props.product.ksatHelp == \"no\" && \r\n                <p></p>\r\n            }\r\n            </div>\r\n          <td className=\"del-cell\">\r\n            <TrashCan32 onClick={this.onDelEvent.bind(this)} className=\"delSvg\" />\r\n          </td>\r\n        </tr>\r\n      );\r\n  \r\n    }\r\n  \r\n  }\r\n  class EscalationTable extends React.Component {\r\n\r\n    render() {\r\n      var onEscalationTableUpdate = this.props.onEscalationTableUpdate;\r\n      var onHandleCharacter = this.props.onHandleCharacter;\r\n      var rowDelCE = this.props.onRowDelCE;\r\n      var filterTextCE = this.props.filterTextCE;\r\n      var rowState = this.props.state;\r\n      var escalation = this.props.escalations.map(function(escalation) {\r\n        if (escalation.customers.indexOf(filterTextCE) === -1) {\r\n          return;\r\n        }\r\n        return (<EscalationRow onHandleCharacter={onHandleCharacter} onEscalationTableUpdate={onEscalationTableUpdate} stateRow={rowState} escalation={escalation} onDelEventCE={rowDelCE.bind(this)} key={escalation.id}/>)\r\n      });\r\n      return (\r\n        <div>\r\n  \r\n        <a type=\"button\" onClick={this.props.onRowAddCE} className=\"btn btn-success pull-right btnTern\">Add Client Escalation</a>\r\n        <p className=\"idDivTitleNoteDR\">*&nbsp;If multiple customers are impacted by 1 Client Escalation, add one customer per line.</p>\r\n        <p className=\"idDivTitleNoteDR\">*&nbsp;Special characters &lt; &gt; # $ ^ & * \\ = {} ; \\\\ | \\ ? ~ are not allowed.</p>\r\n          <table className=\"table table-bordered tableGrid tableOverflow\">\r\n            <thead>\r\n            <tr>\r\n                <th className=\"thDataGrid tdWidthProp\">Country</th>\r\n                <th className=\"thDataGrid tdWidthProp\">Customer/s</th>\r\n                {/* <th className=\"thDataGrid tdWidthProp\">Tier of Incident</th> */}\r\n                <th className=\"thDataGrid tdWidthProp\">Account Team Contact Email</th>\r\n                <th className=\"thDataGrid tdWidthProp\">Client Escalation Status</th>\r\n                <th className=\"thDataGrid tdWidthPropTextArea\">Client Escalation Summary</th>\r\n                <th className=\"thDataGrid tdWidthProp extraWidth\">Do you need any help? Contact KSAT</th>\r\n                <th className=\"thDataGrid noBackground\"></th>\r\n              </tr>\r\n            </thead>\r\n  \r\n            <tbody>\r\n              {escalation}\r\n  \r\n            </tbody>\r\n  \r\n          </table>\r\n        </div>\r\n      );\r\n  \r\n    }\r\n  \r\n  }\r\n  \r\n  class EscalationRow extends React.Component {\r\n    onDelEventCE() {\r\n      this.props.onDelEventCE(this.props.escalation);\r\n  \r\n    }\r\n    render() {\r\n  \r\n      return (\r\n        <tr className=\"eachRow\">\r\n        <EditableCellSelectCOuntryCE\r\n      onEscalationTableUpdate={this.props.onEscalationTableUpdate} cellDataCE={{\r\n      type: \"country\",\r\n      state: this.props.stateRow,\r\n      value: this.props.escalation.summary,\r\n      id: this.props.escalation.id\r\n        }}/>\r\n      <EditableCellTextAreaCustomerCE onEscalationTableUpdate={this.props.onEscalationTableUpdate} cellDataCE={{\r\n        type: \"customers\",\r\n        placeHolder: \"testing\",\r\n        value: this.props.escalation.price,\r\n        id: this.props.escalation.id\r\n      }}/>\r\n      {/* <EditableCellSelectCETI\r\n      onEscalationTableUpdate={this.props.onEscalationTableUpdate} cellDataCE={{\r\n      type: \"TierofIncident\",\r\n      value: this.props.escalation.summary,\r\n      id: this.props.escalation.id\r\n        }}/> */}\r\n      <EditableCellCE onEscalationTableUpdate={this.props.onEscalationTableUpdate} cellDataCE={{\r\n        type: \"accountTeamContact\",\r\n        value: this.props.escalation.qty,\r\n        id: this.props.escalation.id\r\n      }}/>\r\n      <EditableCellSelectCE\r\n      onEscalationTableUpdate={this.props.onEscalationTableUpdate} cellDataCE={{\r\n      type: \"CEstatus\",\r\n      value: this.props.escalation.summary,\r\n      id: this.props.escalation.id\r\n        }}/>\r\n      <EditableCellTextAreaCE\r\n      onHandleCharacter ={this.props.onHandleCharacter}\r\n      onEscalationTableUpdate={this.props.onEscalationTableUpdate} cellDataCE={{\r\n          type: \"CEsummary\",\r\n          value: this.props.escalation.summary,\r\n          id: this.props.escalation.id\r\n        }}/>\r\n        <div className=\"tdStyleGrid\">\r\n        <EditableCellSelectKSATCE\r\n            onHandleCharacter ={this.props.onHandleCharacter}\r\n            onEscalationTableUpdate={this.props.onEscalationTableUpdate} cellDataCE={{\r\n            type: \"ksatHelp\",\r\n            value: this.props.escalation.summary,\r\n            id: this.props.escalation.id\r\n        }}/> \r\n         {this.props.escalation.ksatHelp == \"yes\" && \r\n            <div className=\"externalLabelMain\">\r\n                <div className=\"externalLabelDiv\">\r\n                    <label for={this.props.escalation.id} class=\"bx--label externalLabel\">Contact Email</label>\r\n                    <EditableCellKSATCE onEscalationTableUpdate={this.props.onEscalationTableUpdate} cellDataCE={{\r\n                    type: \"ksatContactInfo\",\r\n                    placeholder: \"Contact Email\",\r\n                    value: this.props.escalation.summary,\r\n                    id: this.props.escalation.id\r\n                    }}/>\r\n                </div>\r\n                <div className=\"externalLabelDiv\">\r\n                    <label for={this.props.escalation.id} class=\"bx--label externalLabel\">Incident Description</label>\r\n                    <EditableCellKSATTextAreaCE onHandleCharacter ={this.props.onHandleCharacter} onEscalationTableUpdate={this.props.onEscalationTableUpdate} cellDataCE={{\r\n                    type: \"incidentDeacription\",\r\n                    placeholder: \"Incident Description\",\r\n                    value: this.props.escalation.summary,\r\n                    id: this.props.escalation.id\r\n                    }}/>\r\n                </div> \r\n            </div>\r\n        }\r\n        {this.props.escalation.ksatHelp == \"no\" && \r\n            <p></p>\r\n        }\r\n        </div>\r\n      <td className=\"del-cell\">\r\n        <TrashCan32 onClick={this.onDelEventCE.bind(this)} className=\"delSvg\" />\r\n      </td>\r\n    </tr>\r\n      );\r\n  \r\n    }\r\n  \r\n  }\r\n  class EditableCellCE extends React.Component {\r\n    \r\n      render() {\r\n        return (\r\n          <td className=\"tdStyleGrid\">\r\n            <input className=\"noStyle\" type='email' placeholder=\"Account Team Contact\" name={this.props.cellDataCE.type} id={this.props.cellDataCE.id} value={this.props.cellDataCE.value} onChange={this.props.onEscalationTableUpdate} required=\"required\" />\r\n          </td>\r\n        );\r\n    \r\n      }\r\n    \r\n    }\r\n    class EditableCellEmptyCE extends React.Component {\r\n    \r\n      render() {\r\n        return (\r\n          <p></p>\r\n        );\r\n    \r\n      }\r\n    \r\n    }\r\n    class EditableCellKSATCE extends React.Component {\r\n    \r\n      render() {\r\n        return (\r\n          // <td className=\"tdStyleGrid\">\r\n            <input className=\"noStyle extraMargin extraLabelProp\" type='email' name={this.props.cellDataCE.type} id={this.props.cellDataCE.id} value={this.props.cellDataCE.value} onChange={this.props.onEscalationTableUpdate} required=\"required\" />\r\n          // </td>\r\n        );\r\n    \r\n      }\r\n    \r\n    }\r\n    class EditableCellKSATTextAreaCE extends React.Component {\r\n        \r\n      render() {\r\n        return (\r\n          <textarea className=\"noStyle extraMargin externalTextArea\" maxlength=\"1502\" rows=\"2\" data-value=\"ceData\" name={this.props.cellDataCE.type} id={this.props.cellDataCE.id} value={this.props.cellDataCE.value} onKeyUp={this.props.onHandleCharacter} onChange={this.props.onEscalationTableUpdate} required=\"required\" >\r\n          </textarea>\r\n        );\r\n    \r\n      }\r\n    \r\n    }\r\n    class EditableCellTextAreaCE extends React.Component {\r\n  \r\n      render() {\r\n        return (\r\n          <td className=\"tdStyleGrid\">\r\n            <textarea className=\"noStyle textAreaStyle\" maxlength=\"1502\" placeholder=\"Enter Client Escalation Summary\" rows=\"2\" name={this.props.cellDataCE.type} id={this.props.cellDataCE.id} value={this.props.cellDataCE.value} onKeyUp={this.props.onHandleCharacter} onChange={this.props.onEscalationTableUpdate} required=\"required\" >\r\n              </textarea>\r\n          </td>\r\n        );\r\n    \r\n      }\r\n    \r\n    }\r\n    class EditableCellTextAreaCustomerCE extends React.Component {\r\n  \r\n      render() {\r\n        return (\r\n          <td className=\"tdStyleGrid\">\r\n            <textarea className=\"noStyle textAreaStyle\" maxlength=\"1502\" placeholder=\"Enter Customer/s\" rows=\"2\" name={this.props.cellDataCE.type} id={this.props.cellDataCE.id} value={this.props.cellDataCE.value} onChange={this.props.onEscalationTableUpdate} required=\"required\" >\r\n              </textarea>\r\n          </td>\r\n        );\r\n    \r\n      }\r\n    \r\n    }\r\n    class EditableCellSelectCE extends React.Component {\r\n  \r\n      render() {\r\n        return (\r\n          <td className=\"tdStyleGrid\">\r\n            <select className=\"noStyle\" name={this.props.cellDataCE.type} id={this.props.cellDataCE.id} value={this.props.cellDataCE.value} onChange={this.props.onEscalationTableUpdate} required=\"required\" >\r\n              <option value=\"\">Choose Status</option>\r\n              <option value=\"InProgress\">In Progress</option>\r\n              <option value=\"closed\">Closed</option>\r\n          </select>\r\n          </td>\r\n        );\r\n    \r\n      }\r\n    \r\n    }\r\n    // class EditableCellSelectCETI extends React.Component {\r\n  \r\n    //   render() {\r\n    //     return (\r\n    //       <td className=\"tdStyleGrid\">\r\n    //         <select className=\"noStyle\" name={this.props.cellDataCE.type} id={this.props.cellDataCE.id} value={this.props.cellDataCE.value} onChange={this.props.onEscalationTableUpdate}>\r\n    //           <option value=\"0\">Choose an option</option>\r\n    //           <option value=\"1\">1</option>\r\n    //           <option value=\"2\">2</option>\r\n    //           <option value=\"3\">3</option>\r\n    //       </select>\r\n    //       </td>\r\n    //     );\r\n    \r\n    //   }\r\n    \r\n    // }\r\n    class EditableCellSelectCOuntryCE extends React.Component {\r\n  \r\n      render() {\r\n        var propsData = this.props.cellDataCE.state;\r\n        var countryData = propsData.itemsCountry;\r\n        return (\r\n          <td className=\"tdStyleGrid\">\r\n            <select className=\"noStyle\" name={this.props.cellDataCE.type} id={this.props.cellDataCE.id} value={this.props.cellDataCE.value} onChange={this.props.onEscalationTableUpdate} required=\"required\">\r\n              <option value=\"\">Choose Country</option>\r\n              {countryData}\r\n          </select>\r\n          </td>\r\n        );\r\n    \r\n      }\r\n    \r\n    }\r\n    class EditableCellSelectKSATCE extends React.Component {\r\n  \r\n      render() {\r\n        return (\r\n          <td className=\"tdStyleGrid noBorder\">\r\n            <select className=\"noStyle\" name={this.props.cellDataCE.type} id={this.props.cellDataCE.id} value={this.props.cellDataCE.value} onKeyUp={this.props.onHandleCharacter} onChange={this.props.onEscalationTableUpdate} required=\"required\" >\r\n              <option value=\"\">Choose an option</option>\r\n              <option value=\"yes\">Yes</option>\r\n              <option value=\"no\">No</option>\r\n          </select>\r\n          </td>\r\n        );\r\n    \r\n      }\r\n    \r\n    }\r\n  class EditableCell extends React.Component {\r\n      render() {\r\n      return (\r\n        <td className=\"tdStyleGrid\">\r\n          <input className=\"noStyle\" type='email' placeholder=\"Account Team Contact\" name={this.props.cellData.type} id={this.props.cellData.id} value={this.props.cellData.value} onChange={this.props.onProductTableUpdate} required=\"required\" />\r\n        </td>\r\n      );\r\n  \r\n    }\r\n  \r\n  }\r\n  class EditableCellEmpty extends React.Component {\r\n  \r\n    render() {\r\n      return (\r\n        <p></p>\r\n      );\r\n  \r\n    }\r\n  \r\n  }\r\n  class EditableCellKSAT extends React.Component {\r\n  \r\n    render() {\r\n      return (\r\n        // <td className=\"tdStyleGrid\">\r\n          <input className=\"noStyle extraMargin extraLabelProp\" type='email' name={this.props.cellData.type} id={this.props.cellData.id} value={this.props.cellData.value} onChange={this.props.onProductTableUpdate} required=\"required\" />\r\n        // </td>\r\n      );\r\n  \r\n    }\r\n  \r\n  }\r\n  class EditableCellKSATTextArea extends React.Component {\r\n    \r\n    render() {\r\n        var propsData = this.props.cellData.miData;\r\n      return (\r\n        <textarea className=\"noStyle extraMargin externalTextArea\" maxlength=\"1502\" rows=\"2\" data-value=\"miData\" data-name={propsData} name={this.props.cellData.type} id={this.props.cellData.id} value={this.props.cellData.value} onKeyUp={this.props.onHandleCharacter} onChange={this.props.onProductTableUpdate} required=\"required\" >\r\n        </textarea>\r\n      );\r\n  \r\n    }\r\n  \r\n  }\r\n  class EditableCellTextArea extends React.Component {\r\n\r\n    render() {\r\n      return (\r\n        <td className=\"tdStyleGrid\">\r\n          <textarea className=\"noStyle textAreaStyle\" maxlength=\"1502\" placeholder=\"Enter MI Summary\" rows=\"2\"  name={this.props.cellData.type} id={this.props.cellData.id} value={this.props.cellData.value} onKeyUp={this.props.onHandleCharacter} onChange={this.props.onProductTableUpdate} required=\"required\" >\r\n            </textarea>\r\n        </td>\r\n      );\r\n  \r\n    }\r\n  \r\n  }\r\n  class EditableCellTextAreaCustomer extends React.Component {\r\n\r\n    render() {\r\n      return (\r\n        <td className=\"tdStyleGrid\">\r\n          <textarea className=\"noStyle textAreaStyle\" maxlength=\"1502\" placeholder=\"Enter Customer/s\" rows=\"2\" name={this.props.cellData.type} id={this.props.cellData.id} value={this.props.cellData.value} onChange={this.props.onProductTableUpdate} required=\"required\" >\r\n            </textarea>\r\n        </td>\r\n      );\r\n  \r\n    }\r\n  \r\n  }\r\n  class EditableCellSelect extends React.Component {\r\n\r\n    render() {\r\n      return (\r\n        <td className=\"tdStyleGrid\">\r\n          <select className=\"noStyle\" name={this.props.cellData.type} id={this.props.cellData.id} value={this.props.cellData.value} onChange={this.props.onProductTableUpdate} required=\"required\" >\r\n            <option value=\"\">Choose Status</option>\r\n            <option value=\"InProgress\">In Progress</option>\r\n            <option value=\"closed\">Closed</option>\r\n        </select>\r\n        </td>\r\n      );\r\n  \r\n    }\r\n  \r\n  }\r\n  class EditableCellSelectCountry extends React.Component {\r\n    render() {\r\n        var propsData = this.props.cellData.state;\r\n        var countryData = propsData.itemsCountry;\r\n      return (\r\n        <td className=\"tdStyleGrid\">\r\n          <select className=\"noStyle\"  name={this.props.cellData.type} id={this.props.cellData.id} value={this.props.cellData.value} onChange={this.props.onProductTableUpdate} required=\"required\">\r\n            <option value=\"\">Choose Country</option>\r\n            {countryData}\r\n        </select>\r\n        </td>\r\n      );\r\n  \r\n    }\r\n  \r\n  }\r\n  class EditableCellSelectTI extends React.Component {\r\n\r\n    render() {\r\n      return (\r\n        <td className=\"tdStyleGrid\">\r\n          <select className=\"noStyle\" name={this.props.cellData.type} id={this.props.cellData.id} value={this.props.cellData.value} onChange={this.props.onProductTableUpdate} required=\"required\" >\r\n            <option value=\"\">Choose Tier of Incident</option>\r\n            <option value=\"1\">1</option>\r\n            <option value=\"2\">2</option>\r\n            <option value=\"3\">3</option>\r\n        </select>\r\n        </td>\r\n      );\r\n  \r\n    }\r\n  \r\n  }\r\n  class EditableCellSelectKSAT extends React.Component {\r\n\r\n    render() {\r\n      return (\r\n        <td className=\"tdStyleGrid noBorder\">\r\n          <select className=\"noStyle\"  name={this.props.cellData.type} id={this.props.cellData.id} value={this.props.cellData.value} onKeyUp={this.props.onHandleCharacter}  onChange={this.props.onProductTableUpdate} required=\"required\">\r\n            <option value=\"\">Choose an option</option>\r\n            <option value=\"yes\">Yes</option>\r\n            <option value=\"no\">No</option>\r\n        </select>\r\n        </td>\r\n      );\r\n  \r\n    }\r\n  \r\n  }\r\nexport default withRouter(DRHome);","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SACommands\\AddCommands\\AddCommandForm.jsx",["1664","1665","1666","1667","1668","1669","1670","1671","1672","1673","1674","1675","1676","1677"],"// AddCommandRegistration.jsx >>> WORKING WITH JUST ADDD DELETE\r\nimport React, { Component } from \"react\";\r\nimport {\r\n  Modal,\r\n  Button,\r\n  Column,\r\n  Grid,\r\n  Row,\r\n  Select,\r\n  SelectItem,\r\n  TextInput,\r\n  Form,\r\n} from \"carbon-components-react\";\r\nimport \"../../../forms/form.scss\";\r\nimport { AddAlt32 } from \"@carbon/icons-react\";\r\nimport { TrashCan32 } from \"@carbon/icons-react\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { useParams, withRouter } from \"react-router-dom\";\r\nimport { validate } from '../../../../validation/validate.js';\r\nclass AddCommandRegistration extends Component {\r\n  state = {\r\n    _id: \"\",\r\n    isNLP: true,\r\n    default: false,\r\n    group: \"\",\r\n    command: \"\",\r\n    params: [\"\"],\r\n    global: false,\r\n    processMessage: false,\r\n    msUrl: \"\",\r\n    helpMessage: \"\",\r\n    inValid: false,\r\n  };\r\n  async componentDidMount() {\r\n    const { location } = this.props;\r\n    const params = new URLSearchParams(location.search);\r\n    const id = params.get(\"id\");\r\n    if (!id) return;\r\n    const res$ = fetch(\"/mui/fetchCommand?id=\" + id);\r\n    trackPromise(res$);\r\n    const res = await res$;\r\n    if (res.status != 200)\r\n      return this.setState({ inValid: \"Command is not found by given id\" });\r\n    const { command } = await res.json();\r\n\r\n    if (\"params\" in command) command.params = Object.keys(command.params);\r\n\r\n    this.setState({\r\n      isNLP: !!command.isNLP,\r\n      ...command,\r\n    });\r\n  }\r\n  checkCmd = async (command) => {\r\n    const res = await fetch(\"/mui/check-command\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ command }),\r\n    });\r\n\r\n    if (res.status != 200) return false;\r\n\r\n    const { unique } = await res.json();\r\n    return unique;\r\n  };\r\n\r\n  timer = (cb, time) => {\r\n    let timer;\r\n    return function (e) {\r\n      clearTimeout(timer);\r\n      timer = setTimeout(function () {\r\n        cb(e);\r\n      }, time);\r\n    };\r\n  };\r\n\r\n  updateGlobal = (value) => {\r\n    this.state.global = !!value;\r\n  };\r\n  updateProcessMessage = (value) => {\r\n    this.state.processMessage = value;\r\n  };\r\n  updateMsUrl = (value) => {\r\n    this.state.msUrl = value.trim();\r\n  };\r\n  updateType = (isNLP) => {\r\n    if (isNLP) {\r\n      this.state.processMessage = false;\r\n      this.state.helpMessage = \"\";\r\n    }\r\n    this.setState({\r\n      isNLP,\r\n      default: !isNLP,\r\n    });\r\n  };\r\n  updateCommandName = (name) => {\r\n    this.state.command = name;\r\n  };\r\n  updateGroup = (groupName) => {\r\n    this.state.group = groupName;\r\n  };\r\n  addParamField = () => {\r\n    const { params } = this.state;\r\n    params.push(\"\");\r\n    this.setState({\r\n      params,\r\n    });\r\n  };\r\n  deleteParamField = (index) => {\r\n    const { params } = this.state;\r\n    if (params.filter((param) => param != undefined).length <= 1) return;\r\n    params[index] = undefined;\r\n    this.setState({\r\n      params,\r\n    });\r\n  };\r\n  addParam = (index, value) => {\r\n    const { params } = this.state;\r\n    params[index] = value.trim();\r\n  };\r\n  handleParam = (e) => {\r\n    const { id, value } = e.target;\r\n    const [field, i] = id.split(\"-\");\r\n    if (field === \"inputParam\") {\r\n      this.addParam(+i, value);\r\n    } else if (field === \"delParam\") {\r\n      this.deleteParamField(+i);\r\n    }\r\n  };\r\n\r\n  validateCmd = async (e) => {\r\n    const { value } = e.target;\r\n    if (!value) return e.target.setCustomValidity(\"\");\r\n    const trimmed = value.trim();\r\n    if (!trimmed) return e.target.setCustomValidity(\"Invalid input...\");\r\n\r\n    const isUnique = await this.checkCmd(trimmed);\r\n    if (!isUnique)\r\n      return e.target.setCustomValidity(\"Command Name already exists...\");\r\n    this.updateCommandName(trimmed);\r\n    e.target.setCustomValidity(\"\");\r\n  };\r\n\r\n  validateCmdTimer = this.timer(this.validateCmd, 1000);\r\n  handleCmd = (e) => {\r\n    e.target.setCustomValidity(\"Verifying...\");\r\n    this.validateCmdTimer(e);\r\n  };\r\n  handleFields = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name === \"type\") {\r\n      this.updateType(value === \"true\");\r\n    } else if (name === \"group\") {\r\n      this.updateGroup(value);\r\n    } else if (name === \"global\") {\r\n      this.updateGlobal(value);\r\n    }\r\n  };\r\n  submit = async (e) => {\r\n    e.preventDefault();\r\n    var payload;\r\n    if (this.state.isNLP) {\r\n      payload = {\r\n        _id: this.state._id || undefined,\r\n        isNLP: this.state.isNLP,\r\n        command: this.state.command,\r\n      };\r\n    } else {\r\n      payload = {\r\n        _id: this.state._id || undefined,\r\n        default: false,\r\n        command: this.state.command,\r\n        global: this.state.global,\r\n        group: this.state.group,\r\n        params: this.state.params,\r\n      };\r\n    }\r\n    // SpecialCharacter validation\r\n    var validateFields = validate(payload);\r\n    if(validateFields.length > 0){\r\n        var message = \"\";\r\n        for(var i =0; i<validateFields.length; i++){\r\n            var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n            if(element){\r\n\r\n                message += element.title + \", \";\r\n            }else{\r\n                message += validateFields[i] + ', '\r\n            }\r\n        }\r\n        this.setState({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n    }else{\r\n        const res$ = fetch(\"/mui/command\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(payload),\r\n        });\r\n\r\n        trackPromise(res$);\r\n\r\n        const res = await res$;\r\n\r\n        if (res.status == 200) {\r\n        this.props.history.push(\"/mui/commands\");\r\n        }\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"divContainer\" style={{ width: \"70%\" }}>\r\n        <section className=\"sectionMargin mainMargin paddingCostom\">\r\n            {\r\n                this.state.inValid && <b style={{ color: \"red\" }}>{this.state.inValid}</b>\r\n            }\r\n          <Form onSubmit={this.submit} onChange={this.handleFields}>\r\n            <Grid>\r\n              <Row>\r\n                <Column>\r\n                  <Select\r\n                    name=\"type\"\r\n                    labelText=\"Command\"\r\n                    defaultValue={!!this.state.isNLP}\r\n                  >\r\n                    <SelectItem value={true} label=\"NLP\" />\r\n                    <SelectItem\r\n                      selected={!this.state.isNLP}\r\n                      value={false}\r\n                      label=\"Other\"\r\n                    />\r\n                  </Select>\r\n                  {!this.state.isNLP && (\r\n                    <TextInput\r\n                      name=\"group\"\r\n                      labelText=\"Group Name\"\r\n                      placeholder=\"Group Name\"\r\n                      defaultValue={this.state.group}\r\n                    />\r\n                  )}\r\n                  <TextInput\r\n                    name=\"command\"\r\n                    labelText={\r\n                      <>\r\n                        Command Name <b style={{ color: \"red\" }}>*</b>\r\n                      </>\r\n                    }\r\n                    placeholder=\"Add Command\"\r\n                    defaultValue={this.state.command}\r\n                    onChange={this.handleCmd}\r\n                    required\r\n                  />\r\n                  {!this.state.isNLP && (\r\n                    <>\r\n                      <Select\r\n                        name=\"global\"\r\n                        labelText=\"Global\"\r\n                        defaultValue={this.state.global}\r\n                      >\r\n                        <SelectItem value={true} label=\"Yes\" />\r\n                        <SelectItem value={false} label=\"No\" />\r\n                      </Select>\r\n\r\n                      <div className=\"paramsInlineDiv\">\r\n                        <h4 className=\"bx--label paramsLabel\">\r\n                          Params\r\n                          {/* {!this.state.isNLP && (\r\n                            <b style={{ color: \"red\" }}>*</b>\r\n                          )} */}\r\n                        </h4>\r\n                        <AddAlt32\r\n                          className=\"addParam\"\r\n                          onClick={this.addParamField}\r\n                        />\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </Column>\r\n              </Row>\r\n              {!this.state.isNLP && (\r\n                <Row>\r\n                  <Column>\r\n                    <div\r\n                      className=\"rulesDivStyle\"\r\n                      style={{ marginTop: \"0\" }}\r\n                      onChange={this.handleParam}\r\n                      onClick={this.handleParam}\r\n                    >\r\n                      {this.state.params.map(\r\n                        (param, i) =>\r\n                          param != undefined && (\r\n                            <div className=\"rulesSubDiv\" key={i}>\r\n                              <TextInput\r\n                                id={\"inputParam-\" + i}\r\n                                defaultValue={this.state.params[i]}\r\n                                name={i}\r\n                                className=\"bx--text-input bx--text__input\"\r\n                                placeholder=\"Add Params\"\r\n                                // required={!this.state.isNLP}\r\n                              />\r\n                              <div className=\"iconDiv1\">\r\n                                <TrashCan32\r\n                                  id={\"delParam-\" + i}\r\n                                  className=\"iconEditSize1\"\r\n                                  aria-label=\"Delete Rule\"\r\n                                  title=\"Delete Rule\"\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                          )\r\n                      )}\r\n                    </div>\r\n                  </Column>\r\n                </Row>\r\n              )}\r\n                <Row>\r\n                    <Column>\r\n                        {\r\n                            this.state['specialCharacterErr'] &&\r\n                            <small className=\"fontRed\">\r\n                                <b className=\"errorMsg specialCharErr\">{this.state['specialCharacterErr']}</b>\r\n                            </small>\r\n                        }\r\n                    </Column>\r\n                </Row>\r\n              <Row>\r\n                <Column>\r\n                  <Button\r\n                    className=\"btnMargin btnCmd\"\r\n                    type=\"submit\"\r\n                    disabled={this.state.inValid}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </Column>\r\n              </Row>\r\n            </Grid>\r\n          </Form>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(AddCommandRegistration);\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SACommands\\CommandList.jsx",[],"C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\followUpApproval\\TabularData.jsx",[],"C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SAAddWorkspace\\AddWorkspaceTeams.jsx",[],"C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SAAddWorkspace\\SAAddWorkspaceBreadCrump.jsx",["1678","1679","1680","1681"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SAWorkspaceBreadCrump extends React.Component {\r\n    \r\n  render() {\r\n    return (\r\n        <div className=\"breadCrumpDiv\">\r\n            <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/home\">Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/superAdmin\">Admin</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/workspaces\">Workspaces</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem isCurrentPage>\r\n                    <Link to=\"/mui/addWorkspaces\">Add Workspace</Link>\r\n                </BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <h2 className=\"headerText\">Add Workspace</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default SAWorkspaceBreadCrump;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SAHome.jsx",["1682","1683","1684","1685","1686"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SAHome extends React.Component {\r\n    \r\n  render() {\r\n    return (\r\n        <div class=\"landingContentColumnMain\">\r\n            <div class=\"contentDIvSub\">\r\n\r\n                <UnorderedList>\r\n                    <ListItem className=\"listSALanding\">\r\n                        Create Workspace.\r\n                    </ListItem>\r\n                    <ListItem className=\"listSALanding\">\r\n                        Add EventStream Config.\r\n                    </ListItem>\r\n                    <ListItem className=\"listSALanding\">\r\n                        Add Assistants.\r\n                    </ListItem>\r\n                    <ListItem className=\"listSALanding\">\r\n                        Add Commands.\r\n                    </ListItem>\r\n                    <ListItem className=\"listSALanding\">\r\n                        Add Index Channel.\r\n                    </ListItem>\r\n                    {/* \r\n                    <ListItem className=\"listSALanding\">\r\n                        Nam ac turpis in massa euismod varius at vitae tortor.\r\n                    </ListItem> */}\r\n                </UnorderedList>\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default SAHome;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\EventStreamApiKey.jsx",["1687","1688","1689","1690"],"import React, { Component } from \"react\";\r\nimport { CodeSnippet, Column, Grid, Row, Checkbox, Button, Form, TextArea } from \"carbon-components-react\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { withRouter } from 'react-router-dom';\r\nimport \"./forms/form.scss\";\r\nimport {CheckmarkFilled32, CloseFilled32} from \"@carbon/icons-react\";\r\nimport { validate } from '../validation/validate.js';\r\nclass EventStreamApiKey extends Component {\r\n  state = {\r\n    data: this.props.stream.esData,\r\n    accData: this.props.stream.accountData,\r\n    ssData: this.props.stream.ssData,\r\n    editNow: false,\r\n    streamJson: \"\",\r\n    resErrMsg: \"\",\r\n    esEnabled: this.props.stream.accountData.pushToEventStream,\r\n    eventStreamsConfig: \"\",\r\n    showSuccess: \"\",\r\n    showFailure: \"\"\r\n  };\r\n\r\n  editForm = (e) => {  \r\n    e.preventDefault();  \r\n    this.setState({\r\n      editNow: true,\r\n      eventStreamsConfig: this.state.streamJson\r\n    });\r\n  }\r\n\r\n  formSubmit= (e) => {\r\n    e.preventDefault();\r\n   \r\n    const eventStreamData = {\r\n        name: this.state.accData.accountCode,\r\n        configuration: this.state.eventStreamsConfig,\r\n        eventStreamEnabled: this.state.esEnabled\r\n    };\r\n     // SpecialCharacter validation\r\n    var validateFields = validate(eventStreamData);\r\n    if(validateFields.length > 0){\r\n        var message = \"\";\r\n        for(var i =0; i<validateFields.length; i++){\r\n            var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n            if(element){\r\n                message += element.title + \", \";\r\n            }else{\r\n                message += validateFields[i] + ', '\r\n            }\r\n        }\r\n        this.setState({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n    }else{\r\n        trackPromise(\r\n            fetch('/mui/saveAccountBasedES' , {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify(eventStreamData)\r\n        })\r\n        .then((result) => {      \r\n            if (result.status === 404 || result.status === 400 || result.status === 500)  {\r\n                result.json().then((object)=> {\r\n                    this.setState({resErrMsg: object.eventStreamsError});\r\n                })\r\n            } else if (result.status === 409) {\r\n                result.json().then((object)=> {\r\n                    this.setState({resErrMsg: object.eventStreamsError});\r\n                })\r\n            } else if(result.status == 200){            \r\n                // this.props.history.push(\"/mui/onboardAccount\");\r\n                window.location = \"/mui/onboardAccount\";\r\n            }\r\n    })\r\n        .catch(err => { \r\n        this.setState({errorMessage: err.message});\r\n        })\r\n        )\r\n    }\r\n}\r\n\r\n  checkConnection = (e) => {\r\n    e.preventDefault();\r\n    const eventStreamData = {\r\n      name: this.state.accData.accountCode,\r\n      configuration: this.state.eventStreamsConfig\r\n    };\r\n    trackPromise(\r\n      fetch('/mui/checkEventStreamConnection' , {\r\n      method: \"POST\",\r\n      headers: {\r\n          'Content-type': 'application/json'\r\n      },\r\n      body: JSON.stringify(eventStreamData)\r\n    })\r\n    .then((result) => {      \r\n      if (result.status === 404 || result.status === 400 || result.status === 500)  {\r\n          result.json().then((object)=> {\r\n            this.setState({showFailure: true});\r\n            this.setState({showSuccess: false});\r\n          })\r\n      } else if (result.status === 409) {\r\n          result.json().then((object)=> {\r\n            this.setState({showFailure: true});\r\n            this.setState({showSuccess: false});\r\n          })\r\n      } else if(result.status == 200){          \r\n          // this.props.history.push(\"/mui/onboardAccount\");\r\n          // window.location = \"/mui/onboardAccount\";\r\n          this.setState({showSuccess: true});\r\n          this.setState({showFailure: false});\r\n      }\r\n })\r\n  .catch(err => { \r\n    this.setState({showFailure: true});\r\n    this.setState({showSuccess: false});\r\n  })\r\n  )\r\n  }\r\n\r\n  handleInputChange = (e) => {\r\n    if (\r\n        (e.target.value &&\r\n        e.target.value.includes(\"script\") &&\r\n        e.target.value.includes(\"<\")) ||\r\n        e.target.value.includes(\">\")\r\n    ){\r\n        this.setState({\r\n            [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n        });\r\n        return;\r\n    }\r\n    this.setState({\r\n        [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  updateValue = (e) => {\r\n      this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  handleCheckbox = () => {\r\n    this.setState({ esEnabled: document.getElementById(\"pushToEventStream\").checked });    \r\n  }\r\n\r\n  render() {    \r\n    this.state.streamJson = JSON.stringify(this.state.data);\r\n    var viewData = '';\r\n    let pushToEventStreamBool;    \r\n    if(this.state.ssData){\r\n      pushToEventStreamBool = (this.state.ssData.pushToEventStream ? this.state.ssData.pushToEventStream : false);\r\n    }\r\n    if(this.state.data && this.state.streamJson && !this.state.editNow){\r\n      viewData = (\r\n        <Form onSubmit={this.editForm}>\r\n              <CodeSnippet\r\n                  type=\"multi\"\r\n                  onClick={() => {\r\n                    navigator.clipboard.writeText(this.state.streamJson);\r\n                  }}\r\n                >\r\n                  {this.state.streamJson && this.state.streamJson.replaceAll(\",\", \", \\n\")}\r\n              </CodeSnippet>   \r\n                <br></br> \r\n                <Button kind=\"primary\" type=\"submit\" className=\"btnSACss\" >Edit</Button>  \r\n        </Form>         \r\n      );\r\n    }else{\r\n      viewData = (\r\n                  <Form  onSubmit={this.formSubmit}>\r\n                      <TextArea\r\n                          cols={50}\r\n                          id=\"eventStreamsConfig\"\r\n                          name=\"eventStreamsConfig\"\r\n                          helperText=\"Provide proper json with name/value pairs, that begins with { left brace and ends with } right brace. Each name should be followed by : colon and the name/value pairs separated by , comma\"\r\n                          onBlur={(e) => this.handleInputChange(e)} onChange={(e) => this.updateValue(e)} \r\n                          defaultValue={this.state.streamJson} \r\n                          required\r\n                          labelText={ <> Configurations<b className=\"fontRed\">*</b> </> }\r\n                          placeholder=\"Enter EveentStream Configurations\"\r\n                          rows={8}\r\n                      />\r\n                      {\r\n                          this.state['resErrMsg'] && \r\n                          <small className=\"fontRed\">\r\n                          <b className=\"blgrperrorMsg\">{this.state.resErrMsg.jsonErr}</b>\r\n                          </small>\r\n                      }\r\n                       <br>\r\n                      </br> \r\n                        <Checkbox\r\n                          labelText=\"Enable Event Stream\"\r\n                          name=\"pushToEventStream\"\r\n                          id=\"pushToEventStream\"\r\n                          placeholder=\"Enable Event Stream\"\r\n                          defaultChecked={pushToEventStreamBool} \r\n                          onClick={(event) => { this.handleCheckbox()}}\r\n                        />\r\n                      <br>\r\n                      </br> \r\n                        {\r\n                            this.state['specialCharacterErr'] &&\r\n                            <small className=\"fontRed\">\r\n                                <b className=\"errorMsg specialCharErr\">{this.state['specialCharacterErr']}</b>\r\n                            </small>\r\n                        }\r\n                         <br>\r\n                      </br> \r\n                      <div className=\"checkConnection\">\r\n                        <Button kind=\"primary\" type=\"submit\" className=\"btnSACss\" id=\"BTNSubFinal\" >Submit</Button>\r\n                        <Button kind=\"warning\" type=\"submit\" className=\"btnSACss\" onClick={this.checkConnection} >Test Connection</Button>\r\n                        {/* <a href=\"#\" className=\"checkConnectionLink\" onClick= {this.checkConnection}>Test Connection\r\n                        </a> */}\r\n                        {this.state.showSuccess ? (\r\n                        <CheckmarkFilled32 className=\"connectionSuccess\"/>) : null}\r\n                        {this.state.showFailure ? (\r\n                        <CloseFilled32 className=\"connectionFailure\"/>) : null}\r\n                      </div>\r\n                  </Form>\r\n      );\r\n    }   \r\n    return (\r\n      <div className=\"width80 p-2 center\">\r\n        <Grid>\r\n          <Row>\r\n            <Column>\r\n              <div className=\"my-2\">\r\n                {viewData}                         \r\n              </div>\r\n            </Column>\r\n          </Row>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventStreamApiKey;\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SABreadCrump.jsx",["1691","1692","1693","1694"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SABreadCrump extends React.Component {\r\n    \r\n  render() {\r\n    return (\r\n        <div className=\"breadCrumpDiv\">\r\n            <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/home\">Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem isCurrentPage>\r\n                    <Link to=\"/mui/superAdmin\">Admin</Link>\r\n                </BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <h2 className=\"headerText\">Admin</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default SABreadCrump;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SAWorkspace\\SAWorkspaceBreadcrump.jsx",["1695","1696","1697","1698"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Breadcrumb, BreadcrumbItem, Button,UnorderedList, ListItem  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SAWorkspaceBreadCrump extends React.Component {\r\n    \r\n  render() {\r\n    return (\r\n        <div className=\"breadCrumpDiv stickyDiv\">\r\n            <Breadcrumb>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/home\">Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem>\r\n                    <Link to=\"/mui/superAdmin\">Admin</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem isCurrentPage>\r\n                    <Link to=\"/mui/workspaces\">Workspace</Link>\r\n                </BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <h2 className=\"headerText\">Workspaces</h2>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default SAWorkspaceBreadCrump;","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\SuperAdmin\\SAWorkspace\\SAWorkspaceList.jsx",["1699","1700","1701","1702","1703"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Button,Form, TextInput  } from 'carbon-components-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { Close32 } from \"@carbon/icons-react\";\r\nimport { withRouter } from 'react-router-dom';\r\nclass SAWorkspaceList extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { \r\n            showPopup: false,\r\n            workspaceData: [],\r\n            workspaceId: '',\r\n            deleteConfirm: '',\r\n            toDeleteID: ''\r\n        };\r\n        this.loadWorkspaces = this.loadWorkspaces.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        trackPromise(\r\n            fetch(\"/mui/fetchWorkspaceData\")\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((workspaceData) => {\r\n                this.setState({ workspaceData });\r\n            })\r\n        );\r\n    }\r\n    handleInputChange = (e) => {\r\n        if (\r\n            (e.target.value &&\r\n            e.target.value.includes(\"script\") &&\r\n            e.target.value.includes(\"<\")) ||\r\n            e.target.value.includes(\">\")\r\n        ){\r\n            this.setState({\r\n                [\"inValid_\" + e.target.name]: \"Invalid Input.\",\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n    showModal = (e) => {\r\n        this.setState({\r\n            showPopup: true,\r\n        });\r\n        this.setState({resErrMsg: ''});\r\n        var workspaceToDel = e.target.getAttribute(\"data-name\")\r\n        this.setState({\r\n            workspaceId: e.target.id,\r\n            workspaceNameToDelete: workspaceToDel\r\n        })\r\n    };\r\n    cancelModal = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            showPopup: false,\r\n        });\r\n    };\r\n    deleteWorkspace = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n            showPopup: false,\r\n        });\r\n        const workspaceData = {\r\n            deleteConfirm: this.state.delete,\r\n            toDeleteID: this.state.workspaceId\r\n        };\r\n        trackPromise(\r\n            fetch(\"/mui/deleteWorkspace\", {\r\n              method: \"POST\",\r\n              headers: {\r\n                \"Content-type\": \"application/json\",\r\n              },\r\n              body: JSON.stringify(workspaceData),\r\n            })\r\n            .then((result) => {\r\n                if (result.status === 404 || result.status === 400)  {\r\n                    this.setState({\r\n                        showPopup: true,\r\n                    });\r\n                    result.json().then((object)=> {\r\n                    this.setState({resErrMsg: object.workspaceError});\r\n                    })\r\n                } else if (result.status === 409) {\r\n                    this.setState({\r\n                        showPopup: true,\r\n                    });\r\n                    result.json().then((object)=> {\r\n                        this.setState({resErrMsg: object.workspaceError});\r\n                    })\r\n                } else if(result.status == 200){\r\n                    e.preventDefault();\r\n                    this.setState({\r\n                        showPopup: false,\r\n                    });\r\n                    this.loadWorkspaces();\r\n                }\r\n           })\r\n        );\r\n    }\r\n    loadWorkspaces = () => {\r\n        this.props.history.push(\"/mui/workspaces\");\r\n        trackPromise(\r\n            fetch('/mui/fetchWorkspaceData')\r\n            .then(res => {\r\n                return res.json()\r\n            })\r\n            .then(workspaceData => { \r\n                this.setState({ workspaceData })\r\n            })\r\n        )\r\n    }\r\n    render() {\r\n        var stateSet = this.state;\r\n        var workspaceitem ='';\r\n        const itemsWorkspace = [];\r\n        const itemsBreak = [];\r\n        var workspaceIdToDelete = '';\r\n        var workspaceNameToDelete = '';\r\n        if(this.state.workspaceId){\r\n            workspaceIdToDelete = this.state.workspaceId\r\n            workspaceNameToDelete = this.state.workspaceNameToDelete\r\n        }\r\n        if(stateSet.workspaceData){\r\n            var workspaceFromState = stateSet.workspaceData;\r\n            var workspaceStateData = workspaceFromState.workspaceData;\r\n            if(workspaceStateData != undefined){\r\n                for(var i=0; i< workspaceStateData.length; i++){\r\n                    var redirectUrl = \"/mui/addWorkspaces?\"+workspaceStateData[i]._id;\r\n                    // var redirectUrl = \"/mui/deleteWorkspaces?\"+workspaceStateData[i]._id;\r\n                    workspaceitem = (\r\n                        <div className=\"col3\">\r\n                            <div className=\"cardMain\">\r\n                                <p className=\"cardTitle\">{workspaceStateData[i].name}</p>\r\n                                <div className=\"actionDiv\">\r\n                                <Link  id={workspaceStateData[i]._id} to={redirectUrl} >\r\n                                    <p className=\"actionItem\" id={workspaceStateData[i]._id}>EDIT</p>\r\n                                </Link>\r\n                                <a className=\"deleteWorkspaceLink\" data-name={workspaceStateData[i].name} onClick={(e) => {this.showModal(e);}} id={workspaceStateData[i]._id} >\r\n                                    <p className=\"actionItem\" data-name={workspaceStateData[i].name} id={workspaceStateData[i]._id}>DELETE</p>\r\n                                </a>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                    itemsWorkspace.push(workspaceitem)\r\n                }\r\n            }\r\n        }\r\n    return (\r\n        <div className=\"col13Main\">\r\n            <div className=\"rowWidthDiv1\">\r\n                <Link className=\"addBtnDivCss\" to=\"/mui/addWorkspaces\">\r\n                    <Button className=\"addAccBtn addBtnMargin addBtnCss addBtnPACss\">\r\n                        <Link to=\"/mui/addWorkspaces\">Add Workspace</Link>\r\n                    </Button>\r\n                </Link>\r\n            </div>\r\n            <div className=\"rowWidthDiv row13\">\r\n                {itemsWorkspace}\r\n            </div>\r\n            {this.state.showPopup ? (\r\n                <div className=\"popup\">\r\n                <div className=\"bx--modal-container modal-css\">\r\n                    <div className=\"bx--modal-header modalHeaderCss\">\r\n                    <p className=\"bx--modal-header__heading bx--type-beta modalHeaderTitlePadd\" id=\"modal-addWorkspace-heading\" >Do you want to delete Slack App</p>\r\n                    <button className=\"bx--modal-close\" type=\"button\" data-modal-close aria-label=\"close modal\" > \r\n                        <Close32 className=\"iconEditSize\" onClick={this.cancelModal} />\r\n                    </button>\r\n                    </div>\r\n                    <div className=\"bx--modal-content modalContentCss\">\r\n                    <p className=\"modalContentPara\">About to delete slack App <span className=\"modalSpanClass\">{workspaceNameToDelete}</span>. Any saved data will also be deleted</p>\r\n                    <p className=\"modalContentPara\">This deletion cannot be undone.</p>\r\n                    <Form>\r\n                        <TextInput className=\"bx--text-input bx--text__input labelDeleteCSS\" id={workspaceIdToDelete} name=\"delete\" defaultValue='' labelText=\"Please type DELETE to complete this action\" placeholder=\"Delete Workspace\" onBlur={this.handleInputChange} />\r\n                    </Form>\r\n                    {\r\n                        this.state['resErrMsg'] && \r\n                        <small className=\"fontRed\">\r\n                        <b className=\"blgrperrorMsg\">{this.state.resErrMsg}</b>\r\n                        </small>\r\n                    }\r\n                    </div>\r\n                    <div className=\"bx--modal-content--overflow-indicator\"></div>\r\n                    <div className=\"bx--modal-footer\">\r\n                    <Button kind=\"secondary\" className=\"btnSACss\" onClick={this.cancelModal} >Cancel</Button>\r\n                    <Button kind='danger' onClick={this.deleteWorkspace} type=\"submit\" className=\"btnSACss\" >Delete </Button>\r\n                    </div>\r\n                </div>\r\n                <span tabindex=\"0\"></span>\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n        \r\n    );\r\n  }\r\n}\r\nexport default withRouter(SAWorkspaceList);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ApiKeyForm.jsx",["1704","1705","1706"],"import {\r\n  Button,\r\n  Checkbox,\r\n  Column,\r\n  Form,\r\n  FormGroup,\r\n  FormLabel,\r\n  Grid,\r\n  Row,\r\n  TextInput,\r\n  Tooltip,\r\n} from \"carbon-components-react\";\r\nimport React, { Component } from \"react\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\nimport { validate } from '../validation/validate.js';\r\nclass APIKeyForm extends Component {\r\n  state = {\r\n    keyNameField: \"keyName\",\r\n    issuedTo: \"issuedTo\",\r\n    incidents: [],\r\n    plateformScopes: [],\r\n    selectAll: false,\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    trackPromise(\r\n      fetch(\"/mui/scopes\")\r\n        .then((res) => res.json())\r\n        .then((scopes) => {\r\n          this.setState({\r\n            incidents: scopes.tickets,\r\n            plateformScopes: scopes.collaborators,\r\n          });\r\n        })\r\n    );\r\n  };\r\n\r\n  handleTextInputChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  handleTextIssuedToInput = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSelectAll = (isChecked, scopeName) => {\r\n    const scope = this.state[scopeName];\r\n    scope.forEach((value) => (value.checked = isChecked));\r\n\r\n    this.setState({\r\n      [scopeName]: scope,\r\n      [scopeName + \"SelectAll\"]: isChecked,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const issuedToEmail = this.state[this.state.issuedTo];\r\n    const allowedDomains = process.env.REACT_APP_ALLOWED_DOMAINS?.split(\",\") || []\r\n    const validDomain = allowedDomains.find(domain => issuedToEmail.toLowerCase().includes(domain + \".\"))\r\n    if (!validDomain) {\r\n      this.setState({\r\n        inValidEmail: true,\r\n      });\r\n      return;\r\n    }\r\n    const { incidents, plateformScopes } = this.state;\r\n    const { accountCode, onSubmit } = this.props;\r\n    const selectedIncidents = incidents\r\n      .filter((incident) => incident.checked)\r\n      .map((incident) => incident.id);\r\n    const selectedPlateformScopes = plateformScopes\r\n      .filter((scope) => scope.checked)\r\n      .map((scope) => scope.id);\r\n\r\n    const scopes = [...selectedIncidents, ...selectedPlateformScopes];\r\n    if (scopes.length < 1) {\r\n      this.setState({\r\n        inValidScope: true,\r\n      });\r\n      return;\r\n    }\r\n    const payload = {\r\n      accCode: accountCode,\r\n      keyName: this.state[this.state.keyNameField],\r\n      issuedTo: issuedToEmail,\r\n      apiScopes: scopes,\r\n    };\r\n    // SpecialCharacter validation\r\n    var validateFields = validate(payload);\r\n    if(validateFields.length > 0){\r\n        var message = \"\";\r\n        for(var i =0; i<validateFields.length; i++){\r\n            var element = document.querySelector(`input[name=${validateFields[i]}]`);\r\n            message += element.title + \", \";\r\n        }\r\n        this.setState({'specialCharacterErr': `Special Character not allowed in field ${message}`});\r\n    }else{\r\n        trackPromise(\r\n        fetch(\"/mui/fetchCKKey\", {\r\n            method: \"POST\",\r\n            headers: {\r\n            \"Content-type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(payload),\r\n        })\r\n            .then((res) => {\r\n            if (res.status == 200) {\r\n                return res.json();\r\n            }\r\n            })\r\n            .then((res) => {\r\n            console.log(res);\r\n            onSubmit();\r\n            })\r\n        );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"width80 p-2 shadow center\">\r\n        <Grid>\r\n          <Form className=\"my-2\" onSubmit={this.handleSubmit}>\r\n            <Row>\r\n              <Column>\r\n                <TextInput\r\n                  required\r\n                  name={this.state.keyNameField}\r\n                  onChange={this.handleTextInputChange}\r\n                  placeholder=\"Api Key Name\"\r\n                  labelText={\r\n                    <FormLabel>\r\n                      Api Key Name <b className=\"fontRed\">*</b>\r\n                      <Tooltip>Unique API Key Name</Tooltip>\r\n                    </FormLabel>\r\n                  }\r\n                />\r\n              </Column>\r\n              <Column>\r\n                <TextInput\r\n                  type=\"email\"\r\n                  required\r\n                  placeholder=\"Issued To\"\r\n                  name={this.state.issuedTo }\r\n                  onChange={this.handleTextInputChange }\r\n                  onBlur={this.handleTextIssuedToInput}\r\n                  labelText={\r\n                    <FormLabel>\r\n                      Issued To <b className=\"fontRed\">*</b>\r\n                      <Tooltip>User id requesting for access</Tooltip>\r\n                      {this.state.inValidEmail && (\r\n                        <small className=\"fontRed\">\r\n                          <br />\r\n                          <b>\r\n                            Please provide a valid email. Only IBM id allowed\r\n                          </b>\r\n                        </small>\r\n                      )}\r\n                    </FormLabel>\r\n                  }\r\n                />\r\n              </Column>\r\n            </Row>\r\n            <br />\r\n            <br />\r\n            <Row>\r\n              <Column>\r\n                <FormGroup\r\n                  legendText={\r\n                    <FormLabel>\r\n                      Scopes\r\n                      <Tooltip>\r\n                        Select API's for which access is required\r\n                      </Tooltip>\r\n                      {this.state.inValidScope && (\r\n                        <b className=\"fontRed\">\r\n                          <br />\r\n                          <small>!!Please select atleast one scope</small>\r\n                        </b>\r\n                      )}\r\n                    </FormLabel>\r\n                  }\r\n                >\r\n                  <Row>\r\n                    <Column>\r\n                      <FormGroup\r\n                        legendText=\"Incident\"\r\n                        onClick={(e) => {\r\n                          if (e.target.value == undefined) return;\r\n                          const { incidents } = this.state;\r\n                          incidents[e.target.value].checked = e.target.checked;\r\n                          this.setState({\r\n                            incidents,\r\n                            incidentsSelectAll: false,\r\n                            [e.target.name]: e.target.value,\r\n                          });\r\n                        }}\r\n                      >\r\n                        <div className=\"box\">\r\n                          <Checkbox\r\n                            id=\"selectAllIncidents\"\r\n                            labelText=\"Select All\"\r\n                            onChange={(isChecked) =>\r\n                              this.handleSelectAll(isChecked, \"incidents\")\r\n                            }\r\n                            checked={this.state.incidentsSelectAll}\r\n                          />\r\n                          {this.state.incidents &&\r\n                            this.state.incidents.map((incident, i) => (\r\n                              <Checkbox\r\n                                key={incident.id}\r\n                                value={i}\r\n                                id={incident.id}\r\n                                labelText={incident.label}\r\n                                checked={this.state.incidents[i].checked}\r\n                              />\r\n                            ))}\r\n                        </div>\r\n                      </FormGroup>\r\n                    </Column>\r\n                    <Column>\r\n                      <FormGroup\r\n                        legendText=\"Chat Platform\"\r\n                        onClick={(e) => {\r\n                          if (e.target.value == undefined) return;\r\n                          const { plateformScopes } = this.state;\r\n                          plateformScopes[e.target.value].checked =\r\n                            e.target.checked;\r\n                          this.setState({\r\n                            plateformScopes,\r\n                            plateformScopesSelectAll: false,\r\n                            [e.target.name]: e.target.value,\r\n                          });\r\n                        }}\r\n                      >\r\n                        <div className=\"box\">\r\n                          <Checkbox\r\n                            id=\"selectAllplateformScopes\"\r\n                            labelText=\"Select All\"\r\n                            onChange={(isChecked) =>\r\n                              this.handleSelectAll(isChecked, \"plateformScopes\")\r\n                            }\r\n                            checked={this.state.plateformScopesSelectAll}\r\n                          />\r\n                          {this.state.plateformScopes &&\r\n                            this.state.plateformScopes.map((scope, i) => (\r\n                              <Checkbox\r\n                                key={scope.id}\r\n                                value={i}\r\n                                id={scope.id}\r\n                                labelText={scope.label}\r\n                                checked={this.state.plateformScopes[i]?.checked}\r\n                              />\r\n                            ))}\r\n                        </div>\r\n                      </FormGroup>\r\n                    </Column>\r\n                  </Row>\r\n                </FormGroup>\r\n              </Column>\r\n            </Row>\r\n            <Row>\r\n              <Column>\r\n                {(this.state.inValidEmail || this.state.inValidScope) && (\r\n                  <small>\r\n                    <b className=\"fontRed\">\r\n                      ! Please fill all the mandatory fields before proceeding.\r\n                    </b>\r\n                  </small>\r\n                )}\r\n                {\r\n                  this.state['specialCharacterErr'] &&\r\n                  <small className=\"fontRed\">\r\n                      <b className=\"errorMsg specialCharErr\">{this.state['specialCharacterErr']}</b>\r\n                  </small>\r\n              }\r\n              </Column>\r\n              <Column>\r\n                <Button\r\n                  kind=\"secondary\"\r\n                  className=\"mx-2\"\r\n                  onClick={this.props.onClose}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button type=\"submit\" className=\"mx-2\">\r\n                  Submit\r\n                </Button>\r\n              </Column>\r\n            </Row>\r\n          </Form>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default APIKeyForm;\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\ButtonSettings.jsx",["1707"],"import React, { Component } from \"react\";\r\nimport {\r\n  Accordion,\r\n  AccordionItem,\r\n  Button,\r\n  Column,\r\n  Grid,\r\n  Row,\r\n  Select,\r\n  SelectItem,\r\n  Tooltip,\r\n  InlineNotification,\r\n} from \"carbon-components-react\";\r\n\r\nimport { trackPromise } from \"react-promise-tracker\";\r\n\r\nclass ButtonSettings extends Component {\r\n  state = {\r\n    updateStatus: \"enabled\",\r\n    addComment: true,\r\n    toolInitiateComment: true,\r\n    enableOwner: \"\",\r\n    showNotification: false,\r\n    notificationProps: {\r\n        kind: \"error\",\r\n        lowContrast: false,\r\n        role: \"alert\",\r\n        title: \"\",\r\n        subtitle: \"\",\r\n        iconDescription: \"describes the close button\",\r\n        statusIconDescription: \"describes the status icon\",\r\n        hideCloseButton: false,\r\n      }\r\n  };\r\n\r\n  componentDidMount() {\r\n      console.log(`${this.props.updateStatus}----${this.props.addComment}----${this.props.toolInitiateComment}`);\r\n    this.setState({\r\n        updateStatus : this.props.updateStatus,\r\n        addComment : this.props.addComment,\r\n        toolInitiateComment : this.props.toolInitiateComment,\r\n        enableOwner : this.props.enableOwner,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @description Toggle showNotification property for inline error notification\r\n   * @param {*} flag\r\n   */\r\n   toggleErrorNotification = (flag) => {\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      showNotification: flag,\r\n    }));\r\n  };\r\n\r\n\r\n  submitAndContinue = (e) => {\r\n    e.preventDefault();\r\n    const saveButtonData = {\r\n        statusEnabled: this.state.updateStatus,\r\n        commentsEnabled: this.state.addComment,\r\n        toolInitiateComment: this.state.toolInitiateComment,\r\n        enableOwner: this.state.enableOwner ?? \"\",\r\n        acc_id: this.props.accId\r\n    };\r\n    console.log(`saveButtonData-----${JSON.stringify(saveButtonData)}`);\r\n    trackPromise( fetch(\"/mui/saveAccountButtonSettings\",\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n                \"Content-type\": \"application/json\",\r\n              },\r\n        body: JSON.stringify(saveButtonData),\r\n      }).then(async (result) => {\r\n            if (result.status == 200) {\r\n              const { status, message } = await result.json();\r\n              this.setState((prevState) => ({\r\n                showNotification : true,\r\n                notificationProps: {\r\n                    ...prevState[\"notificationProps\"],\r\n                    subtitle: message,\r\n                    kind: status === 'ok' ? 'success' : 'error',\r\n                    title: status === 'ok' ? 'Success: ' : 'Error: ', \r\n                  }\r\n              }));\r\n            }\r\n      })\r\n       \r\n      );\r\n  };\r\n  \r\n  handleChange = (e) => {\r\n    const {value, name} = e.target;\r\n    let finalVal = value;\r\n    if(name === 'addComment' || name === 'toolInitiateComment'){\r\n        finalVal = value === \"enabled\" ? true : false;\r\n    }\r\n    this.setState({\r\n        [name]: finalVal\r\n    })\r\n    \r\n  }\r\n\r\n  render() {\r\n    let inlineNotification = (\r\n        <InlineNotification {...this.state.notificationProps} onCloseButtonClick={() =>  {this.toggleErrorNotification(false)}} />\r\n      );\r\n    return (\r\n        <div>\r\n            <div className=\"itsm-settings-notification\">\r\n                {this.state.showNotification && inlineNotification}\r\n            </div>\r\n            <Row>\r\n                <Column>\r\n                <div className=\"width80 itsm-settings-accordion p-2 shadow center\">\r\n                    <Accordion>\r\n                    <AccordionItem title='ITSM Settings'>\r\n                        <Grid>\r\n                        <Row>\r\n                            <Column lg={4}>\r\n                                <div className=\"display-inline-flex\">\r\n                                <Select\r\n                                    className=\"labelFont\"\r\n                                    id=\"updateStatus\"\r\n                                    labelText={\r\n                                    <>\r\n                                        Update Status <b className=\"fontRed\">*</b>\r\n                                        <Tooltip>\r\n                                            <b>Read and Write Disabled</b> :: Incident status wouldn't display in the channel dashboard and no status update would happen in ITSM system via channel <br /><br />\r\n                                            <b>Read and Write Enabled</b> :: Incident status would be retrieved from ITSM system and status update can be done via channel<br /><br />\r\n                                            <b>Read Only - No Write</b> :: Incident status would be retrieved from ITSM system but no update would happen via channel \r\n                                        </Tooltip>\r\n                                    </>\r\n                                    }\r\n                                    defaultValue={this.props.updateStatus ||  \"enabled\"}\r\n                                    name=\"updateStatus\"\r\n                                    onChange={this.handleChange}\r\n                                    required\r\n                                >\r\n                                    <SelectItem value=\"enabled\" text=\"Read and Write enabled\" />\r\n                                    <SelectItem value=\"disabled\" text=\"Read and Write disabled\" />\r\n                                    <SelectItem value=\"read\" text=\"Read Only - No Write\" />\r\n                                </Select>\r\n                                </div>\r\n                            </Column>\r\n                            <Column lg={4}>\r\n                                <div className=\"display-inline-flex\">\r\n                                <Select\r\n                                    className=\"labelFont\"\r\n                                    id=\"addComment\"\r\n                                    labelText={\r\n                                    <>\r\n                                        Add Comment <b className=\"fontRed\">*</b>\r\n                                        <Tooltip>\r\n                                            <b>Disabled</b> :: Comments can't be added to the ITSM system<br /><br />\r\n                                            <b>Enabled</b> :: Comments can be added to the ITSM system \r\n                                        </Tooltip>\r\n                                    </>\r\n                                    }\r\n                                    defaultValue={this.props.addComment ? \"enabled\" : \"disabled\"}\r\n                                    name=\"addComment\"\r\n                                    onChange={this.handleChange}\r\n                                    required\r\n                                >\r\n                                    <SelectItem value=\"disabled\" text=\"Disabled\" />\r\n                                    <SelectItem value=\"enabled\" text=\"Enabled\" />\r\n                                </Select>\r\n                                </div>\r\n                            </Column>\r\n                            <Column lg={4}>\r\n                                <div className=\"display-inline-flex\">\r\n                                <Select\r\n                                    className=\"labelFont\"\r\n                                    id=\"toolInitiateComment\"\r\n                                    labelText={\r\n                                    <>\r\n                                        Channel Info update on ITSM <b className=\"fontRed\">*</b>\r\n                                        <Tooltip>\r\n                                            <b>Disabled</b> :: Channel details willn't get added to the ITSM as comments<br /><br />\r\n                                            <b>Enabled</b> :: Channel details will get added to the ITSM as comments \r\n                                        </Tooltip>\r\n                                    </>\r\n                                    }\r\n                                    defaultValue={this.props.toolInitiateComment ? \"enabled\" : \"disabled\"}\r\n                                    name=\"toolInitiateComment\"\r\n                                    onChange={this.handleChange}\r\n                                    required\r\n                                >\r\n                                    <SelectItem value=\"disabled\" text=\"Disabled\" />\r\n                                    <SelectItem value=\"enabled\" text=\"Enabled\" />\r\n                                </Select>\r\n                                </div>\r\n                            </Column>\r\n                            \r\n                        </Row>\r\n                        <Row>\r\n                            <Column lg={6}>\r\n                    <div className=\"itsmGroup\">\r\n                                    \r\n                                            <Select\r\n                                            className=\"labelFont\"\r\n                                                id=\"enableOwner\"\r\n                                                labelText={\r\n                                                <span>Owner Assignment on ITSM System \r\n                                                <Tooltip>Assigns owner to the Incident via collaboration platform,<br /><br />\r\n                                                    Option 1 - Assignment of the owner can't be done<br /><br />\r\n                                                    Option 2 - If the email id of the user in the collaboration platform and the ITSM sysem are the same, this option can be selected<br /><br />\r\n                                                    Option 3 - If the email id of the user in the collaboration platform and the ITSM sysem is different, this option can be selected\r\n                                                </Tooltip>\r\n                                                </span>\r\n                                                }\r\n                                                name=\"enableOwner\"\r\n                                                onChange={this.handleChange}\r\n                                                defaultValue={this.props.enableOwner || \"\"}\r\n                                            >\r\n                                                <SelectItem\r\n                                                hidden\r\n                                                value=\"\"\r\n                                                text=\"Choose an option\"\r\n                                                />\r\n                                                <SelectItem value=\"disabled\" text=\"Disabled\" selected={this.props.enableOwner === \"disabled\"} />\r\n                                                <SelectItem value=\"enableSameOwner\" text=\"Enable Owner Assignment if email id on the Collaboration platform and ITSM System are the same\" selected={this.props.enableOwner === \"enableSameOwner\"} />\r\n                                                <SelectItem value=\"enableDiffOwner\" text=\"Enable Owner Assignment if email id on the Collaboration platform and ITSM System are different\" selected={this.props.enableOwner === \"enableDiffOwner\"} />\r\n                                            </Select>\r\n                                    <br />\r\n                                </div>\r\n                            </Column>\r\n                            <Column lg={6} className='save-button'>\r\n                                <div className=\"btnCommon\">\r\n                                    <div>\r\n                                    <Button\r\n                                        className=\"btnMargin saveData\"\r\n                                        kind=\"secondary\"\r\n                                        key=\"saveData\"\r\n                                        onClick={this.submitAndContinue}\r\n                                    >\r\n                                        Save\r\n                                    </Button>\r\n                                    </div>\r\n                                </div>\r\n                            </Column>\r\n                        </Row>\r\n                        </Grid>\r\n                        \r\n                    </AccordionItem>\r\n                    </Accordion>\r\n                </div>\r\n                </Column>\r\n            </Row>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ButtonSettings;\r\n","C:\\Users\\ParagJadhavMr\\Documents\\ChatOps\\kyndryl-services-chatops\\storeservices\\management-ui\\src\\components\\Key.jsx",["1708","1709"],"import React, { Component } from \"react\";\r\nimport {\r\n  Accordion,\r\n  AccordionItem,\r\n  Button,\r\n  Column,\r\n  CopyButton,\r\n  Grid,\r\n  Row,\r\n  TextInput,\r\n  Checkbox\r\n} from \"carbon-components-react\";\r\nimport {\r\n  Copy32,\r\n  Information32,\r\n  Reset32,\r\n  TrashCan32,\r\n} from \"@carbon/icons-react\";\r\nimport { trackPromise } from \"react-promise-tracker\";\r\n\r\nclass Key extends Component {\r\n  state = {\r\n    keyName: \"\",\r\n    keyValue: \"\",\r\n    // allowPlainAuth: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      ...this.props.keyObj,\r\n    });\r\n  }\r\n  saveAuth(name, event) {\r\n    this.setState({\r\n        [event.target.name]: event.target.checked,\r\n      });\r\n      const saveAuthData = {\r\n        allowApi: event.target.checked,\r\n        acc_id: this.props.accountCode,\r\n        keyName: this.state.keyName\r\n      };\r\n      trackPromise( fetch(\"/mui/saveAuth\",\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n                \"Content-type\": \"application/json\",\r\n              },\r\n        body: JSON.stringify(saveAuthData),\r\n      }).then(async (result) => {\r\n            if (result.status == 200) {\r\n              const { retrievedData } = await result.json();\r\n               this.setState({\r\n                ...retrievedData,\r\n              });\r\n            }\r\n      })\r\n       \r\n      );\r\n  \r\n      \r\n  };\r\n  reGenerateKey = async () => {\r\n    const { keyName } = this.state;\r\n    const { accountCode, onRegenerateKey } = this.props;\r\n    const payload = {\r\n      accCode: accountCode,\r\n      keyName: keyName,\r\n    };\r\n    let res = fetch(`/mui/reGenerateCKKey`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(payload),\r\n    });\r\n\r\n    trackPromise(res);\r\n\r\n    res = await res;\r\n\r\n    const { data } = await res.json();\r\n    const newKey = data.keys[keyName];\r\n\r\n    this.setState({\r\n      keyValue: newKey,\r\n    });\r\n    onRegenerateKey(newKey);\r\n  };\r\n\r\n  render() {\r\n    const { accountCode, getInfo, onDelete } = this.props;\r\n    const { keyName, keyValue, allowPlainAuth } = this.state;\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Column>\r\n                    <p className=\"externalLink\" >\r\n                        Click <a className=\"externalLinkClass\" href=\"https://kyndryl.sharepoint.com/sites/ChatOps/SitePages/ChatOps-APIS.aspx\" target=\"_blank\" rel=\"noopener noreferrer\" >HERE</a> to know more about using signed payload\r\n                    </p>                      \r\n                </Column>\r\n            </Row>\r\n            <Row>\r\n                <Column>\r\n                <div className=\"width80 p-2 shadow center\">\r\n                    <Accordion>\r\n                    <AccordionItem title={keyName}>\r\n                        <Grid>\r\n                        <Row>\r\n                            <Column lg={3}>\r\n                                <div className=\"display-inline-flex\">\r\n                                    <TextInput\r\n                                    labelText=\"Key Name\"\r\n                                    id=\"keyName\"\r\n                                    defaultValue={keyName}\r\n                                    readOnly\r\n                                    />\r\n                                    <div className=\"mx-2 pt-18\">\r\n                                    <CopyButton\r\n                                        onClick={() => {\r\n                                        navigator.clipboard.writeText(keyName);\r\n                                        }}\r\n                                    />\r\n                                    </div>\r\n                                </div>\r\n                            </Column>\r\n                            <Column lg={3}>\r\n                            <div className=\"display-inline-flex\">\r\n                                <TextInput\r\n                                labelText=\"Source Id\"\r\n                                id=\"sourceid\"\r\n                                defaultValue={accountCode}\r\n                                readOnly\r\n                                />\r\n                                <div className=\"mx-2 pt-18\">\r\n                                <CopyButton\r\n                                    onClick={() => {\r\n                                    navigator.clipboard.writeText(accountCode);\r\n                                    }}\r\n                                />\r\n                                </div>\r\n                            </div>\r\n                            </Column>\r\n                            <Column lg={4}>\r\n                            <TextInput\r\n                                labelText=\"API key\"\r\n                                id=\"apiKey\"\r\n                                defaultValue={keyValue}\r\n                                readOnly\r\n                            />\r\n                            </Column>\r\n                            <Column lg={2}>\r\n                            <div>\r\n                                <br />\r\n                            </div>\r\n                            <div className=\"display-inline-flex pt-25\">\r\n                                <Button\r\n                                kind=\"ghost\"\r\n                                renderIcon={Copy32}\r\n                                iconDescription=\"Copy to clipboard\"\r\n                                hasIconOnly\r\n                                onClick={() => {\r\n                                    navigator.clipboard.writeText(keyValue);\r\n                                }}\r\n                                />\r\n                                <Button\r\n                                kind=\"ghost\"\r\n                                renderIcon={Reset32}\r\n                                iconDescription=\"Regenerate Key\"\r\n                                hasIconOnly\r\n                                onClick={this.reGenerateKey}\r\n                                />\r\n                                <Button\r\n                                kind=\"ghost\"\r\n                                renderIcon={TrashCan32}\r\n                                iconDescription=\"Delete\"\r\n                                hasIconOnly\r\n                                onClick={onDelete}\r\n                                />\r\n                                <Button\r\n                                kind=\"ghost\"\r\n                                renderIcon={Information32}\r\n                                iconDescription=\"Click to see more information\"\r\n                                hasIconOnly\r\n                                onClick={getInfo}\r\n                                />\r\n                                <div className=\"\">\r\n                                    <Checkbox\r\n                                        labelText=\"Allow auth via API key [Less Secure]\"\r\n                                        id={\"allowPlainAuth_\" + keyName}\r\n                                        name={keyName}\r\n                                        // defaultChecked={allowPlainAuth} \r\n                                        checked={this.state.allowPlainAuth}\r\n                                        onClick={(event) => { this.saveAuth('checkbox-1', event)}}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            </Column>\r\n                        </Row>\r\n                        </Grid>\r\n                    </AccordionItem>\r\n                    </Accordion>\r\n                </div>\r\n                </Column>\r\n            </Row>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Key;\r\n",{"ruleId":"1710","severity":1,"message":"1711","line":3,"column":40,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":50},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1715","line":4,"column":38,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1716","severity":1,"message":"1717","line":5,"column":5,"nodeType":"1718","messageId":"1719","endLine":7,"endColumn":8},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1720","line":3,"column":8,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":19},{"ruleId":"1710","severity":1,"message":"1721","line":5,"column":8,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":18},{"ruleId":"1710","severity":1,"message":"1722","line":6,"column":8,"nodeType":"1712","messageId":"1713","endLine":6,"endColumn":26},{"ruleId":"1710","severity":1,"message":"1723","line":7,"column":38,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":49},{"ruleId":"1710","severity":1,"message":"1724","line":7,"column":51,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":59},{"ruleId":"1710","severity":1,"message":"1725","line":7,"column":61,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":65},{"ruleId":"1726","severity":1,"message":"1727","line":50,"column":116,"nodeType":"1728","endLine":50,"endColumn":169},{"ruleId":"1729","severity":1,"message":"1730","line":50,"column":146,"nodeType":"1731","messageId":"1732","endLine":50,"endColumn":148},{"ruleId":"1726","severity":1,"message":"1727","line":51,"column":114,"nodeType":"1728","endLine":51,"endColumn":167},{"ruleId":"1729","severity":1,"message":"1730","line":51,"column":144,"nodeType":"1731","messageId":"1732","endLine":51,"endColumn":146},{"ruleId":"1726","severity":1,"message":"1727","line":52,"column":118,"nodeType":"1728","endLine":52,"endColumn":171},{"ruleId":"1729","severity":1,"message":"1730","line":52,"column":148,"nodeType":"1731","messageId":"1732","endLine":52,"endColumn":150},{"ruleId":"1716","severity":1,"message":"1717","line":3,"column":5,"nodeType":"1718","messageId":"1719","endLine":5,"endColumn":8},{"ruleId":"1710","severity":1,"message":"1733","line":6,"column":3,"nodeType":"1712","messageId":"1713","endLine":6,"endColumn":13},{"ruleId":"1710","severity":1,"message":"1734","line":8,"column":3,"nodeType":"1712","messageId":"1713","endLine":8,"endColumn":12},{"ruleId":"1710","severity":1,"message":"1735","line":10,"column":3,"nodeType":"1712","messageId":"1713","endLine":10,"endColumn":14},{"ruleId":"1710","severity":1,"message":"1736","line":12,"column":3,"nodeType":"1712","messageId":"1713","endLine":12,"endColumn":19},{"ruleId":"1729","severity":1,"message":"1737","line":36,"column":17,"nodeType":"1731","messageId":"1732","endLine":36,"endColumn":19},{"ruleId":"1729","severity":1,"message":"1730","line":138,"column":28,"nodeType":"1731","messageId":"1732","endLine":138,"endColumn":30},{"ruleId":"1710","severity":1,"message":"1738","line":153,"column":49,"nodeType":"1712","messageId":"1713","endLine":153,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1739","line":153,"column":103,"nodeType":"1712","messageId":"1713","endLine":153,"endColumn":113},{"ruleId":"1710","severity":1,"message":"1740","line":158,"column":7,"nodeType":"1712","messageId":"1713","endLine":158,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1741","line":159,"column":7,"nodeType":"1712","messageId":"1713","endLine":159,"endColumn":12},{"ruleId":"1710","severity":1,"message":"1742","line":165,"column":11,"nodeType":"1712","messageId":"1713","endLine":165,"endColumn":25},{"ruleId":"1729","severity":1,"message":"1730","line":180,"column":30,"nodeType":"1731","messageId":"1732","endLine":180,"endColumn":32},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":10,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1725","line":3,"column":17,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":21},{"ruleId":"1710","severity":1,"message":"1743","line":3,"column":23,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":32},{"ruleId":"1710","severity":1,"message":"1734","line":3,"column":34,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":43},{"ruleId":"1710","severity":1,"message":"1744","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":62},{"ruleId":"1710","severity":1,"message":"1745","line":4,"column":10,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":14},{"ruleId":"1710","severity":1,"message":"1746","line":5,"column":10,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":22},{"ruleId":"1716","severity":1,"message":"1717","line":5,"column":5,"nodeType":"1718","messageId":"1719","endLine":7,"endColumn":6},{"ruleId":"1710","severity":1,"message":"1715","line":4,"column":3,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":9},{"ruleId":"1710","severity":1,"message":"1747","line":5,"column":3,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":11},{"ruleId":"1710","severity":1,"message":"1748","line":6,"column":3,"nodeType":"1712","messageId":"1713","endLine":6,"endColumn":9},{"ruleId":"1710","severity":1,"message":"1749","line":7,"column":3,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1750","line":9,"column":3,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":12},{"ruleId":"1710","severity":1,"message":"1751","line":10,"column":3,"nodeType":"1712","messageId":"1713","endLine":10,"endColumn":6},{"ruleId":"1710","severity":1,"message":"1752","line":11,"column":3,"nodeType":"1712","messageId":"1713","endLine":11,"endColumn":6},{"ruleId":"1710","severity":1,"message":"1714","line":14,"column":8,"nodeType":"1712","messageId":"1713","endLine":14,"endColumn":16},{"ruleId":"1729","severity":1,"message":"1730","line":63,"column":31,"nodeType":"1731","messageId":"1732","endLine":63,"endColumn":33},{"ruleId":"1710","severity":1,"message":"1753","line":108,"column":13,"nodeType":"1712","messageId":"1713","endLine":108,"endColumn":21},{"ruleId":"1729","severity":1,"message":"1730","line":136,"column":23,"nodeType":"1731","messageId":"1732","endLine":136,"endColumn":25},{"ruleId":"1710","severity":1,"message":"1747","line":5,"column":3,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":11},{"ruleId":"1729","severity":1,"message":"1730","line":52,"column":31,"nodeType":"1731","messageId":"1732","endLine":52,"endColumn":33},{"ruleId":"1729","severity":1,"message":"1730","line":133,"column":22,"nodeType":"1731","messageId":"1732","endLine":133,"endColumn":24},{"ruleId":"1729","severity":1,"message":"1730","line":172,"column":23,"nodeType":"1731","messageId":"1732","endLine":172,"endColumn":25},{"ruleId":"1729","severity":1,"message":"1730","line":176,"column":25,"nodeType":"1731","messageId":"1732","endLine":176,"endColumn":27},{"ruleId":"1710","severity":1,"message":"1715","line":4,"column":5,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":11},{"ruleId":"1710","severity":1,"message":"1747","line":5,"column":5,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":13},{"ruleId":"1710","severity":1,"message":"1748","line":6,"column":5,"nodeType":"1712","messageId":"1713","endLine":6,"endColumn":11},{"ruleId":"1710","severity":1,"message":"1751","line":10,"column":5,"nodeType":"1712","messageId":"1713","endLine":10,"endColumn":8},{"ruleId":"1710","severity":1,"message":"1754","line":18,"column":10,"nodeType":"1712","messageId":"1713","endLine":18,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1755","line":19,"column":10,"nodeType":"1712","messageId":"1713","endLine":19,"endColumn":27},{"ruleId":"1729","severity":1,"message":"1730","line":52,"column":33,"nodeType":"1731","messageId":"1732","endLine":52,"endColumn":35},{"ruleId":"1710","severity":1,"message":"1753","line":78,"column":15,"nodeType":"1712","messageId":"1713","endLine":78,"endColumn":23},{"ruleId":"1710","severity":1,"message":"1756","line":78,"column":25,"nodeType":"1712","messageId":"1713","endLine":78,"endColumn":33},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1757","line":3,"column":10,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1758","line":3,"column":22,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1745","line":4,"column":10,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":14},{"ruleId":"1710","severity":1,"message":"1759","line":3,"column":10,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1760","line":5,"column":5,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":10},{"ruleId":"1710","severity":1,"message":"1747","line":7,"column":5,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":13},{"ruleId":"1710","severity":1,"message":"1734","line":9,"column":5,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":14},{"ruleId":"1710","severity":1,"message":"1761","line":12,"column":5,"nodeType":"1712","messageId":"1713","endLine":12,"endColumn":11},{"ruleId":"1710","severity":1,"message":"1733","line":13,"column":5,"nodeType":"1712","messageId":"1713","endLine":13,"endColumn":15},{"ruleId":"1710","severity":1,"message":"1762","line":16,"column":5,"nodeType":"1712","messageId":"1713","endLine":16,"endColumn":17},{"ruleId":"1710","severity":1,"message":"1763","line":24,"column":12,"nodeType":"1712","messageId":"1713","endLine":24,"endColumn":19},{"ruleId":"1710","severity":1,"message":"1764","line":42,"column":16,"nodeType":"1712","messageId":"1713","endLine":42,"endColumn":22},{"ruleId":"1710","severity":1,"message":"1765","line":114,"column":13,"nodeType":"1712","messageId":"1713","endLine":114,"endColumn":19},{"ruleId":"1766","severity":1,"message":"1767","line":129,"column":21,"nodeType":"1712","messageId":"1768","endLine":129,"endColumn":34},{"ruleId":"1766","severity":1,"message":"1769","line":134,"column":13,"nodeType":"1712","messageId":"1768","endLine":134,"endColumn":23},{"ruleId":"1710","severity":1,"message":"1770","line":135,"column":13,"nodeType":"1712","messageId":"1713","endLine":135,"endColumn":31},{"ruleId":"1729","severity":1,"message":"1730","line":141,"column":44,"nodeType":"1731","messageId":"1732","endLine":141,"endColumn":46},{"ruleId":"1729","severity":1,"message":"1737","line":150,"column":64,"nodeType":"1731","messageId":"1732","endLine":150,"endColumn":66},{"ruleId":"1729","severity":1,"message":"1737","line":157,"column":60,"nodeType":"1731","messageId":"1732","endLine":157,"endColumn":62},{"ruleId":"1729","severity":1,"message":"1730","line":165,"column":33,"nodeType":"1731","messageId":"1732","endLine":165,"endColumn":35},{"ruleId":"1729","severity":1,"message":"1730","line":165,"column":67,"nodeType":"1731","messageId":"1732","endLine":165,"endColumn":69},{"ruleId":"1729","severity":1,"message":"1737","line":178,"column":51,"nodeType":"1731","messageId":"1732","endLine":178,"endColumn":53},{"ruleId":"1771","severity":1,"message":"1772","line":179,"column":66,"nodeType":"1773","messageId":"1774","endLine":179,"endColumn":68},{"ruleId":"1729","severity":1,"message":"1737","line":180,"column":63,"nodeType":"1731","messageId":"1732","endLine":180,"endColumn":65},{"ruleId":"1729","severity":1,"message":"1730","line":217,"column":34,"nodeType":"1731","messageId":"1732","endLine":217,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1775","line":228,"column":13,"nodeType":"1712","messageId":"1713","endLine":228,"endColumn":29},{"ruleId":"1710","severity":1,"message":"1776","line":229,"column":13,"nodeType":"1712","messageId":"1713","endLine":229,"endColumn":22},{"ruleId":"1710","severity":1,"message":"1777","line":232,"column":13,"nodeType":"1712","messageId":"1713","endLine":232,"endColumn":22},{"ruleId":"1710","severity":1,"message":"1778","line":233,"column":13,"nodeType":"1712","messageId":"1713","endLine":233,"endColumn":18},{"ruleId":"1771","severity":1,"message":"1772","line":249,"column":70,"nodeType":"1773","messageId":"1774","endLine":249,"endColumn":72},{"ruleId":"1779","severity":1,"message":"1780","line":272,"column":129,"nodeType":"1773","messageId":"1781","endLine":272,"endColumn":160},{"ruleId":"1771","severity":1,"message":"1772","line":281,"column":68,"nodeType":"1773","messageId":"1774","endLine":281,"endColumn":70},{"ruleId":"1710","severity":1,"message":"1782","line":282,"column":21,"nodeType":"1712","messageId":"1713","endLine":282,"endColumn":29},{"ruleId":"1710","severity":1,"message":"1783","line":292,"column":21,"nodeType":"1712","messageId":"1713","endLine":292,"endColumn":31},{"ruleId":"1766","severity":1,"message":"1784","line":293,"column":21,"nodeType":"1712","messageId":"1768","endLine":293,"endColumn":28},{"ruleId":"1710","severity":1,"message":"1785","line":294,"column":17,"nodeType":"1712","messageId":"1713","endLine":294,"endColumn":27},{"ruleId":"1766","severity":1,"message":"1786","line":298,"column":21,"nodeType":"1712","messageId":"1768","endLine":298,"endColumn":31},{"ruleId":"1766","severity":1,"message":"1784","line":299,"column":21,"nodeType":"1712","messageId":"1768","endLine":299,"endColumn":28},{"ruleId":"1766","severity":1,"message":"1784","line":304,"column":21,"nodeType":"1712","messageId":"1768","endLine":304,"endColumn":28},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1757","line":7,"column":10,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1758","line":7,"column":22,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1715","line":7,"column":38,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":7,"column":45,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":7,"column":60,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1788","line":9,"column":10,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":23},{"ruleId":"1710","severity":1,"message":"1789","line":9,"column":25,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":31},{"ruleId":"1710","severity":1,"message":"1790","line":9,"column":33,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":38},{"ruleId":"1710","severity":1,"message":"1745","line":9,"column":41,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":45},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1729","severity":1,"message":"1730","line":171,"column":41,"nodeType":"1731","messageId":"1732","endLine":171,"endColumn":43},{"ruleId":"1710","severity":1,"message":"1791","line":181,"column":13,"nodeType":"1712","messageId":"1713","endLine":181,"endColumn":26},{"ruleId":"1710","severity":1,"message":"1792","line":182,"column":13,"nodeType":"1712","messageId":"1713","endLine":182,"endColumn":26},{"ruleId":"1710","severity":1,"message":"1793","line":183,"column":13,"nodeType":"1712","messageId":"1713","endLine":183,"endColumn":17},{"ruleId":"1710","severity":1,"message":"1794","line":184,"column":13,"nodeType":"1712","messageId":"1713","endLine":184,"endColumn":17},{"ruleId":"1710","severity":1,"message":"1725","line":5,"column":5,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":9},{"ruleId":"1710","severity":1,"message":"1743","line":7,"column":5,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":14},{"ruleId":"1710","severity":1,"message":"1795","line":16,"column":10,"nodeType":"1712","messageId":"1713","endLine":16,"endColumn":18},{"ruleId":"1729","severity":1,"message":"1730","line":43,"column":26,"nodeType":"1731","messageId":"1732","endLine":43,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1730","line":55,"column":38,"nodeType":"1731","messageId":"1732","endLine":55,"endColumn":40},{"ruleId":"1710","severity":1,"message":"1796","line":93,"column":17,"nodeType":"1712","messageId":"1713","endLine":93,"endColumn":29},{"ruleId":"1710","severity":1,"message":"1797","line":103,"column":17,"nodeType":"1712","messageId":"1713","endLine":103,"endColumn":24},{"ruleId":"1710","severity":1,"message":"1798","line":105,"column":17,"nodeType":"1712","messageId":"1713","endLine":105,"endColumn":22},{"ruleId":"1766","severity":1,"message":"1799","line":119,"column":26,"nodeType":"1712","messageId":"1768","endLine":119,"endColumn":27},{"ruleId":"1729","severity":1,"message":"1737","line":121,"column":51,"nodeType":"1731","messageId":"1732","endLine":121,"endColumn":53},{"ruleId":"1710","severity":1,"message":"1800","line":123,"column":25,"nodeType":"1712","messageId":"1713","endLine":123,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1737","line":132,"column":49,"nodeType":"1731","messageId":"1732","endLine":132,"endColumn":51},{"ruleId":"1779","severity":1,"message":"1801","line":133,"column":56,"nodeType":"1773","messageId":"1781","endLine":136,"endColumn":26},{"ruleId":"1771","severity":1,"message":"1772","line":133,"column":71,"nodeType":"1773","messageId":"1774","endLine":133,"endColumn":73},{"ruleId":"1779","severity":1,"message":"1802","line":143,"column":55,"nodeType":"1773","messageId":"1781","endLine":146,"endColumn":26},{"ruleId":"1771","severity":1,"message":"1772","line":143,"column":70,"nodeType":"1773","messageId":"1774","endLine":143,"endColumn":72},{"ruleId":"1729","severity":1,"message":"1730","line":159,"column":38,"nodeType":"1731","messageId":"1732","endLine":159,"endColumn":40},{"ruleId":"1710","severity":1,"message":"1747","line":3,"column":5,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":13},{"ruleId":"1710","severity":1,"message":"1761","line":4,"column":5,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":11},{"ruleId":"1710","severity":1,"message":"1733","line":5,"column":5,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":15},{"ruleId":"1710","severity":1,"message":"1734","line":7,"column":5,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":14},{"ruleId":"1803","severity":1,"message":"1804","line":53,"column":65,"nodeType":"1805","messageId":"1806","endLine":53,"endColumn":67},{"ruleId":"1803","severity":1,"message":"1804","line":53,"column":97,"nodeType":"1805","messageId":"1806","endLine":53,"endColumn":99},{"ruleId":"1729","severity":1,"message":"1730","line":93,"column":49,"nodeType":"1731","messageId":"1732","endLine":93,"endColumn":51},{"ruleId":"1807","severity":1,"message":"1808","line":119,"column":13,"nodeType":"1809","messageId":"1810","endLine":119,"endColumn":23},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1757","line":3,"column":10,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1758","line":3,"column":22,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1745","line":4,"column":10,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":14},{"ruleId":"1729","severity":1,"message":"1730","line":50,"column":20,"nodeType":"1731","messageId":"1732","endLine":50,"endColumn":22},{"ruleId":"1726","severity":1,"message":"1727","line":135,"column":21,"nodeType":"1728","endLine":135,"endColumn":24},{"ruleId":"1729","severity":1,"message":"1730","line":46,"column":20,"nodeType":"1731","messageId":"1732","endLine":46,"endColumn":22},{"ruleId":"1729","severity":1,"message":"1730","line":61,"column":20,"nodeType":"1731","messageId":"1732","endLine":61,"endColumn":22},{"ruleId":"1729","severity":1,"message":"1730","line":187,"column":31,"nodeType":"1731","messageId":"1732","endLine":187,"endColumn":33},{"ruleId":"1807","severity":1,"message":"1808","line":187,"column":45,"nodeType":"1809","messageId":"1810","endLine":187,"endColumn":55},{"ruleId":"1729","severity":1,"message":"1730","line":244,"column":22,"nodeType":"1731","messageId":"1732","endLine":244,"endColumn":24},{"ruleId":"1807","severity":1,"message":"1808","line":267,"column":11,"nodeType":"1809","messageId":"1810","endLine":267,"endColumn":21},{"ruleId":"1726","severity":1,"message":"1727","line":423,"column":21,"nodeType":"1728","endLine":428,"endColumn":22},{"ruleId":"1729","severity":1,"message":"1730","line":555,"column":42,"nodeType":"1731","messageId":"1732","endLine":555,"endColumn":44},{"ruleId":"1771","severity":1,"message":"1811","line":578,"column":66,"nodeType":"1773","messageId":"1812","endLine":578,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1813","line":10,"column":3,"nodeType":"1712","messageId":"1713","endLine":10,"endColumn":14},{"ruleId":"1710","severity":1,"message":"1814","line":21,"column":3,"nodeType":"1712","messageId":"1713","endLine":21,"endColumn":10},{"ruleId":"1710","severity":1,"message":"1815","line":22,"column":3,"nodeType":"1712","messageId":"1713","endLine":22,"endColumn":13},{"ruleId":"1729","severity":1,"message":"1730","line":57,"column":20,"nodeType":"1731","messageId":"1732","endLine":57,"endColumn":22},{"ruleId":"1729","severity":1,"message":"1730","line":95,"column":31,"nodeType":"1731","messageId":"1732","endLine":95,"endColumn":33},{"ruleId":"1729","severity":1,"message":"1730","line":166,"column":64,"nodeType":"1731","messageId":"1732","endLine":166,"endColumn":66},{"ruleId":"1729","severity":1,"message":"1730","line":109,"column":31,"nodeType":"1731","messageId":"1732","endLine":109,"endColumn":33},{"ruleId":"1807","severity":1,"message":"1808","line":109,"column":45,"nodeType":"1809","messageId":"1810","endLine":109,"endColumn":55},{"ruleId":"1729","severity":1,"message":"1730","line":140,"column":14,"nodeType":"1731","messageId":"1732","endLine":140,"endColumn":16},{"ruleId":"1729","severity":1,"message":"1730","line":179,"column":19,"nodeType":"1731","messageId":"1732","endLine":179,"endColumn":21},{"ruleId":"1729","severity":1,"message":"1730","line":179,"column":32,"nodeType":"1731","messageId":"1732","endLine":179,"endColumn":34},{"ruleId":"1729","severity":1,"message":"1730","line":204,"column":20,"nodeType":"1731","messageId":"1732","endLine":204,"endColumn":22},{"ruleId":"1807","severity":1,"message":"1808","line":227,"column":9,"nodeType":"1809","messageId":"1810","endLine":227,"endColumn":19},{"ruleId":"1729","severity":1,"message":"1730","line":324,"column":30,"nodeType":"1731","messageId":"1732","endLine":324,"endColumn":32},{"ruleId":"1816","severity":1,"message":"1817","line":46,"column":7,"nodeType":"1818","endLine":46,"endColumn":9,"suggestions":"1819"},{"ruleId":"1820","severity":1,"message":"1821","line":136,"column":17,"nodeType":"1822","messageId":"1823","endLine":136,"endColumn":50,"fix":"1824"},{"ruleId":"1766","severity":1,"message":"1825","line":180,"column":17,"nodeType":"1712","messageId":"1768","endLine":180,"endColumn":31},{"ruleId":"1766","severity":1,"message":"1826","line":182,"column":21,"nodeType":"1712","messageId":"1768","endLine":182,"endColumn":28},{"ruleId":"1766","severity":1,"message":"1799","line":183,"column":25,"nodeType":"1712","messageId":"1768","endLine":183,"endColumn":26},{"ruleId":"1766","severity":1,"message":"1827","line":184,"column":25,"nodeType":"1712","messageId":"1768","endLine":184,"endColumn":32},{"ruleId":"1710","severity":1,"message":"1828","line":17,"column":31,"nodeType":"1712","messageId":"1713","endLine":17,"endColumn":41},{"ruleId":"1710","severity":1,"message":"1829","line":13,"column":3,"nodeType":"1712","messageId":"1713","endLine":13,"endColumn":11},{"ruleId":"1816","severity":1,"message":"1830","line":62,"column":6,"nodeType":"1818","endLine":62,"endColumn":8,"suggestions":"1831"},{"ruleId":"1710","severity":1,"message":"1829","line":13,"column":3,"nodeType":"1712","messageId":"1713","endLine":13,"endColumn":11},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1757","line":7,"column":10,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1758","line":7,"column":22,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1715","line":7,"column":38,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":7,"column":45,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":7,"column":60,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1788","line":9,"column":10,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":23},{"ruleId":"1710","severity":1,"message":"1789","line":9,"column":25,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":31},{"ruleId":"1710","severity":1,"message":"1790","line":9,"column":33,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":38},{"ruleId":"1710","severity":1,"message":"1745","line":9,"column":41,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":45},{"ruleId":"1710","severity":1,"message":"1715","line":14,"column":3,"nodeType":"1712","messageId":"1713","endLine":14,"endColumn":9},{"ruleId":"1710","severity":1,"message":"1832","line":34,"column":15,"nodeType":"1712","messageId":"1713","endLine":34,"endColumn":25},{"ruleId":"1710","severity":1,"message":"1833","line":44,"column":9,"nodeType":"1712","messageId":"1713","endLine":44,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1834","line":50,"column":9,"nodeType":"1712","messageId":"1713","endLine":50,"endColumn":13},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1757","line":7,"column":10,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1758","line":7,"column":22,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1715","line":7,"column":38,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":7,"column":45,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":7,"column":60,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1788","line":9,"column":10,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":23},{"ruleId":"1710","severity":1,"message":"1789","line":9,"column":25,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":31},{"ruleId":"1710","severity":1,"message":"1790","line":9,"column":33,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":38},{"ruleId":"1710","severity":1,"message":"1745","line":9,"column":41,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":45},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1729","severity":1,"message":"1730","line":96,"column":41,"nodeType":"1731","messageId":"1732","endLine":96,"endColumn":43},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1757","line":7,"column":10,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1758","line":7,"column":22,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1715","line":7,"column":38,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":7,"column":45,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":7,"column":60,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1788","line":9,"column":10,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":23},{"ruleId":"1710","severity":1,"message":"1789","line":9,"column":25,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":31},{"ruleId":"1710","severity":1,"message":"1790","line":9,"column":33,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":38},{"ruleId":"1710","severity":1,"message":"1745","line":9,"column":41,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":45},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1757","line":7,"column":10,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1758","line":7,"column":22,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1715","line":7,"column":38,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":7,"column":45,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":7,"column":60,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1788","line":9,"column":10,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":23},{"ruleId":"1710","severity":1,"message":"1789","line":9,"column":25,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":31},{"ruleId":"1710","severity":1,"message":"1790","line":9,"column":33,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":38},{"ruleId":"1710","severity":1,"message":"1745","line":9,"column":41,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":45},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1729","severity":1,"message":"1730","line":100,"column":41,"nodeType":"1731","messageId":"1732","endLine":100,"endColumn":43},{"ruleId":"1710","severity":1,"message":"1835","line":113,"column":13,"nodeType":"1712","messageId":"1713","endLine":113,"endColumn":37},{"ruleId":"1710","severity":1,"message":"1836","line":114,"column":13,"nodeType":"1712","messageId":"1713","endLine":114,"endColumn":34},{"ruleId":"1710","severity":1,"message":"1837","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":13},{"ruleId":"1710","severity":1,"message":"1838","line":3,"column":37,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1839","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":53},{"ruleId":"1710","severity":1,"message":"1714","line":6,"column":8,"nodeType":"1712","messageId":"1713","endLine":6,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1840","line":14,"column":8,"nodeType":"1712","messageId":"1713","endLine":14,"endColumn":22},{"ruleId":"1841","severity":1,"message":"1842","line":46,"column":17,"nodeType":"1843","messageId":"1732","endLine":46,"endColumn":21},{"ruleId":"1766","severity":1,"message":"1799","line":111,"column":26,"nodeType":"1712","messageId":"1768","endLine":111,"endColumn":27},{"ruleId":"1766","severity":1,"message":"1799","line":117,"column":26,"nodeType":"1712","messageId":"1768","endLine":117,"endColumn":27},{"ruleId":"1766","severity":1,"message":"1799","line":123,"column":26,"nodeType":"1712","messageId":"1768","endLine":123,"endColumn":27},{"ruleId":"1766","severity":1,"message":"1799","line":129,"column":25,"nodeType":"1712","messageId":"1768","endLine":129,"endColumn":26},{"ruleId":"1710","severity":1,"message":"1844","line":281,"column":25,"nodeType":"1712","messageId":"1713","endLine":281,"endColumn":33},{"ruleId":"1729","severity":1,"message":"1730","line":454,"column":41,"nodeType":"1731","messageId":"1732","endLine":454,"endColumn":43},{"ruleId":"1729","severity":1,"message":"1730","line":459,"column":45,"nodeType":"1731","messageId":"1732","endLine":459,"endColumn":47},{"ruleId":"1710","severity":1,"message":"1845","line":465,"column":13,"nodeType":"1712","messageId":"1713","endLine":465,"endColumn":26},{"ruleId":"1729","severity":1,"message":"1730","line":507,"column":41,"nodeType":"1731","messageId":"1732","endLine":507,"endColumn":43},{"ruleId":"1710","severity":1,"message":"1846","line":541,"column":15,"nodeType":"1712","messageId":"1713","endLine":541,"endColumn":23},{"ruleId":"1710","severity":1,"message":"1847","line":542,"column":13,"nodeType":"1712","messageId":"1713","endLine":542,"endColumn":23},{"ruleId":"1710","severity":1,"message":"1848","line":543,"column":13,"nodeType":"1712","messageId":"1713","endLine":543,"endColumn":24},{"ruleId":"1710","severity":1,"message":"1849","line":544,"column":13,"nodeType":"1712","messageId":"1713","endLine":544,"endColumn":26},{"ruleId":"1710","severity":1,"message":"1850","line":546,"column":13,"nodeType":"1712","messageId":"1713","endLine":546,"endColumn":22},{"ruleId":"1710","severity":1,"message":"1851","line":552,"column":13,"nodeType":"1712","messageId":"1713","endLine":552,"endColumn":21},{"ruleId":"1710","severity":1,"message":"1852","line":553,"column":15,"nodeType":"1712","messageId":"1713","endLine":553,"endColumn":29},{"ruleId":"1710","severity":1,"message":"1853","line":554,"column":13,"nodeType":"1712","messageId":"1713","endLine":554,"endColumn":32},{"ruleId":"1710","severity":1,"message":"1854","line":558,"column":13,"nodeType":"1712","messageId":"1713","endLine":558,"endColumn":27},{"ruleId":"1766","severity":1,"message":"1855","line":570,"column":17,"nodeType":"1712","messageId":"1768","endLine":570,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1856","line":570,"column":17,"nodeType":"1712","messageId":"1713","endLine":570,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1857","line":575,"column":13,"nodeType":"1712","messageId":"1713","endLine":575,"endColumn":17},{"ruleId":"1858","severity":1,"message":"1859","line":600,"column":21,"nodeType":"1712","messageId":"1860","endLine":600,"endColumn":26},{"ruleId":"1710","severity":1,"message":"1791","line":601,"column":13,"nodeType":"1712","messageId":"1713","endLine":601,"endColumn":26},{"ruleId":"1729","severity":1,"message":"1730","line":650,"column":66,"nodeType":"1731","messageId":"1732","endLine":650,"endColumn":68},{"ruleId":"1729","severity":1,"message":"1730","line":655,"column":66,"nodeType":"1731","messageId":"1732","endLine":655,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1837","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":13},{"ruleId":"1710","severity":1,"message":"1838","line":3,"column":37,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1839","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":53},{"ruleId":"1710","severity":1,"message":"1714","line":6,"column":8,"nodeType":"1712","messageId":"1713","endLine":6,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1761","line":8,"column":36,"nodeType":"1712","messageId":"1713","endLine":8,"endColumn":42},{"ruleId":"1710","severity":1,"message":"1733","line":8,"column":44,"nodeType":"1712","messageId":"1713","endLine":8,"endColumn":54},{"ruleId":"1710","severity":1,"message":"1840","line":14,"column":8,"nodeType":"1712","messageId":"1713","endLine":14,"endColumn":22},{"ruleId":"1766","severity":1,"message":"1799","line":100,"column":26,"nodeType":"1712","messageId":"1768","endLine":100,"endColumn":27},{"ruleId":"1766","severity":1,"message":"1799","line":106,"column":26,"nodeType":"1712","messageId":"1768","endLine":106,"endColumn":27},{"ruleId":"1766","severity":1,"message":"1799","line":112,"column":26,"nodeType":"1712","messageId":"1768","endLine":112,"endColumn":27},{"ruleId":"1766","severity":1,"message":"1799","line":118,"column":25,"nodeType":"1712","messageId":"1768","endLine":118,"endColumn":26},{"ruleId":"1710","severity":1,"message":"1844","line":270,"column":25,"nodeType":"1712","messageId":"1713","endLine":270,"endColumn":33},{"ruleId":"1729","severity":1,"message":"1730","line":414,"column":41,"nodeType":"1731","messageId":"1732","endLine":414,"endColumn":43},{"ruleId":"1729","severity":1,"message":"1730","line":419,"column":45,"nodeType":"1731","messageId":"1732","endLine":419,"endColumn":47},{"ruleId":"1710","severity":1,"message":"1845","line":425,"column":13,"nodeType":"1712","messageId":"1713","endLine":425,"endColumn":26},{"ruleId":"1729","severity":1,"message":"1730","line":465,"column":41,"nodeType":"1731","messageId":"1732","endLine":465,"endColumn":43},{"ruleId":"1710","severity":1,"message":"1846","line":499,"column":15,"nodeType":"1712","messageId":"1713","endLine":499,"endColumn":23},{"ruleId":"1710","severity":1,"message":"1847","line":500,"column":13,"nodeType":"1712","messageId":"1713","endLine":500,"endColumn":23},{"ruleId":"1710","severity":1,"message":"1848","line":501,"column":13,"nodeType":"1712","messageId":"1713","endLine":501,"endColumn":24},{"ruleId":"1710","severity":1,"message":"1849","line":502,"column":13,"nodeType":"1712","messageId":"1713","endLine":502,"endColumn":26},{"ruleId":"1710","severity":1,"message":"1850","line":504,"column":13,"nodeType":"1712","messageId":"1713","endLine":504,"endColumn":22},{"ruleId":"1710","severity":1,"message":"1851","line":510,"column":13,"nodeType":"1712","messageId":"1713","endLine":510,"endColumn":21},{"ruleId":"1710","severity":1,"message":"1857","line":525,"column":13,"nodeType":"1712","messageId":"1713","endLine":525,"endColumn":17},{"ruleId":"1858","severity":1,"message":"1859","line":541,"column":21,"nodeType":"1712","messageId":"1860","endLine":541,"endColumn":26},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1757","line":7,"column":10,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1758","line":7,"column":22,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1715","line":7,"column":38,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":7,"column":45,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":7,"column":60,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1788","line":9,"column":10,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":23},{"ruleId":"1710","severity":1,"message":"1789","line":9,"column":25,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":31},{"ruleId":"1710","severity":1,"message":"1790","line":9,"column":33,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":38},{"ruleId":"1710","severity":1,"message":"1745","line":9,"column":41,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":45},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1757","line":7,"column":10,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1758","line":7,"column":22,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1715","line":7,"column":38,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":7,"column":45,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":7,"column":60,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1788","line":9,"column":10,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":23},{"ruleId":"1710","severity":1,"message":"1789","line":9,"column":25,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":31},{"ruleId":"1710","severity":1,"message":"1790","line":9,"column":33,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":38},{"ruleId":"1710","severity":1,"message":"1745","line":9,"column":41,"nodeType":"1712","messageId":"1713","endLine":9,"endColumn":45},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1733","line":4,"column":44,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":54},{"ruleId":"1710","severity":1,"message":"1861","line":4,"column":66,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":74},{"ruleId":"1729","severity":1,"message":"1730","line":153,"column":41,"nodeType":"1731","messageId":"1732","endLine":153,"endColumn":43},{"ruleId":"1710","severity":1,"message":"1835","line":175,"column":13,"nodeType":"1712","messageId":"1713","endLine":175,"endColumn":37},{"ruleId":"1710","severity":1,"message":"1862","line":176,"column":13,"nodeType":"1712","messageId":"1713","endLine":176,"endColumn":31},{"ruleId":"1729","severity":1,"message":"1730","line":185,"column":38,"nodeType":"1731","messageId":"1732","endLine":185,"endColumn":40},{"ruleId":"1710","severity":1,"message":"1863","line":188,"column":13,"nodeType":"1712","messageId":"1713","endLine":188,"endColumn":26},{"ruleId":"1729","severity":1,"message":"1730","line":190,"column":39,"nodeType":"1731","messageId":"1732","endLine":190,"endColumn":41},{"ruleId":"1710","severity":1,"message":"1864","line":193,"column":13,"nodeType":"1712","messageId":"1713","endLine":193,"endColumn":34},{"ruleId":"1710","severity":1,"message":"1865","line":215,"column":17,"nodeType":"1712","messageId":"1713","endLine":215,"endColumn":28},{"ruleId":"1710","severity":1,"message":"1866","line":219,"column":13,"nodeType":"1712","messageId":"1713","endLine":219,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1867","line":220,"column":13,"nodeType":"1712","messageId":"1713","endLine":220,"endColumn":32},{"ruleId":"1710","severity":1,"message":"1868","line":221,"column":13,"nodeType":"1712","messageId":"1713","endLine":221,"endColumn":28},{"ruleId":"1710","severity":1,"message":"1869","line":222,"column":13,"nodeType":"1712","messageId":"1713","endLine":222,"endColumn":21},{"ruleId":"1710","severity":1,"message":"1747","line":3,"column":46,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":54},{"ruleId":"1729","severity":1,"message":"1730","line":40,"column":31,"nodeType":"1731","messageId":"1732","endLine":40,"endColumn":33},{"ruleId":"1729","severity":1,"message":"1730","line":118,"column":45,"nodeType":"1731","messageId":"1732","endLine":118,"endColumn":47},{"ruleId":"1729","severity":1,"message":"1737","line":119,"column":24,"nodeType":"1731","messageId":"1732","endLine":119,"endColumn":26},{"ruleId":"1729","severity":1,"message":"1730","line":123,"column":45,"nodeType":"1731","messageId":"1732","endLine":123,"endColumn":47},{"ruleId":"1729","severity":1,"message":"1730","line":126,"column":47,"nodeType":"1731","messageId":"1732","endLine":126,"endColumn":49},{"ruleId":"1729","severity":1,"message":"1730","line":126,"column":104,"nodeType":"1731","messageId":"1732","endLine":126,"endColumn":106},{"ruleId":"1729","severity":1,"message":"1730","line":130,"column":35,"nodeType":"1731","messageId":"1732","endLine":130,"endColumn":37},{"ruleId":"1729","severity":1,"message":"1730","line":130,"column":72,"nodeType":"1731","messageId":"1732","endLine":130,"endColumn":74},{"ruleId":"1729","severity":1,"message":"1730","line":150,"column":34,"nodeType":"1731","messageId":"1732","endLine":150,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1730","line":188,"column":41,"nodeType":"1731","messageId":"1732","endLine":188,"endColumn":43},{"ruleId":"1729","severity":1,"message":"1737","line":217,"column":38,"nodeType":"1731","messageId":"1732","endLine":217,"endColumn":40},{"ruleId":"1729","severity":1,"message":"1730","line":245,"column":65,"nodeType":"1731","messageId":"1732","endLine":245,"endColumn":67},{"ruleId":"1729","severity":1,"message":"1730","line":276,"column":101,"nodeType":"1731","messageId":"1732","endLine":276,"endColumn":103},{"ruleId":"1729","severity":1,"message":"1730","line":277,"column":103,"nodeType":"1731","messageId":"1732","endLine":277,"endColumn":105},{"ruleId":"1729","severity":1,"message":"1730","line":278,"column":105,"nodeType":"1731","messageId":"1732","endLine":278,"endColumn":107},{"ruleId":"1729","severity":1,"message":"1730","line":294,"column":64,"nodeType":"1731","messageId":"1732","endLine":294,"endColumn":66},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1757","line":3,"column":10,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1758","line":3,"column":22,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1745","line":4,"column":10,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":14},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1757","line":3,"column":10,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1758","line":3,"column":22,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1745","line":4,"column":10,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":14},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1757","line":3,"column":10,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1758","line":3,"column":22,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1745","line":4,"column":10,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":14},{"ruleId":"1870","severity":1,"message":"1871","line":6,"column":1,"nodeType":"1872","endLine":11,"endColumn":3},{"ruleId":"1710","severity":1,"message":"1747","line":3,"column":5,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":13},{"ruleId":"1710","severity":1,"message":"1733","line":5,"column":5,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":15},{"ruleId":"1729","severity":1,"message":"1730","line":95,"column":36,"nodeType":"1731","messageId":"1732","endLine":95,"endColumn":38},{"ruleId":"1729","severity":1,"message":"1730","line":95,"column":75,"nodeType":"1731","messageId":"1732","endLine":95,"endColumn":77},{"ruleId":"1803","severity":1,"message":"1804","line":150,"column":68,"nodeType":"1805","messageId":"1806","endLine":150,"endColumn":70},{"ruleId":"1803","severity":1,"message":"1804","line":150,"column":100,"nodeType":"1805","messageId":"1806","endLine":150,"endColumn":102},{"ruleId":"1729","severity":1,"message":"1730","line":197,"column":34,"nodeType":"1731","messageId":"1732","endLine":197,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1730","line":197,"column":73,"nodeType":"1731","messageId":"1732","endLine":197,"endColumn":75},{"ruleId":"1729","severity":1,"message":"1730","line":204,"column":50,"nodeType":"1731","messageId":"1732","endLine":204,"endColumn":52},{"ruleId":"1729","severity":1,"message":"1730","line":204,"column":85,"nodeType":"1731","messageId":"1732","endLine":204,"endColumn":87},{"ruleId":"1729","severity":1,"message":"1730","line":253,"column":49,"nodeType":"1731","messageId":"1732","endLine":253,"endColumn":51},{"ruleId":"1710","severity":1,"message":"1873","line":265,"column":15,"nodeType":"1712","messageId":"1713","endLine":265,"endColumn":21},{"ruleId":"1729","severity":1,"message":"1737","line":283,"column":41,"nodeType":"1731","messageId":"1732","endLine":283,"endColumn":43},{"ruleId":"1729","severity":1,"message":"1730","line":287,"column":56,"nodeType":"1731","messageId":"1732","endLine":287,"endColumn":58},{"ruleId":"1729","severity":1,"message":"1730","line":292,"column":73,"nodeType":"1731","messageId":"1732","endLine":292,"endColumn":75},{"ruleId":"1710","severity":1,"message":"1874","line":374,"column":21,"nodeType":"1712","messageId":"1713","endLine":374,"endColumn":33},{"ruleId":"1710","severity":1,"message":"1875","line":375,"column":21,"nodeType":"1712","messageId":"1713","endLine":375,"endColumn":38},{"ruleId":"1710","severity":1,"message":"1876","line":380,"column":21,"nodeType":"1712","messageId":"1713","endLine":380,"endColumn":38},{"ruleId":"1710","severity":1,"message":"1877","line":5,"column":3,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":12},{"ruleId":"1710","severity":1,"message":"1878","line":12,"column":3,"nodeType":"1712","messageId":"1713","endLine":12,"endColumn":9},{"ruleId":"1710","severity":1,"message":"1879","line":19,"column":10,"nodeType":"1712","messageId":"1713","endLine":19,"endColumn":20},{"ruleId":"1729","severity":1,"message":"1730","line":61,"column":34,"nodeType":"1731","messageId":"1732","endLine":61,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1730","line":82,"column":30,"nodeType":"1731","messageId":"1732","endLine":82,"endColumn":32},{"ruleId":"1729","severity":1,"message":"1730","line":130,"column":34,"nodeType":"1731","messageId":"1732","endLine":130,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1737","line":169,"column":45,"nodeType":"1731","messageId":"1732","endLine":169,"endColumn":47},{"ruleId":"1710","severity":1,"message":"1880","line":171,"column":17,"nodeType":"1712","messageId":"1713","endLine":171,"endColumn":27},{"ruleId":"1710","severity":1,"message":"1881","line":172,"column":17,"nodeType":"1712","messageId":"1713","endLine":172,"endColumn":28},{"ruleId":"1710","severity":1,"message":"1882","line":177,"column":17,"nodeType":"1712","messageId":"1713","endLine":177,"endColumn":27},{"ruleId":"1710","severity":1,"message":"1883","line":180,"column":17,"nodeType":"1712","messageId":"1713","endLine":180,"endColumn":30},{"ruleId":"1771","severity":1,"message":"1772","line":183,"column":53,"nodeType":"1773","messageId":"1774","endLine":183,"endColumn":55},{"ruleId":"1710","severity":1,"message":"1884","line":185,"column":21,"nodeType":"1712","messageId":"1713","endLine":185,"endColumn":26},{"ruleId":"1729","severity":1,"message":"1730","line":191,"column":41,"nodeType":"1731","messageId":"1732","endLine":191,"endColumn":43},{"ruleId":"1729","severity":1,"message":"1730","line":193,"column":47,"nodeType":"1731","messageId":"1732","endLine":193,"endColumn":49},{"ruleId":"1729","severity":1,"message":"1730","line":195,"column":47,"nodeType":"1731","messageId":"1732","endLine":195,"endColumn":49},{"ruleId":"1729","severity":1,"message":"1730","line":197,"column":47,"nodeType":"1731","messageId":"1732","endLine":197,"endColumn":49},{"ruleId":"1729","severity":1,"message":"1730","line":204,"column":52,"nodeType":"1731","messageId":"1732","endLine":204,"endColumn":54},{"ruleId":"1729","severity":1,"message":"1730","line":204,"column":75,"nodeType":"1731","messageId":"1732","endLine":204,"endColumn":77},{"ruleId":"1729","severity":1,"message":"1730","line":250,"column":42,"nodeType":"1731","messageId":"1732","endLine":250,"endColumn":44},{"ruleId":"1729","severity":1,"message":"1730","line":250,"column":66,"nodeType":"1731","messageId":"1732","endLine":250,"endColumn":68},{"ruleId":"1726","severity":1,"message":"1727","line":287,"column":21,"nodeType":"1728","endLine":287,"endColumn":73},{"ruleId":"1726","severity":1,"message":"1727","line":288,"column":21,"nodeType":"1728","endLine":288,"endColumn":67},{"ruleId":"1710","severity":1,"message":"1877","line":5,"column":3,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":12},{"ruleId":"1710","severity":1,"message":"1885","line":51,"column":9,"nodeType":"1712","messageId":"1713","endLine":51,"endColumn":18},{"ruleId":"1710","severity":1,"message":"1883","line":57,"column":11,"nodeType":"1712","messageId":"1713","endLine":57,"endColumn":24},{"ruleId":"1771","severity":1,"message":"1772","line":60,"column":47,"nodeType":"1773","messageId":"1774","endLine":60,"endColumn":49},{"ruleId":"1710","severity":1,"message":"1886","line":63,"column":13,"nodeType":"1712","messageId":"1713","endLine":63,"endColumn":27},{"ruleId":"1729","severity":1,"message":"1730","line":75,"column":32,"nodeType":"1731","messageId":"1732","endLine":75,"endColumn":34},{"ruleId":"1729","severity":1,"message":"1730","line":81,"column":39,"nodeType":"1731","messageId":"1732","endLine":81,"endColumn":41},{"ruleId":"1729","severity":1,"message":"1730","line":87,"column":39,"nodeType":"1731","messageId":"1732","endLine":87,"endColumn":41},{"ruleId":"1729","severity":1,"message":"1730","line":93,"column":39,"nodeType":"1731","messageId":"1732","endLine":93,"endColumn":41},{"ruleId":"1729","severity":1,"message":"1730","line":108,"column":45,"nodeType":"1731","messageId":"1732","endLine":108,"endColumn":47},{"ruleId":"1729","severity":1,"message":"1730","line":108,"column":68,"nodeType":"1731","messageId":"1732","endLine":108,"endColumn":70},{"ruleId":"1729","severity":1,"message":"1730","line":191,"column":36,"nodeType":"1731","messageId":"1732","endLine":191,"endColumn":38},{"ruleId":"1729","severity":1,"message":"1730","line":191,"column":60,"nodeType":"1731","messageId":"1732","endLine":191,"endColumn":62},{"ruleId":"1710","severity":1,"message":"1887","line":12,"column":3,"nodeType":"1712","messageId":"1713","endLine":12,"endColumn":12},{"ruleId":"1710","severity":1,"message":"1746","line":16,"column":10,"nodeType":"1712","messageId":"1713","endLine":16,"endColumn":22},{"ruleId":"1710","severity":1,"message":"1888","line":40,"column":7,"nodeType":"1712","messageId":"1713","endLine":40,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1889","line":69,"column":9,"nodeType":"1712","messageId":"1713","endLine":69,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1890","line":75,"column":9,"nodeType":"1712","messageId":"1713","endLine":75,"endColumn":22},{"ruleId":"1710","severity":1,"message":"1851","line":77,"column":9,"nodeType":"1712","messageId":"1713","endLine":77,"endColumn":17},{"ruleId":"1710","severity":1,"message":"1891","line":78,"column":9,"nodeType":"1712","messageId":"1713","endLine":78,"endColumn":21},{"ruleId":"1729","severity":1,"message":"1730","line":89,"column":21,"nodeType":"1731","messageId":"1732","endLine":89,"endColumn":23},{"ruleId":"1729","severity":1,"message":"1730","line":89,"column":40,"nodeType":"1731","messageId":"1732","endLine":89,"endColumn":42},{"ruleId":"1729","severity":1,"message":"1730","line":89,"column":57,"nodeType":"1731","messageId":"1732","endLine":89,"endColumn":59},{"ruleId":"1729","severity":1,"message":"1730","line":101,"column":21,"nodeType":"1731","messageId":"1732","endLine":101,"endColumn":23},{"ruleId":"1729","severity":1,"message":"1730","line":101,"column":39,"nodeType":"1731","messageId":"1732","endLine":101,"endColumn":41},{"ruleId":"1729","severity":1,"message":"1730","line":101,"column":56,"nodeType":"1731","messageId":"1732","endLine":101,"endColumn":58},{"ruleId":"1771","severity":1,"message":"1772","line":104,"column":54,"nodeType":"1773","messageId":"1774","endLine":104,"endColumn":56},{"ruleId":"1729","severity":1,"message":"1730","line":109,"column":35,"nodeType":"1731","messageId":"1732","endLine":109,"endColumn":37},{"ruleId":"1771","severity":1,"message":"1772","line":116,"column":52,"nodeType":"1773","messageId":"1774","endLine":116,"endColumn":54},{"ruleId":"1729","severity":1,"message":"1730","line":121,"column":35,"nodeType":"1731","messageId":"1732","endLine":121,"endColumn":37},{"ruleId":"1771","severity":1,"message":"1772","line":128,"column":49,"nodeType":"1773","messageId":"1774","endLine":128,"endColumn":51},{"ruleId":"1729","severity":1,"message":"1730","line":133,"column":33,"nodeType":"1731","messageId":"1732","endLine":133,"endColumn":35},{"ruleId":"1771","severity":1,"message":"1772","line":140,"column":49,"nodeType":"1773","messageId":"1774","endLine":140,"endColumn":51},{"ruleId":"1729","severity":1,"message":"1730","line":143,"column":23,"nodeType":"1731","messageId":"1732","endLine":143,"endColumn":25},{"ruleId":"1729","severity":1,"message":"1730","line":144,"column":23,"nodeType":"1731","messageId":"1732","endLine":144,"endColumn":25},{"ruleId":"1729","severity":1,"message":"1730","line":152,"column":39,"nodeType":"1731","messageId":"1732","endLine":152,"endColumn":41},{"ruleId":"1771","severity":1,"message":"1772","line":162,"column":53,"nodeType":"1773","messageId":"1774","endLine":162,"endColumn":55},{"ruleId":"1729","severity":1,"message":"1730","line":169,"column":34,"nodeType":"1731","messageId":"1732","endLine":169,"endColumn":36},{"ruleId":"1892","severity":1,"message":"1893","line":289,"column":17,"nodeType":"1894","messageId":"1895","endLine":289,"endColumn":30},{"ruleId":"1710","severity":1,"message":"1896","line":3,"column":8,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1759","line":4,"column":10,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1760","line":6,"column":3,"nodeType":"1712","messageId":"1713","endLine":6,"endColumn":8},{"ruleId":"1710","severity":1,"message":"1747","line":8,"column":3,"nodeType":"1712","messageId":"1713","endLine":8,"endColumn":11},{"ruleId":"1710","severity":1,"message":"1762","line":17,"column":3,"nodeType":"1712","messageId":"1713","endLine":17,"endColumn":15},{"ruleId":"1710","severity":1,"message":"1897","line":22,"column":10,"nodeType":"1712","messageId":"1713","endLine":22,"endColumn":15},{"ruleId":"1729","severity":1,"message":"1730","line":106,"column":32,"nodeType":"1731","messageId":"1732","endLine":106,"endColumn":34},{"ruleId":"1898","severity":1,"message":"1899","line":109,"column":9,"nodeType":"1900","messageId":"1901","endLine":109,"endColumn":61},{"ruleId":"1729","severity":1,"message":"1730","line":344,"column":32,"nodeType":"1731","messageId":"1732","endLine":344,"endColumn":34},{"ruleId":"1729","severity":1,"message":"1730","line":345,"column":27,"nodeType":"1731","messageId":"1732","endLine":345,"endColumn":29},{"ruleId":"1710","severity":1,"message":"1888","line":368,"column":7,"nodeType":"1712","messageId":"1713","endLine":368,"endColumn":16},{"ruleId":"1729","severity":1,"message":"1730","line":410,"column":27,"nodeType":"1731","messageId":"1732","endLine":410,"endColumn":29},{"ruleId":"1729","severity":1,"message":"1730","line":447,"column":29,"nodeType":"1731","messageId":"1732","endLine":447,"endColumn":31},{"ruleId":"1710","severity":1,"message":"1902","line":494,"column":9,"nodeType":"1712","messageId":"1713","endLine":494,"endColumn":24},{"ruleId":"1729","severity":1,"message":"1737","line":495,"column":44,"nodeType":"1731","messageId":"1732","endLine":495,"endColumn":46},{"ruleId":"1710","severity":1,"message":"1903","line":615,"column":9,"nodeType":"1712","messageId":"1713","endLine":615,"endColumn":23},{"ruleId":"1710","severity":1,"message":"1904","line":624,"column":11,"nodeType":"1712","messageId":"1713","endLine":624,"endColumn":21},{"ruleId":"1729","severity":1,"message":"1737","line":626,"column":39,"nodeType":"1731","messageId":"1732","endLine":626,"endColumn":41},{"ruleId":"1729","severity":1,"message":"1730","line":632,"column":28,"nodeType":"1731","messageId":"1732","endLine":632,"endColumn":30},{"ruleId":"1729","severity":1,"message":"1730","line":635,"column":28,"nodeType":"1731","messageId":"1732","endLine":635,"endColumn":30},{"ruleId":"1729","severity":1,"message":"1730","line":637,"column":34,"nodeType":"1731","messageId":"1732","endLine":637,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1730","line":644,"column":21,"nodeType":"1731","messageId":"1732","endLine":644,"endColumn":23},{"ruleId":"1729","severity":1,"message":"1730","line":644,"column":40,"nodeType":"1731","messageId":"1732","endLine":644,"endColumn":42},{"ruleId":"1729","severity":1,"message":"1730","line":644,"column":57,"nodeType":"1731","messageId":"1732","endLine":644,"endColumn":59},{"ruleId":"1729","severity":1,"message":"1730","line":655,"column":21,"nodeType":"1731","messageId":"1732","endLine":655,"endColumn":23},{"ruleId":"1729","severity":1,"message":"1730","line":655,"column":39,"nodeType":"1731","messageId":"1732","endLine":655,"endColumn":41},{"ruleId":"1729","severity":1,"message":"1730","line":655,"column":56,"nodeType":"1731","messageId":"1732","endLine":655,"endColumn":58},{"ruleId":"1771","severity":1,"message":"1772","line":658,"column":54,"nodeType":"1773","messageId":"1774","endLine":658,"endColumn":56},{"ruleId":"1729","severity":1,"message":"1737","line":659,"column":32,"nodeType":"1731","messageId":"1732","endLine":659,"endColumn":34},{"ruleId":"1729","severity":1,"message":"1730","line":664,"column":44,"nodeType":"1731","messageId":"1732","endLine":664,"endColumn":46},{"ruleId":"1771","severity":1,"message":"1811","line":674,"column":57,"nodeType":"1773","messageId":"1812","endLine":674,"endColumn":59},{"ruleId":"1771","severity":1,"message":"1811","line":682,"column":57,"nodeType":"1773","messageId":"1812","endLine":682,"endColumn":59},{"ruleId":"1771","severity":1,"message":"1772","line":692,"column":55,"nodeType":"1773","messageId":"1774","endLine":692,"endColumn":57},{"ruleId":"1729","severity":1,"message":"1730","line":699,"column":38,"nodeType":"1731","messageId":"1732","endLine":699,"endColumn":40},{"ruleId":"1729","severity":1,"message":"1730","line":713,"column":38,"nodeType":"1731","messageId":"1732","endLine":713,"endColumn":40},{"ruleId":"1766","severity":1,"message":"1799","line":722,"column":16,"nodeType":"1712","messageId":"1768","endLine":722,"endColumn":17},{"ruleId":"1729","severity":1,"message":"1730","line":727,"column":39,"nodeType":"1731","messageId":"1732","endLine":727,"endColumn":41},{"ruleId":"1710","severity":1,"message":"1905","line":735,"column":9,"nodeType":"1712","messageId":"1713","endLine":735,"endColumn":17},{"ruleId":"1729","severity":1,"message":"1730","line":771,"column":37,"nodeType":"1731","messageId":"1732","endLine":771,"endColumn":39},{"ruleId":"1726","severity":1,"message":"1727","line":903,"column":27,"nodeType":"1728","endLine":908,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1730","line":1067,"column":62,"nodeType":"1731","messageId":"1732","endLine":1067,"endColumn":64},{"ruleId":"1729","severity":1,"message":"1730","line":1072,"column":62,"nodeType":"1731","messageId":"1732","endLine":1072,"endColumn":64},{"ruleId":"1729","severity":1,"message":"1730","line":1101,"column":54,"nodeType":"1731","messageId":"1732","endLine":1101,"endColumn":56},{"ruleId":"1729","severity":1,"message":"1730","line":1106,"column":54,"nodeType":"1731","messageId":"1732","endLine":1106,"endColumn":56},{"ruleId":"1729","severity":1,"message":"1730","line":1111,"column":54,"nodeType":"1731","messageId":"1732","endLine":1111,"endColumn":56},{"ruleId":"1729","severity":1,"message":"1730","line":1278,"column":57,"nodeType":"1731","messageId":"1732","endLine":1278,"endColumn":59},{"ruleId":"1729","severity":1,"message":"1730","line":1373,"column":43,"nodeType":"1731","messageId":"1732","endLine":1373,"endColumn":45},{"ruleId":"1729","severity":1,"message":"1730","line":1394,"column":71,"nodeType":"1731","messageId":"1732","endLine":1394,"endColumn":73},{"ruleId":"1729","severity":1,"message":"1730","line":1399,"column":71,"nodeType":"1731","messageId":"1732","endLine":1399,"endColumn":73},{"ruleId":"1726","severity":1,"message":"1727","line":1491,"column":31,"nodeType":"1728","endLine":1494,"endColumn":32},{"ruleId":"1726","severity":1,"message":"1727","line":1604,"column":17,"nodeType":"1728","endLine":1607,"endColumn":18},{"ruleId":"1841","severity":1,"message":"1906","line":26,"column":286,"nodeType":"1843","messageId":"1732","endLine":26,"endColumn":310},{"ruleId":"1729","severity":1,"message":"1730","line":44,"column":53,"nodeType":"1731","messageId":"1732","endLine":44,"endColumn":55},{"ruleId":"1710","severity":1,"message":"1907","line":233,"column":17,"nodeType":"1712","messageId":"1713","endLine":233,"endColumn":21},{"ruleId":"1710","severity":1,"message":"1908","line":235,"column":13,"nodeType":"1712","messageId":"1713","endLine":235,"endColumn":21},{"ruleId":"1710","severity":1,"message":"1909","line":236,"column":13,"nodeType":"1712","messageId":"1713","endLine":236,"endColumn":23},{"ruleId":"1710","severity":1,"message":"1910","line":242,"column":13,"nodeType":"1712","messageId":"1713","endLine":242,"endColumn":24},{"ruleId":"1710","severity":1,"message":"1911","line":243,"column":13,"nodeType":"1712","messageId":"1713","endLine":243,"endColumn":22},{"ruleId":"1710","severity":1,"message":"1778","line":244,"column":13,"nodeType":"1712","messageId":"1713","endLine":244,"endColumn":18},{"ruleId":"1766","severity":1,"message":"1912","line":250,"column":13,"nodeType":"1712","messageId":"1768","endLine":250,"endColumn":37},{"ruleId":"1771","severity":1,"message":"1772","line":252,"column":55,"nodeType":"1773","messageId":"1774","endLine":252,"endColumn":57},{"ruleId":"1729","severity":1,"message":"1730","line":297,"column":38,"nodeType":"1731","messageId":"1732","endLine":297,"endColumn":40},{"ruleId":"1729","severity":1,"message":"1730","line":297,"column":76,"nodeType":"1731","messageId":"1732","endLine":297,"endColumn":78},{"ruleId":"1729","severity":1,"message":"1730","line":298,"column":41,"nodeType":"1731","messageId":"1732","endLine":298,"endColumn":43},{"ruleId":"1729","severity":1,"message":"1737","line":299,"column":52,"nodeType":"1731","messageId":"1732","endLine":299,"endColumn":54},{"ruleId":"1729","severity":1,"message":"1737","line":299,"column":93,"nodeType":"1731","messageId":"1732","endLine":299,"endColumn":95},{"ruleId":"1729","severity":1,"message":"1730","line":305,"column":81,"nodeType":"1731","messageId":"1732","endLine":305,"endColumn":83},{"ruleId":"1766","severity":1,"message":"1913","line":307,"column":29,"nodeType":"1712","messageId":"1768","endLine":307,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1730","line":308,"column":91,"nodeType":"1731","messageId":"1732","endLine":308,"endColumn":93},{"ruleId":"1766","severity":1,"message":"1913","line":310,"column":29,"nodeType":"1712","messageId":"1768","endLine":310,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1737","line":314,"column":28,"nodeType":"1731","messageId":"1732","endLine":314,"endColumn":30},{"ruleId":"1729","severity":1,"message":"1737","line":314,"column":52,"nodeType":"1731","messageId":"1732","endLine":314,"endColumn":54},{"ruleId":"1729","severity":1,"message":"1730","line":320,"column":41,"nodeType":"1731","messageId":"1732","endLine":320,"endColumn":43},{"ruleId":"1729","severity":1,"message":"1730","line":320,"column":83,"nodeType":"1731","messageId":"1732","endLine":320,"endColumn":85},{"ruleId":"1729","severity":1,"message":"1730","line":320,"column":113,"nodeType":"1731","messageId":"1732","endLine":320,"endColumn":115},{"ruleId":"1729","severity":1,"message":"1730","line":320,"column":143,"nodeType":"1731","messageId":"1732","endLine":320,"endColumn":145},{"ruleId":"1729","severity":1,"message":"1737","line":321,"column":53,"nodeType":"1731","messageId":"1732","endLine":321,"endColumn":55},{"ruleId":"1729","severity":1,"message":"1737","line":321,"column":95,"nodeType":"1731","messageId":"1732","endLine":321,"endColumn":97},{"ruleId":"1766","severity":1,"message":"1913","line":324,"column":25,"nodeType":"1712","messageId":"1768","endLine":324,"endColumn":32},{"ruleId":"1729","severity":1,"message":"1730","line":327,"column":82,"nodeType":"1731","messageId":"1732","endLine":327,"endColumn":84},{"ruleId":"1766","severity":1,"message":"1913","line":329,"column":29,"nodeType":"1712","messageId":"1768","endLine":329,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1730","line":330,"column":92,"nodeType":"1731","messageId":"1732","endLine":330,"endColumn":94},{"ruleId":"1766","severity":1,"message":"1913","line":332,"column":29,"nodeType":"1712","messageId":"1768","endLine":332,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1737","line":335,"column":28,"nodeType":"1731","messageId":"1732","endLine":335,"endColumn":30},{"ruleId":"1729","severity":1,"message":"1737","line":335,"column":52,"nodeType":"1731","messageId":"1732","endLine":335,"endColumn":54},{"ruleId":"1729","severity":1,"message":"1730","line":341,"column":41,"nodeType":"1731","messageId":"1732","endLine":341,"endColumn":43},{"ruleId":"1729","severity":1,"message":"1730","line":341,"column":84,"nodeType":"1731","messageId":"1732","endLine":341,"endColumn":86},{"ruleId":"1729","severity":1,"message":"1730","line":341,"column":118,"nodeType":"1731","messageId":"1732","endLine":341,"endColumn":120},{"ruleId":"1729","severity":1,"message":"1730","line":341,"column":153,"nodeType":"1731","messageId":"1732","endLine":341,"endColumn":155},{"ruleId":"1729","severity":1,"message":"1737","line":342,"column":49,"nodeType":"1731","messageId":"1732","endLine":342,"endColumn":51},{"ruleId":"1729","severity":1,"message":"1737","line":342,"column":87,"nodeType":"1731","messageId":"1732","endLine":342,"endColumn":89},{"ruleId":"1766","severity":1,"message":"1913","line":345,"column":25,"nodeType":"1712","messageId":"1768","endLine":345,"endColumn":32},{"ruleId":"1729","severity":1,"message":"1730","line":348,"column":78,"nodeType":"1731","messageId":"1732","endLine":348,"endColumn":80},{"ruleId":"1766","severity":1,"message":"1913","line":350,"column":29,"nodeType":"1712","messageId":"1768","endLine":350,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1730","line":351,"column":88,"nodeType":"1731","messageId":"1732","endLine":351,"endColumn":90},{"ruleId":"1766","severity":1,"message":"1913","line":353,"column":29,"nodeType":"1712","messageId":"1768","endLine":353,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1737","line":356,"column":28,"nodeType":"1731","messageId":"1732","endLine":356,"endColumn":30},{"ruleId":"1729","severity":1,"message":"1737","line":356,"column":52,"nodeType":"1731","messageId":"1732","endLine":356,"endColumn":54},{"ruleId":"1729","severity":1,"message":"1730","line":362,"column":41,"nodeType":"1731","messageId":"1732","endLine":362,"endColumn":43},{"ruleId":"1729","severity":1,"message":"1730","line":362,"column":84,"nodeType":"1731","messageId":"1732","endLine":362,"endColumn":86},{"ruleId":"1729","severity":1,"message":"1730","line":362,"column":118,"nodeType":"1731","messageId":"1732","endLine":362,"endColumn":120},{"ruleId":"1729","severity":1,"message":"1730","line":362,"column":154,"nodeType":"1731","messageId":"1732","endLine":362,"endColumn":156},{"ruleId":"1729","severity":1,"message":"1730","line":362,"column":184,"nodeType":"1731","messageId":"1732","endLine":362,"endColumn":186},{"ruleId":"1729","severity":1,"message":"1737","line":364,"column":53,"nodeType":"1731","messageId":"1732","endLine":364,"endColumn":55},{"ruleId":"1729","severity":1,"message":"1737","line":364,"column":95,"nodeType":"1731","messageId":"1732","endLine":364,"endColumn":97},{"ruleId":"1766","severity":1,"message":"1913","line":367,"column":25,"nodeType":"1712","messageId":"1768","endLine":367,"endColumn":32},{"ruleId":"1729","severity":1,"message":"1730","line":370,"column":82,"nodeType":"1731","messageId":"1732","endLine":370,"endColumn":84},{"ruleId":"1766","severity":1,"message":"1913","line":372,"column":29,"nodeType":"1712","messageId":"1768","endLine":372,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1730","line":373,"column":92,"nodeType":"1731","messageId":"1732","endLine":373,"endColumn":94},{"ruleId":"1766","severity":1,"message":"1913","line":375,"column":29,"nodeType":"1712","messageId":"1768","endLine":375,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1737","line":378,"column":28,"nodeType":"1731","messageId":"1732","endLine":378,"endColumn":30},{"ruleId":"1729","severity":1,"message":"1737","line":378,"column":52,"nodeType":"1731","messageId":"1732","endLine":378,"endColumn":54},{"ruleId":"1729","severity":1,"message":"1730","line":455,"column":42,"nodeType":"1731","messageId":"1732","endLine":455,"endColumn":44},{"ruleId":"1729","severity":1,"message":"1730","line":492,"column":33,"nodeType":"1731","messageId":"1732","endLine":492,"endColumn":35},{"ruleId":"1729","severity":1,"message":"1730","line":566,"column":30,"nodeType":"1731","messageId":"1732","endLine":566,"endColumn":32},{"ruleId":"1729","severity":1,"message":"1730","line":568,"column":29,"nodeType":"1731","messageId":"1732","endLine":568,"endColumn":31},{"ruleId":"1729","severity":1,"message":"1730","line":572,"column":34,"nodeType":"1731","messageId":"1732","endLine":572,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1730","line":576,"column":34,"nodeType":"1731","messageId":"1732","endLine":576,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1730","line":580,"column":34,"nodeType":"1731","messageId":"1732","endLine":580,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1730","line":584,"column":34,"nodeType":"1731","messageId":"1732","endLine":584,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1730","line":590,"column":30,"nodeType":"1731","messageId":"1732","endLine":590,"endColumn":32},{"ruleId":"1729","severity":1,"message":"1737","line":590,"column":69,"nodeType":"1731","messageId":"1732","endLine":590,"endColumn":71},{"ruleId":"1729","severity":1,"message":"1730","line":596,"column":30,"nodeType":"1731","messageId":"1732","endLine":596,"endColumn":32},{"ruleId":"1729","severity":1,"message":"1730","line":596,"column":69,"nodeType":"1731","messageId":"1732","endLine":596,"endColumn":71},{"ruleId":"1729","severity":1,"message":"1730","line":602,"column":30,"nodeType":"1731","messageId":"1732","endLine":602,"endColumn":32},{"ruleId":"1729","severity":1,"message":"1730","line":602,"column":69,"nodeType":"1731","messageId":"1732","endLine":602,"endColumn":71},{"ruleId":"1729","severity":1,"message":"1730","line":608,"column":30,"nodeType":"1731","messageId":"1732","endLine":608,"endColumn":32},{"ruleId":"1729","severity":1,"message":"1730","line":608,"column":76,"nodeType":"1731","messageId":"1732","endLine":608,"endColumn":78},{"ruleId":"1729","severity":1,"message":"1730","line":613,"column":30,"nodeType":"1731","messageId":"1732","endLine":613,"endColumn":32},{"ruleId":"1729","severity":1,"message":"1730","line":613,"column":75,"nodeType":"1731","messageId":"1732","endLine":613,"endColumn":77},{"ruleId":"1729","severity":1,"message":"1730","line":618,"column":30,"nodeType":"1731","messageId":"1732","endLine":618,"endColumn":32},{"ruleId":"1729","severity":1,"message":"1730","line":626,"column":30,"nodeType":"1731","messageId":"1732","endLine":626,"endColumn":32},{"ruleId":"1729","severity":1,"message":"1730","line":631,"column":30,"nodeType":"1731","messageId":"1732","endLine":631,"endColumn":32},{"ruleId":"1710","severity":1,"message":"1914","line":637,"column":13,"nodeType":"1712","messageId":"1713","endLine":637,"endColumn":24},{"ruleId":"1771","severity":1,"message":"1772","line":644,"column":64,"nodeType":"1773","messageId":"1774","endLine":644,"endColumn":66},{"ruleId":"1729","severity":1,"message":"1730","line":645,"column":43,"nodeType":"1731","messageId":"1732","endLine":645,"endColumn":45},{"ruleId":"1729","severity":1,"message":"1730","line":659,"column":17,"nodeType":"1731","messageId":"1732","endLine":659,"endColumn":19},{"ruleId":"1729","severity":1,"message":"1730","line":660,"column":23,"nodeType":"1731","messageId":"1732","endLine":660,"endColumn":25},{"ruleId":"1710","severity":1,"message":"1915","line":666,"column":15,"nodeType":"1712","messageId":"1713","endLine":666,"endColumn":21},{"ruleId":"1710","severity":1,"message":"1887","line":12,"column":1,"nodeType":"1712","messageId":"1713","endLine":12,"endColumn":10},{"ruleId":"1710","severity":1,"message":"1916","line":25,"column":7,"nodeType":"1712","messageId":"1713","endLine":25,"endColumn":13},{"ruleId":"1729","severity":1,"message":"1730","line":57,"column":41,"nodeType":"1731","messageId":"1732","endLine":57,"endColumn":43},{"ruleId":"1729","severity":1,"message":"1730","line":60,"column":41,"nodeType":"1731","messageId":"1732","endLine":60,"endColumn":43},{"ruleId":"1729","severity":1,"message":"1730","line":60,"column":87,"nodeType":"1731","messageId":"1732","endLine":60,"endColumn":89},{"ruleId":"1729","severity":1,"message":"1730","line":60,"column":120,"nodeType":"1731","messageId":"1732","endLine":60,"endColumn":122},{"ruleId":"1729","severity":1,"message":"1730","line":63,"column":41,"nodeType":"1731","messageId":"1732","endLine":63,"endColumn":43},{"ruleId":"1729","severity":1,"message":"1730","line":63,"column":87,"nodeType":"1731","messageId":"1732","endLine":63,"endColumn":89},{"ruleId":"1729","severity":1,"message":"1730","line":63,"column":121,"nodeType":"1731","messageId":"1732","endLine":63,"endColumn":123},{"ruleId":"1729","severity":1,"message":"1730","line":66,"column":41,"nodeType":"1731","messageId":"1732","endLine":66,"endColumn":43},{"ruleId":"1729","severity":1,"message":"1730","line":66,"column":87,"nodeType":"1731","messageId":"1732","endLine":66,"endColumn":89},{"ruleId":"1729","severity":1,"message":"1730","line":66,"column":121,"nodeType":"1731","messageId":"1732","endLine":66,"endColumn":123},{"ruleId":"1710","severity":1,"message":"1888","line":75,"column":13,"nodeType":"1712","messageId":"1713","endLine":75,"endColumn":22},{"ruleId":"1729","severity":1,"message":"1730","line":102,"column":46,"nodeType":"1731","messageId":"1732","endLine":102,"endColumn":48},{"ruleId":"1729","severity":1,"message":"1730","line":111,"column":43,"nodeType":"1731","messageId":"1732","endLine":111,"endColumn":45},{"ruleId":"1710","severity":1,"message":"1888","line":138,"column":13,"nodeType":"1712","messageId":"1713","endLine":138,"endColumn":22},{"ruleId":"1729","severity":1,"message":"1730","line":160,"column":42,"nodeType":"1731","messageId":"1732","endLine":160,"endColumn":44},{"ruleId":"1729","severity":1,"message":"1730","line":217,"column":35,"nodeType":"1731","messageId":"1732","endLine":217,"endColumn":37},{"ruleId":"1729","severity":1,"message":"1730","line":255,"column":34,"nodeType":"1731","messageId":"1732","endLine":255,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1730","line":257,"column":33,"nodeType":"1731","messageId":"1732","endLine":257,"endColumn":35},{"ruleId":"1729","severity":1,"message":"1730","line":303,"column":69,"nodeType":"1731","messageId":"1732","endLine":303,"endColumn":71},{"ruleId":"1729","severity":1,"message":"1730","line":330,"column":85,"nodeType":"1731","messageId":"1732","endLine":330,"endColumn":87},{"ruleId":"1729","severity":1,"message":"1730","line":416,"column":35,"nodeType":"1731","messageId":"1732","endLine":416,"endColumn":37},{"ruleId":"1710","severity":1,"message":"1917","line":545,"column":35,"nodeType":"1712","messageId":"1713","endLine":545,"endColumn":59},{"ruleId":"1726","severity":1,"message":"1727","line":563,"column":25,"nodeType":"1728","endLine":566,"endColumn":26},{"ruleId":"1710","severity":1,"message":"1918","line":589,"column":14,"nodeType":"1712","messageId":"1713","endLine":589,"endColumn":34},{"ruleId":"1729","severity":1,"message":"1737","line":641,"column":98,"nodeType":"1731","messageId":"1732","endLine":641,"endColumn":100},{"ruleId":"1729","severity":1,"message":"1730","line":642,"column":100,"nodeType":"1731","messageId":"1732","endLine":642,"endColumn":102},{"ruleId":"1729","severity":1,"message":"1737","line":659,"column":102,"nodeType":"1731","messageId":"1732","endLine":659,"endColumn":104},{"ruleId":"1729","severity":1,"message":"1730","line":683,"column":34,"nodeType":"1731","messageId":"1732","endLine":683,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1730","line":688,"column":30,"nodeType":"1731","messageId":"1732","endLine":688,"endColumn":32},{"ruleId":"1710","severity":1,"message":"1885","line":693,"column":13,"nodeType":"1712","messageId":"1713","endLine":693,"endColumn":22},{"ruleId":"1710","severity":1,"message":"1919","line":700,"column":17,"nodeType":"1712","messageId":"1713","endLine":700,"endColumn":28},{"ruleId":"1710","severity":1,"message":"1920","line":701,"column":17,"nodeType":"1712","messageId":"1713","endLine":701,"endColumn":28},{"ruleId":"1710","severity":1,"message":"1921","line":702,"column":17,"nodeType":"1712","messageId":"1713","endLine":702,"endColumn":24},{"ruleId":"1710","severity":1,"message":"1922","line":703,"column":17,"nodeType":"1712","messageId":"1713","endLine":703,"endColumn":27},{"ruleId":"1710","severity":1,"message":"1923","line":704,"column":17,"nodeType":"1712","messageId":"1713","endLine":704,"endColumn":33},{"ruleId":"1729","severity":1,"message":"1730","line":710,"column":42,"nodeType":"1731","messageId":"1732","endLine":710,"endColumn":44},{"ruleId":"1729","severity":1,"message":"1737","line":710,"column":87,"nodeType":"1731","messageId":"1732","endLine":710,"endColumn":89},{"ruleId":"1729","severity":1,"message":"1737","line":710,"column":132,"nodeType":"1731","messageId":"1732","endLine":710,"endColumn":134},{"ruleId":"1729","severity":1,"message":"1737","line":710,"column":181,"nodeType":"1731","messageId":"1732","endLine":710,"endColumn":183},{"ruleId":"1729","severity":1,"message":"1737","line":710,"column":230,"nodeType":"1731","messageId":"1732","endLine":710,"endColumn":232},{"ruleId":"1729","severity":1,"message":"1730","line":711,"column":45,"nodeType":"1731","messageId":"1732","endLine":711,"endColumn":47},{"ruleId":"1729","severity":1,"message":"1730","line":718,"column":45,"nodeType":"1731","messageId":"1732","endLine":718,"endColumn":47},{"ruleId":"1729","severity":1,"message":"1730","line":718,"column":87,"nodeType":"1731","messageId":"1732","endLine":718,"endColumn":89},{"ruleId":"1729","severity":1,"message":"1730","line":718,"column":117,"nodeType":"1731","messageId":"1732","endLine":718,"endColumn":119},{"ruleId":"1729","severity":1,"message":"1730","line":718,"column":147,"nodeType":"1731","messageId":"1732","endLine":718,"endColumn":149},{"ruleId":"1729","severity":1,"message":"1730","line":725,"column":45,"nodeType":"1731","messageId":"1732","endLine":725,"endColumn":47},{"ruleId":"1729","severity":1,"message":"1730","line":725,"column":88,"nodeType":"1731","messageId":"1732","endLine":725,"endColumn":90},{"ruleId":"1729","severity":1,"message":"1730","line":725,"column":122,"nodeType":"1731","messageId":"1732","endLine":725,"endColumn":124},{"ruleId":"1729","severity":1,"message":"1730","line":725,"column":157,"nodeType":"1731","messageId":"1732","endLine":725,"endColumn":159},{"ruleId":"1729","severity":1,"message":"1730","line":732,"column":45,"nodeType":"1731","messageId":"1732","endLine":732,"endColumn":47},{"ruleId":"1729","severity":1,"message":"1730","line":732,"column":88,"nodeType":"1731","messageId":"1732","endLine":732,"endColumn":90},{"ruleId":"1729","severity":1,"message":"1730","line":732,"column":122,"nodeType":"1731","messageId":"1732","endLine":732,"endColumn":124},{"ruleId":"1729","severity":1,"message":"1730","line":732,"column":158,"nodeType":"1731","messageId":"1732","endLine":732,"endColumn":160},{"ruleId":"1729","severity":1,"message":"1730","line":732,"column":188,"nodeType":"1731","messageId":"1732","endLine":732,"endColumn":190},{"ruleId":"1729","severity":1,"message":"1730","line":739,"column":30,"nodeType":"1731","messageId":"1732","endLine":739,"endColumn":32},{"ruleId":"1729","severity":1,"message":"1730","line":739,"column":49,"nodeType":"1731","messageId":"1732","endLine":739,"endColumn":51},{"ruleId":"1729","severity":1,"message":"1730","line":739,"column":66,"nodeType":"1731","messageId":"1732","endLine":739,"endColumn":68},{"ruleId":"1729","severity":1,"message":"1730","line":741,"column":36,"nodeType":"1731","messageId":"1732","endLine":741,"endColumn":38},{"ruleId":"1729","severity":1,"message":"1730","line":741,"column":54,"nodeType":"1731","messageId":"1732","endLine":741,"endColumn":56},{"ruleId":"1729","severity":1,"message":"1730","line":741,"column":71,"nodeType":"1731","messageId":"1732","endLine":741,"endColumn":73},{"ruleId":"1729","severity":1,"message":"1730","line":745,"column":42,"nodeType":"1731","messageId":"1732","endLine":745,"endColumn":44},{"ruleId":"1729","severity":1,"message":"1730","line":745,"column":87,"nodeType":"1731","messageId":"1732","endLine":745,"endColumn":89},{"ruleId":"1729","severity":1,"message":"1730","line":745,"column":132,"nodeType":"1731","messageId":"1732","endLine":745,"endColumn":134},{"ruleId":"1729","severity":1,"message":"1730","line":745,"column":181,"nodeType":"1731","messageId":"1732","endLine":745,"endColumn":183},{"ruleId":"1729","severity":1,"message":"1730","line":745,"column":230,"nodeType":"1731","messageId":"1732","endLine":745,"endColumn":232},{"ruleId":"1729","severity":1,"message":"1730","line":746,"column":45,"nodeType":"1731","messageId":"1732","endLine":746,"endColumn":47},{"ruleId":"1729","severity":1,"message":"1730","line":749,"column":45,"nodeType":"1731","messageId":"1732","endLine":749,"endColumn":47},{"ruleId":"1729","severity":1,"message":"1730","line":749,"column":88,"nodeType":"1731","messageId":"1732","endLine":749,"endColumn":90},{"ruleId":"1729","severity":1,"message":"1730","line":749,"column":120,"nodeType":"1731","messageId":"1732","endLine":749,"endColumn":122},{"ruleId":"1729","severity":1,"message":"1730","line":749,"column":150,"nodeType":"1731","messageId":"1732","endLine":749,"endColumn":152},{"ruleId":"1729","severity":1,"message":"1730","line":752,"column":45,"nodeType":"1731","messageId":"1732","endLine":752,"endColumn":47},{"ruleId":"1729","severity":1,"message":"1730","line":752,"column":88,"nodeType":"1731","messageId":"1732","endLine":752,"endColumn":90},{"ruleId":"1729","severity":1,"message":"1730","line":752,"column":122,"nodeType":"1731","messageId":"1732","endLine":752,"endColumn":124},{"ruleId":"1729","severity":1,"message":"1730","line":752,"column":158,"nodeType":"1731","messageId":"1732","endLine":752,"endColumn":160},{"ruleId":"1729","severity":1,"message":"1730","line":755,"column":45,"nodeType":"1731","messageId":"1732","endLine":755,"endColumn":47},{"ruleId":"1729","severity":1,"message":"1730","line":755,"column":88,"nodeType":"1731","messageId":"1732","endLine":755,"endColumn":90},{"ruleId":"1729","severity":1,"message":"1730","line":755,"column":122,"nodeType":"1731","messageId":"1732","endLine":755,"endColumn":124},{"ruleId":"1729","severity":1,"message":"1730","line":755,"column":158,"nodeType":"1731","messageId":"1732","endLine":755,"endColumn":160},{"ruleId":"1729","severity":1,"message":"1730","line":755,"column":188,"nodeType":"1731","messageId":"1732","endLine":755,"endColumn":190},{"ruleId":"1729","severity":1,"message":"1730","line":758,"column":30,"nodeType":"1731","messageId":"1732","endLine":758,"endColumn":32},{"ruleId":"1729","severity":1,"message":"1730","line":758,"column":49,"nodeType":"1731","messageId":"1732","endLine":758,"endColumn":51},{"ruleId":"1729","severity":1,"message":"1730","line":758,"column":66,"nodeType":"1731","messageId":"1732","endLine":758,"endColumn":68},{"ruleId":"1729","severity":1,"message":"1730","line":760,"column":36,"nodeType":"1731","messageId":"1732","endLine":760,"endColumn":38},{"ruleId":"1729","severity":1,"message":"1730","line":760,"column":54,"nodeType":"1731","messageId":"1732","endLine":760,"endColumn":56},{"ruleId":"1729","severity":1,"message":"1730","line":760,"column":71,"nodeType":"1731","messageId":"1732","endLine":760,"endColumn":73},{"ruleId":"1729","severity":1,"message":"1730","line":793,"column":114,"nodeType":"1731","messageId":"1732","endLine":793,"endColumn":116},{"ruleId":"1729","severity":1,"message":"1730","line":794,"column":116,"nodeType":"1731","messageId":"1732","endLine":794,"endColumn":118},{"ruleId":"1729","severity":1,"message":"1730","line":821,"column":93,"nodeType":"1731","messageId":"1732","endLine":821,"endColumn":95},{"ruleId":"1729","severity":1,"message":"1730","line":826,"column":93,"nodeType":"1731","messageId":"1732","endLine":826,"endColumn":95},{"ruleId":"1729","severity":1,"message":"1730","line":833,"column":65,"nodeType":"1731","messageId":"1732","endLine":833,"endColumn":67},{"ruleId":"1729","severity":1,"message":"1730","line":853,"column":134,"nodeType":"1731","messageId":"1732","endLine":853,"endColumn":136},{"ruleId":"1729","severity":1,"message":"1730","line":854,"column":126,"nodeType":"1731","messageId":"1732","endLine":854,"endColumn":128},{"ruleId":"1729","severity":1,"message":"1730","line":857,"column":62,"nodeType":"1731","messageId":"1732","endLine":857,"endColumn":64},{"ruleId":"1729","severity":1,"message":"1730","line":893,"column":127,"nodeType":"1731","messageId":"1732","endLine":893,"endColumn":129},{"ruleId":"1729","severity":1,"message":"1730","line":894,"column":142,"nodeType":"1731","messageId":"1732","endLine":894,"endColumn":144},{"ruleId":"1729","severity":1,"message":"1730","line":910,"column":76,"nodeType":"1731","messageId":"1732","endLine":910,"endColumn":78},{"ruleId":"1729","severity":1,"message":"1730","line":920,"column":67,"nodeType":"1731","messageId":"1732","endLine":920,"endColumn":69},{"ruleId":"1729","severity":1,"message":"1730","line":922,"column":75,"nodeType":"1731","messageId":"1732","endLine":922,"endColumn":77},{"ruleId":"1729","severity":1,"message":"1730","line":922,"column":115,"nodeType":"1731","messageId":"1732","endLine":922,"endColumn":117},{"ruleId":"1729","severity":1,"message":"1730","line":922,"column":145,"nodeType":"1731","messageId":"1732","endLine":922,"endColumn":147},{"ruleId":"1729","severity":1,"message":"1730","line":922,"column":185,"nodeType":"1731","messageId":"1732","endLine":922,"endColumn":187},{"ruleId":"1729","severity":1,"message":"1730","line":922,"column":219,"nodeType":"1731","messageId":"1732","endLine":922,"endColumn":221},{"ruleId":"1729","severity":1,"message":"1730","line":982,"column":75,"nodeType":"1731","messageId":"1732","endLine":982,"endColumn":77},{"ruleId":"1729","severity":1,"message":"1730","line":982,"column":119,"nodeType":"1731","messageId":"1732","endLine":982,"endColumn":121},{"ruleId":"1729","severity":1,"message":"1730","line":982,"column":151,"nodeType":"1731","messageId":"1732","endLine":982,"endColumn":153},{"ruleId":"1729","severity":1,"message":"1730","line":982,"column":181,"nodeType":"1731","messageId":"1732","endLine":982,"endColumn":183},{"ruleId":"1729","severity":1,"message":"1730","line":1001,"column":75,"nodeType":"1731","messageId":"1732","endLine":1001,"endColumn":77},{"ruleId":"1729","severity":1,"message":"1730","line":1001,"column":119,"nodeType":"1731","messageId":"1732","endLine":1001,"endColumn":121},{"ruleId":"1729","severity":1,"message":"1730","line":1001,"column":153,"nodeType":"1731","messageId":"1732","endLine":1001,"endColumn":155},{"ruleId":"1729","severity":1,"message":"1730","line":1001,"column":189,"nodeType":"1731","messageId":"1732","endLine":1001,"endColumn":191},{"ruleId":"1729","severity":1,"message":"1730","line":1018,"column":73,"nodeType":"1731","messageId":"1732","endLine":1018,"endColumn":75},{"ruleId":"1729","severity":1,"message":"1730","line":1051,"column":69,"nodeType":"1731","messageId":"1732","endLine":1051,"endColumn":71},{"ruleId":"1729","severity":1,"message":"1730","line":1073,"column":83,"nodeType":"1731","messageId":"1732","endLine":1073,"endColumn":85},{"ruleId":"1729","severity":1,"message":"1730","line":1073,"column":117,"nodeType":"1731","messageId":"1732","endLine":1073,"endColumn":119},{"ruleId":"1729","severity":1,"message":"1730","line":1095,"column":67,"nodeType":"1731","messageId":"1732","endLine":1095,"endColumn":69},{"ruleId":"1729","severity":1,"message":"1730","line":1154,"column":67,"nodeType":"1731","messageId":"1732","endLine":1154,"endColumn":69},{"ruleId":"1729","severity":1,"message":"1730","line":1187,"column":132,"nodeType":"1731","messageId":"1732","endLine":1187,"endColumn":134},{"ruleId":"1729","severity":1,"message":"1730","line":1188,"column":130,"nodeType":"1731","messageId":"1732","endLine":1188,"endColumn":132},{"ruleId":"1729","severity":1,"message":"1737","line":1212,"column":75,"nodeType":"1731","messageId":"1732","endLine":1212,"endColumn":77},{"ruleId":"1729","severity":1,"message":"1730","line":1226,"column":71,"nodeType":"1731","messageId":"1732","endLine":1226,"endColumn":73},{"ruleId":"1729","severity":1,"message":"1730","line":1226,"column":113,"nodeType":"1731","messageId":"1732","endLine":1226,"endColumn":115},{"ruleId":"1729","severity":1,"message":"1730","line":1256,"column":74,"nodeType":"1731","messageId":"1732","endLine":1256,"endColumn":76},{"ruleId":"1726","severity":1,"message":"1924","line":1291,"column":53,"nodeType":"1728","endLine":1291,"endColumn":135},{"ruleId":"1729","severity":1,"message":"1730","line":1446,"column":115,"nodeType":"1731","messageId":"1732","endLine":1446,"endColumn":117},{"ruleId":"1729","severity":1,"message":"1730","line":1447,"column":119,"nodeType":"1731","messageId":"1732","endLine":1447,"endColumn":121},{"ruleId":"1729","severity":1,"message":"1730","line":1448,"column":125,"nodeType":"1731","messageId":"1732","endLine":1448,"endColumn":127},{"ruleId":"1729","severity":1,"message":"1730","line":1453,"column":62,"nodeType":"1731","messageId":"1732","endLine":1453,"endColumn":64},{"ruleId":"1729","severity":1,"message":"1730","line":1454,"column":62,"nodeType":"1731","messageId":"1732","endLine":1454,"endColumn":64},{"ruleId":"1729","severity":1,"message":"1730","line":1455,"column":63,"nodeType":"1731","messageId":"1732","endLine":1455,"endColumn":65},{"ruleId":"1729","severity":1,"message":"1730","line":1455,"column":110,"nodeType":"1731","messageId":"1732","endLine":1455,"endColumn":112},{"ruleId":"1729","severity":1,"message":"1730","line":1500,"column":52,"nodeType":"1731","messageId":"1732","endLine":1500,"endColumn":54},{"ruleId":"1925","severity":1,"message":"1926","line":22,"column":35,"nodeType":"1927","messageId":"1928","endLine":22,"endColumn":36,"suggestions":"1929"},{"ruleId":"1925","severity":1,"message":"1930","line":22,"column":50,"nodeType":"1927","messageId":"1928","endLine":22,"endColumn":51,"suggestions":"1931"},{"ruleId":"1925","severity":1,"message":"1932","line":25,"column":32,"nodeType":"1927","messageId":"1928","endLine":25,"endColumn":33,"suggestions":"1933"},{"ruleId":"1925","severity":1,"message":"1926","line":27,"column":34,"nodeType":"1927","messageId":"1928","endLine":27,"endColumn":35,"suggestions":"1934"},{"ruleId":"1925","severity":1,"message":"1930","line":27,"column":42,"nodeType":"1927","messageId":"1928","endLine":27,"endColumn":43,"suggestions":"1935"},{"ruleId":"1925","severity":1,"message":"1926","line":29,"column":32,"nodeType":"1927","messageId":"1928","endLine":29,"endColumn":33,"suggestions":"1936"},{"ruleId":"1925","severity":1,"message":"1937","line":31,"column":36,"nodeType":"1927","messageId":"1928","endLine":31,"endColumn":37,"suggestions":"1938"},{"ruleId":"1925","severity":1,"message":"1937","line":33,"column":34,"nodeType":"1927","messageId":"1928","endLine":33,"endColumn":35,"suggestions":"1939"},{"ruleId":"1925","severity":1,"message":"1926","line":35,"column":34,"nodeType":"1927","messageId":"1928","endLine":35,"endColumn":35,"suggestions":"1940"},{"ruleId":"1925","severity":1,"message":"1937","line":35,"column":36,"nodeType":"1927","messageId":"1928","endLine":35,"endColumn":37,"suggestions":"1941"},{"ruleId":"1925","severity":1,"message":"1937","line":37,"column":32,"nodeType":"1927","messageId":"1928","endLine":37,"endColumn":33,"suggestions":"1942"},{"ruleId":"1925","severity":1,"message":"1926","line":41,"column":32,"nodeType":"1927","messageId":"1928","endLine":41,"endColumn":33,"suggestions":"1943"},{"ruleId":"1925","severity":1,"message":"1930","line":41,"column":43,"nodeType":"1927","messageId":"1928","endLine":41,"endColumn":44,"suggestions":"1944"},{"ruleId":"1925","severity":1,"message":"1926","line":43,"column":32,"nodeType":"1927","messageId":"1928","endLine":43,"endColumn":33,"suggestions":"1945"},{"ruleId":"1925","severity":1,"message":"1930","line":43,"column":45,"nodeType":"1927","messageId":"1928","endLine":43,"endColumn":46,"suggestions":"1946"},{"ruleId":"1925","severity":1,"message":"1926","line":45,"column":35,"nodeType":"1927","messageId":"1928","endLine":45,"endColumn":36,"suggestions":"1947"},{"ruleId":"1925","severity":1,"message":"1930","line":45,"column":49,"nodeType":"1927","messageId":"1928","endLine":45,"endColumn":50,"suggestions":"1948"},{"ruleId":"1925","severity":1,"message":"1926","line":47,"column":32,"nodeType":"1927","messageId":"1928","endLine":47,"endColumn":33,"suggestions":"1949"},{"ruleId":"1925","severity":1,"message":"1930","line":47,"column":43,"nodeType":"1927","messageId":"1928","endLine":47,"endColumn":44,"suggestions":"1950"},{"ruleId":"1951","severity":1,"message":"1952","line":50,"column":24,"nodeType":"1927","messageId":"1732","endLine":50,"endColumn":28},{"ruleId":"1925","severity":1,"message":"1926","line":53,"column":31,"nodeType":"1927","messageId":"1928","endLine":53,"endColumn":32,"suggestions":"1953"},{"ruleId":"1951","severity":1,"message":"1952","line":55,"column":24,"nodeType":"1927","messageId":"1732","endLine":55,"endColumn":28},{"ruleId":"1951","severity":1,"message":"1952","line":57,"column":24,"nodeType":"1927","messageId":"1732","endLine":57,"endColumn":28},{"ruleId":"1925","severity":1,"message":"1926","line":59,"column":35,"nodeType":"1927","messageId":"1928","endLine":59,"endColumn":36,"suggestions":"1954"},{"ruleId":"1925","severity":1,"message":"1930","line":59,"column":48,"nodeType":"1927","messageId":"1928","endLine":59,"endColumn":49,"suggestions":"1955"},{"ruleId":"1951","severity":1,"message":"1952","line":61,"column":24,"nodeType":"1927","messageId":"1732","endLine":61,"endColumn":28},{"ruleId":"1710","severity":1,"message":"1956","line":91,"column":12,"nodeType":"1712","messageId":"1713","endLine":91,"endColumn":18},{"ruleId":"1710","severity":1,"message":"1714","line":3,"column":10,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":18},{"ruleId":"1710","severity":1,"message":"1760","line":5,"column":5,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":10},{"ruleId":"1710","severity":1,"message":"1734","line":7,"column":5,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":14},{"ruleId":"1710","severity":1,"message":"1762","line":10,"column":5,"nodeType":"1712","messageId":"1713","endLine":10,"endColumn":17},{"ruleId":"1710","severity":1,"message":"1897","line":13,"column":12,"nodeType":"1712","messageId":"1713","endLine":13,"endColumn":17},{"ruleId":"1710","severity":1,"message":"1746","line":15,"column":12,"nodeType":"1712","messageId":"1713","endLine":15,"endColumn":24},{"ruleId":"1710","severity":1,"message":"1957","line":35,"column":13,"nodeType":"1712","messageId":"1713","endLine":35,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1958","line":15,"column":10,"nodeType":"1712","messageId":"1713","endLine":15,"endColumn":18},{"ruleId":"1710","severity":1,"message":"1815","line":16,"column":10,"nodeType":"1712","messageId":"1713","endLine":16,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1959","line":122,"column":9,"nodeType":"1712","messageId":"1713","endLine":122,"endColumn":26},{"ruleId":"1729","severity":1,"message":"1737","line":154,"column":38,"nodeType":"1731","messageId":"1732","endLine":154,"endColumn":40},{"ruleId":"1729","severity":1,"message":"1737","line":179,"column":39,"nodeType":"1731","messageId":"1732","endLine":179,"endColumn":41},{"ruleId":"1729","severity":1,"message":"1737","line":193,"column":39,"nodeType":"1731","messageId":"1732","endLine":193,"endColumn":41},{"ruleId":"1710","severity":1,"message":"1960","line":280,"column":21,"nodeType":"1712","messageId":"1713","endLine":280,"endColumn":31},{"ruleId":"1710","severity":1,"message":"1961","line":281,"column":21,"nodeType":"1712","messageId":"1713","endLine":281,"endColumn":31},{"ruleId":"1729","severity":1,"message":"1730","line":291,"column":32,"nodeType":"1731","messageId":"1732","endLine":291,"endColumn":34},{"ruleId":"1729","severity":1,"message":"1730","line":293,"column":39,"nodeType":"1731","messageId":"1732","endLine":293,"endColumn":41},{"ruleId":"1962","severity":1,"message":"1963","line":300,"column":144,"nodeType":"1731","messageId":"1964","endLine":300,"endColumn":145},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1757","line":3,"column":10,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1758","line":3,"column":22,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1745","line":4,"column":10,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":14},{"ruleId":"1710","severity":1,"message":"1746","line":5,"column":10,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":22},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1724","line":4,"column":30,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":38},{"ruleId":"1710","severity":1,"message":"1745","line":5,"column":10,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":14},{"ruleId":"1710","severity":1,"message":"1815","line":6,"column":10,"nodeType":"1712","messageId":"1713","endLine":6,"endColumn":20},{"ruleId":"1729","severity":1,"message":"1737","line":99,"column":51,"nodeType":"1731","messageId":"1732","endLine":99,"endColumn":53},{"ruleId":"1710","severity":1,"message":"1965","line":120,"column":13,"nodeType":"1712","messageId":"1713","endLine":120,"endColumn":27},{"ruleId":"1710","severity":1,"message":"1965","line":136,"column":13,"nodeType":"1712","messageId":"1713","endLine":136,"endColumn":27},{"ruleId":"1729","severity":1,"message":"1730","line":157,"column":26,"nodeType":"1731","messageId":"1732","endLine":157,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1730","line":157,"column":63,"nodeType":"1731","messageId":"1732","endLine":157,"endColumn":65},{"ruleId":"1729","severity":1,"message":"1730","line":178,"column":26,"nodeType":"1731","messageId":"1732","endLine":178,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1737","line":178,"column":56,"nodeType":"1731","messageId":"1732","endLine":178,"endColumn":58},{"ruleId":"1729","severity":1,"message":"1730","line":182,"column":26,"nodeType":"1731","messageId":"1732","endLine":182,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1730","line":182,"column":56,"nodeType":"1731","messageId":"1732","endLine":182,"endColumn":58},{"ruleId":"1729","severity":1,"message":"1730","line":198,"column":33,"nodeType":"1731","messageId":"1732","endLine":198,"endColumn":35},{"ruleId":"1729","severity":1,"message":"1730","line":212,"column":26,"nodeType":"1731","messageId":"1732","endLine":212,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1730","line":213,"column":38,"nodeType":"1731","messageId":"1732","endLine":213,"endColumn":40},{"ruleId":"1729","severity":1,"message":"1730","line":221,"column":26,"nodeType":"1731","messageId":"1732","endLine":221,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1730","line":222,"column":38,"nodeType":"1731","messageId":"1732","endLine":222,"endColumn":40},{"ruleId":"1729","severity":1,"message":"1730","line":230,"column":26,"nodeType":"1731","messageId":"1732","endLine":230,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1730","line":231,"column":38,"nodeType":"1731","messageId":"1732","endLine":231,"endColumn":40},{"ruleId":"1710","severity":1,"message":"1966","line":246,"column":13,"nodeType":"1712","messageId":"1713","endLine":246,"endColumn":26},{"ruleId":"1729","severity":1,"message":"1730","line":294,"column":43,"nodeType":"1731","messageId":"1732","endLine":294,"endColumn":45},{"ruleId":"1710","severity":1,"message":"1967","line":296,"column":25,"nodeType":"1712","messageId":"1713","endLine":296,"endColumn":37},{"ruleId":"1766","severity":1,"message":"1968","line":304,"column":18,"nodeType":"1712","messageId":"1768","endLine":304,"endColumn":21},{"ruleId":"1729","severity":1,"message":"1730","line":306,"column":36,"nodeType":"1731","messageId":"1732","endLine":306,"endColumn":38},{"ruleId":"1729","severity":1,"message":"1730","line":310,"column":36,"nodeType":"1731","messageId":"1732","endLine":310,"endColumn":38},{"ruleId":"1729","severity":1,"message":"1730","line":314,"column":36,"nodeType":"1731","messageId":"1732","endLine":314,"endColumn":38},{"ruleId":"1729","severity":1,"message":"1730","line":318,"column":36,"nodeType":"1731","messageId":"1732","endLine":318,"endColumn":38},{"ruleId":"1729","severity":1,"message":"1730","line":322,"column":36,"nodeType":"1731","messageId":"1732","endLine":322,"endColumn":38},{"ruleId":"1729","severity":1,"message":"1730","line":326,"column":36,"nodeType":"1731","messageId":"1732","endLine":326,"endColumn":38},{"ruleId":"1729","severity":1,"message":"1730","line":330,"column":36,"nodeType":"1731","messageId":"1732","endLine":330,"endColumn":38},{"ruleId":"1729","severity":1,"message":"1730","line":334,"column":36,"nodeType":"1731","messageId":"1732","endLine":334,"endColumn":38},{"ruleId":"1729","severity":1,"message":"1730","line":338,"column":36,"nodeType":"1731","messageId":"1732","endLine":338,"endColumn":38},{"ruleId":"1729","severity":1,"message":"1730","line":342,"column":36,"nodeType":"1731","messageId":"1732","endLine":342,"endColumn":38},{"ruleId":"1766","severity":1,"message":"1799","line":385,"column":25,"nodeType":"1712","messageId":"1768","endLine":385,"endColumn":26},{"ruleId":"1729","severity":1,"message":"1730","line":412,"column":49,"nodeType":"1731","messageId":"1732","endLine":412,"endColumn":51},{"ruleId":"1710","severity":1,"message":"1902","line":478,"column":13,"nodeType":"1712","messageId":"1713","endLine":478,"endColumn":28},{"ruleId":"1710","severity":1,"message":"1969","line":495,"column":13,"nodeType":"1712","messageId":"1713","endLine":495,"endColumn":24},{"ruleId":"1710","severity":1,"message":"1970","line":518,"column":13,"nodeType":"1712","messageId":"1713","endLine":518,"endColumn":21},{"ruleId":"1710","severity":1,"message":"1971","line":529,"column":13,"nodeType":"1712","messageId":"1713","endLine":529,"endColumn":25},{"ruleId":"1710","severity":1,"message":"1972","line":534,"column":13,"nodeType":"1712","messageId":"1713","endLine":534,"endColumn":26},{"ruleId":"1729","severity":1,"message":"1730","line":549,"column":45,"nodeType":"1731","messageId":"1732","endLine":549,"endColumn":47},{"ruleId":"1766","severity":1,"message":"1799","line":556,"column":22,"nodeType":"1712","messageId":"1768","endLine":556,"endColumn":23},{"ruleId":"1729","severity":1,"message":"1730","line":562,"column":48,"nodeType":"1731","messageId":"1732","endLine":562,"endColumn":50},{"ruleId":"1766","severity":1,"message":"1799","line":569,"column":22,"nodeType":"1712","messageId":"1768","endLine":569,"endColumn":23},{"ruleId":"1729","severity":1,"message":"1730","line":574,"column":46,"nodeType":"1731","messageId":"1732","endLine":574,"endColumn":48},{"ruleId":"1771","severity":1,"message":"1772","line":581,"column":56,"nodeType":"1773","messageId":"1774","endLine":581,"endColumn":58},{"ruleId":"1729","severity":1,"message":"1730","line":585,"column":41,"nodeType":"1731","messageId":"1732","endLine":585,"endColumn":43},{"ruleId":"1710","severity":1,"message":"1973","line":593,"column":19,"nodeType":"1712","messageId":"1713","endLine":593,"endColumn":29},{"ruleId":"1710","severity":1,"message":"1974","line":595,"column":19,"nodeType":"1712","messageId":"1713","endLine":595,"endColumn":31},{"ruleId":"1771","severity":1,"message":"1772","line":613,"column":58,"nodeType":"1773","messageId":"1774","endLine":613,"endColumn":60},{"ruleId":"1729","severity":1,"message":"1730","line":624,"column":34,"nodeType":"1731","messageId":"1732","endLine":624,"endColumn":36},{"ruleId":"1779","severity":1,"message":"1975","line":633,"column":190,"nodeType":"1773","messageId":"1781","endLine":633,"endColumn":242},{"ruleId":"1779","severity":1,"message":"1975","line":640,"column":198,"nodeType":"1773","messageId":"1781","endLine":640,"endColumn":250},{"ruleId":"1771","severity":1,"message":"1772","line":656,"column":58,"nodeType":"1773","messageId":"1774","endLine":656,"endColumn":60},{"ruleId":"1729","severity":1,"message":"1730","line":658,"column":33,"nodeType":"1731","messageId":"1732","endLine":658,"endColumn":35},{"ruleId":"1729","severity":1,"message":"1730","line":665,"column":47,"nodeType":"1731","messageId":"1732","endLine":665,"endColumn":49},{"ruleId":"1729","severity":1,"message":"1737","line":910,"column":57,"nodeType":"1731","messageId":"1732","endLine":910,"endColumn":59},{"ruleId":"1729","severity":1,"message":"1730","line":936,"column":75,"nodeType":"1731","messageId":"1732","endLine":936,"endColumn":77},{"ruleId":"1729","severity":1,"message":"1730","line":936,"column":116,"nodeType":"1731","messageId":"1732","endLine":936,"endColumn":118},{"ruleId":"1729","severity":1,"message":"1730","line":936,"column":166,"nodeType":"1731","messageId":"1732","endLine":936,"endColumn":168},{"ruleId":"1729","severity":1,"message":"1730","line":936,"column":211,"nodeType":"1731","messageId":"1732","endLine":936,"endColumn":213},{"ruleId":"1710","severity":1,"message":"1976","line":980,"column":18,"nodeType":"1712","messageId":"1713","endLine":980,"endColumn":23},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1757","line":3,"column":10,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1758","line":3,"column":22,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1745","line":4,"column":10,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":14},{"ruleId":"1710","severity":1,"message":"1746","line":5,"column":10,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":22},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1724","line":4,"column":30,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":38},{"ruleId":"1710","severity":1,"message":"1977","line":4,"column":57,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":65},{"ruleId":"1710","severity":1,"message":"1745","line":5,"column":10,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":14},{"ruleId":"1710","severity":1,"message":"1815","line":6,"column":10,"nodeType":"1712","messageId":"1713","endLine":6,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1978","line":7,"column":8,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":16},{"ruleId":"1729","severity":1,"message":"1730","line":185,"column":26,"nodeType":"1731","messageId":"1732","endLine":185,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1730","line":192,"column":26,"nodeType":"1731","messageId":"1732","endLine":192,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1730","line":192,"column":63,"nodeType":"1731","messageId":"1732","endLine":192,"endColumn":65},{"ruleId":"1729","severity":1,"message":"1730","line":207,"column":26,"nodeType":"1731","messageId":"1732","endLine":207,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1730","line":207,"column":61,"nodeType":"1731","messageId":"1732","endLine":207,"endColumn":63},{"ruleId":"1925","severity":1,"message":"1926","line":208,"column":37,"nodeType":"1927","messageId":"1928","endLine":208,"endColumn":38,"suggestions":"1979"},{"ruleId":"1925","severity":1,"message":"1937","line":208,"column":39,"nodeType":"1927","messageId":"1928","endLine":208,"endColumn":40,"suggestions":"1980"},{"ruleId":"1925","severity":1,"message":"1981","line":208,"column":56,"nodeType":"1927","messageId":"1928","endLine":208,"endColumn":57,"suggestions":"1982"},{"ruleId":"1729","severity":1,"message":"1730","line":227,"column":26,"nodeType":"1731","messageId":"1732","endLine":227,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1737","line":227,"column":56,"nodeType":"1731","messageId":"1732","endLine":227,"endColumn":58},{"ruleId":"1729","severity":1,"message":"1730","line":231,"column":26,"nodeType":"1731","messageId":"1732","endLine":231,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1730","line":231,"column":56,"nodeType":"1731","messageId":"1732","endLine":231,"endColumn":58},{"ruleId":"1729","severity":1,"message":"1730","line":235,"column":26,"nodeType":"1731","messageId":"1732","endLine":235,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1737","line":235,"column":56,"nodeType":"1731","messageId":"1732","endLine":235,"endColumn":58},{"ruleId":"1729","severity":1,"message":"1730","line":239,"column":26,"nodeType":"1731","messageId":"1732","endLine":239,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1730","line":239,"column":56,"nodeType":"1731","messageId":"1732","endLine":239,"endColumn":58},{"ruleId":"1729","severity":1,"message":"1730","line":255,"column":33,"nodeType":"1731","messageId":"1732","endLine":255,"endColumn":35},{"ruleId":"1729","severity":1,"message":"1730","line":284,"column":26,"nodeType":"1731","messageId":"1732","endLine":284,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1730","line":285,"column":38,"nodeType":"1731","messageId":"1732","endLine":285,"endColumn":40},{"ruleId":"1729","severity":1,"message":"1730","line":293,"column":26,"nodeType":"1731","messageId":"1732","endLine":293,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1730","line":294,"column":38,"nodeType":"1731","messageId":"1732","endLine":294,"endColumn":40},{"ruleId":"1729","severity":1,"message":"1730","line":302,"column":26,"nodeType":"1731","messageId":"1732","endLine":302,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1730","line":303,"column":38,"nodeType":"1731","messageId":"1732","endLine":303,"endColumn":40},{"ruleId":"1710","severity":1,"message":"1983","line":321,"column":22,"nodeType":"1712","messageId":"1713","endLine":321,"endColumn":31},{"ruleId":"1729","severity":1,"message":"1730","line":333,"column":28,"nodeType":"1731","messageId":"1732","endLine":333,"endColumn":30},{"ruleId":"1710","severity":1,"message":"1984","line":335,"column":29,"nodeType":"1712","messageId":"1713","endLine":335,"endColumn":40},{"ruleId":"1729","severity":1,"message":"1730","line":338,"column":40,"nodeType":"1731","messageId":"1732","endLine":338,"endColumn":42},{"ruleId":"1729","severity":1,"message":"1730","line":342,"column":40,"nodeType":"1731","messageId":"1732","endLine":342,"endColumn":42},{"ruleId":"1729","severity":1,"message":"1730","line":346,"column":40,"nodeType":"1731","messageId":"1732","endLine":346,"endColumn":42},{"ruleId":"1729","severity":1,"message":"1730","line":350,"column":40,"nodeType":"1731","messageId":"1732","endLine":350,"endColumn":42},{"ruleId":"1729","severity":1,"message":"1730","line":354,"column":40,"nodeType":"1731","messageId":"1732","endLine":354,"endColumn":42},{"ruleId":"1729","severity":1,"message":"1730","line":358,"column":40,"nodeType":"1731","messageId":"1732","endLine":358,"endColumn":42},{"ruleId":"1729","severity":1,"message":"1730","line":362,"column":40,"nodeType":"1731","messageId":"1732","endLine":362,"endColumn":42},{"ruleId":"1729","severity":1,"message":"1730","line":366,"column":40,"nodeType":"1731","messageId":"1732","endLine":366,"endColumn":42},{"ruleId":"1729","severity":1,"message":"1730","line":370,"column":40,"nodeType":"1731","messageId":"1732","endLine":370,"endColumn":42},{"ruleId":"1729","severity":1,"message":"1730","line":374,"column":40,"nodeType":"1731","messageId":"1732","endLine":374,"endColumn":42},{"ruleId":"1729","severity":1,"message":"1730","line":430,"column":45,"nodeType":"1731","messageId":"1732","endLine":430,"endColumn":47},{"ruleId":"1710","severity":1,"message":"1972","line":456,"column":13,"nodeType":"1712","messageId":"1713","endLine":456,"endColumn":26},{"ruleId":"1766","severity":1,"message":"1799","line":480,"column":22,"nodeType":"1712","messageId":"1768","endLine":480,"endColumn":23},{"ruleId":"1766","severity":1,"message":"1799","line":492,"column":22,"nodeType":"1712","messageId":"1768","endLine":492,"endColumn":23},{"ruleId":"1766","severity":1,"message":"1799","line":504,"column":22,"nodeType":"1712","messageId":"1768","endLine":504,"endColumn":23},{"ruleId":"1766","severity":1,"message":"1799","line":516,"column":22,"nodeType":"1712","messageId":"1768","endLine":516,"endColumn":23},{"ruleId":"1771","severity":1,"message":"1772","line":528,"column":56,"nodeType":"1773","messageId":"1774","endLine":528,"endColumn":58},{"ruleId":"1771","severity":1,"message":"1772","line":538,"column":58,"nodeType":"1773","messageId":"1774","endLine":538,"endColumn":60},{"ruleId":"1710","severity":1,"message":"1973","line":540,"column":21,"nodeType":"1712","messageId":"1713","endLine":540,"endColumn":31},{"ruleId":"1779","severity":1,"message":"1975","line":545,"column":160,"nodeType":"1773","messageId":"1781","endLine":545,"endColumn":212},{"ruleId":"1771","severity":1,"message":"1772","line":560,"column":58,"nodeType":"1773","messageId":"1774","endLine":560,"endColumn":60},{"ruleId":"1729","severity":1,"message":"1730","line":562,"column":33,"nodeType":"1731","messageId":"1732","endLine":562,"endColumn":35},{"ruleId":"1726","severity":1,"message":"1727","line":679,"column":106,"nodeType":"1728","endLine":679,"endColumn":184},{"ruleId":"1729","severity":1,"message":"1730","line":745,"column":82,"nodeType":"1731","messageId":"1732","endLine":745,"endColumn":84},{"ruleId":"1729","severity":1,"message":"1730","line":745,"column":127,"nodeType":"1731","messageId":"1732","endLine":745,"endColumn":129},{"ruleId":"1710","severity":1,"message":"1976","line":783,"column":18,"nodeType":"1712","messageId":"1713","endLine":783,"endColumn":23},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1757","line":3,"column":10,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1758","line":3,"column":22,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1745","line":4,"column":10,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":14},{"ruleId":"1710","severity":1,"message":"1746","line":5,"column":10,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":22},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1729","severity":1,"message":"1730","line":51,"column":34,"nodeType":"1731","messageId":"1732","endLine":51,"endColumn":36},{"ruleId":"1729","severity":1,"message":"1737","line":110,"column":20,"nodeType":"1731","messageId":"1732","endLine":110,"endColumn":22},{"ruleId":"1771","severity":1,"message":"1772","line":127,"column":53,"nodeType":"1773","messageId":"1774","endLine":127,"endColumn":55},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1757","line":3,"column":10,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1758","line":3,"column":22,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1725","line":3,"column":17,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":21},{"ruleId":"1710","severity":1,"message":"1743","line":3,"column":23,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":32},{"ruleId":"1729","severity":1,"message":"1737","line":66,"column":42,"nodeType":"1731","messageId":"1732","endLine":66,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1725","line":3,"column":17,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":21},{"ruleId":"1710","severity":1,"message":"1743","line":3,"column":23,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":32},{"ruleId":"1710","severity":1,"message":"1763","line":6,"column":10,"nodeType":"1712","messageId":"1713","endLine":6,"endColumn":17},{"ruleId":"1729","severity":1,"message":"1730","line":97,"column":41,"nodeType":"1731","messageId":"1732","endLine":97,"endColumn":43},{"ruleId":"1710","severity":1,"message":"1985","line":127,"column":13,"nodeType":"1712","messageId":"1713","endLine":127,"endColumn":30},{"ruleId":"1710","severity":1,"message":"1986","line":128,"column":13,"nodeType":"1712","messageId":"1713","endLine":128,"endColumn":32},{"ruleId":"1729","severity":1,"message":"1737","line":138,"column":34,"nodeType":"1731","messageId":"1732","endLine":138,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1987","line":140,"column":25,"nodeType":"1712","messageId":"1713","endLine":140,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1729","severity":1,"message":"1730","line":97,"column":41,"nodeType":"1731","messageId":"1732","endLine":97,"endColumn":43},{"ruleId":"1710","severity":1,"message":"1988","line":152,"column":17,"nodeType":"1712","messageId":"1713","endLine":152,"endColumn":27},{"ruleId":"1710","severity":1,"message":"1989","line":154,"column":17,"nodeType":"1712","messageId":"1713","endLine":154,"endColumn":21},{"ruleId":"1729","severity":1,"message":"1737","line":155,"column":38,"nodeType":"1731","messageId":"1732","endLine":155,"endColumn":40},{"ruleId":"1729","severity":1,"message":"1737","line":158,"column":56,"nodeType":"1731","messageId":"1732","endLine":158,"endColumn":58},{"ruleId":"1729","severity":1,"message":"1730","line":159,"column":60,"nodeType":"1731","messageId":"1732","endLine":159,"endColumn":62},{"ruleId":"1729","severity":1,"message":"1730","line":159,"column":103,"nodeType":"1731","messageId":"1732","endLine":159,"endColumn":105},{"ruleId":"1726","severity":1,"message":"1727","line":178,"column":37,"nodeType":"1728","endLine":178,"endColumn":194},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1729","severity":1,"message":"1730","line":96,"column":41,"nodeType":"1731","messageId":"1732","endLine":96,"endColumn":43},{"ruleId":"1729","severity":1,"message":"1737","line":132,"column":43,"nodeType":"1731","messageId":"1732","endLine":132,"endColumn":45},{"ruleId":"1729","severity":1,"message":"1737","line":135,"column":59,"nodeType":"1731","messageId":"1732","endLine":135,"endColumn":61},{"ruleId":"1726","severity":1,"message":"1727","line":150,"column":33,"nodeType":"1728","endLine":150,"endColumn":193},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1729","severity":1,"message":"1730","line":10,"column":22,"nodeType":"1731","messageId":"1732","endLine":10,"endColumn":24},{"ruleId":"1729","severity":1,"message":"1730","line":32,"column":22,"nodeType":"1731","messageId":"1732","endLine":32,"endColumn":24},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1729","severity":1,"message":"1730","line":93,"column":41,"nodeType":"1731","messageId":"1732","endLine":93,"endColumn":43},{"ruleId":"1729","severity":1,"message":"1737","line":128,"column":37,"nodeType":"1731","messageId":"1732","endLine":128,"endColumn":39},{"ruleId":"1726","severity":1,"message":"1727","line":139,"column":33,"nodeType":"1728","endLine":139,"endColumn":181},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1729","severity":1,"message":"1730","line":96,"column":41,"nodeType":"1731","messageId":"1732","endLine":96,"endColumn":43},{"ruleId":"1729","severity":1,"message":"1737","line":132,"column":36,"nodeType":"1731","messageId":"1732","endLine":132,"endColumn":38},{"ruleId":"1729","severity":1,"message":"1737","line":135,"column":52,"nodeType":"1731","messageId":"1732","endLine":135,"endColumn":54},{"ruleId":"1726","severity":1,"message":"1727","line":148,"column":33,"nodeType":"1728","endLine":148,"endColumn":179},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1729","severity":1,"message":"1730","line":13,"column":54,"nodeType":"1731","messageId":"1732","endLine":13,"endColumn":56},{"ruleId":"1710","severity":1,"message":"1725","line":5,"column":5,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":9},{"ruleId":"1710","severity":1,"message":"1743","line":8,"column":5,"nodeType":"1712","messageId":"1713","endLine":8,"endColumn":14},{"ruleId":"1710","severity":1,"message":"1725","line":5,"column":5,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":9},{"ruleId":"1710","severity":1,"message":"1743","line":8,"column":5,"nodeType":"1712","messageId":"1713","endLine":8,"endColumn":14},{"ruleId":"1710","severity":1,"message":"1749","line":3,"column":5,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":18},{"ruleId":"1710","severity":1,"message":"1750","line":5,"column":5,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":14},{"ruleId":"1710","severity":1,"message":"1990","line":6,"column":5,"nodeType":"1712","messageId":"1713","endLine":6,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1991","line":155,"column":15,"nodeType":"1712","messageId":"1713","endLine":155,"endColumn":26},{"ruleId":"1710","severity":1,"message":"1741","line":156,"column":11,"nodeType":"1712","messageId":"1713","endLine":156,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1992","line":12,"column":12,"nodeType":"1712","messageId":"1713","endLine":12,"endColumn":23},{"ruleId":"1710","severity":1,"message":"1993","line":14,"column":12,"nodeType":"1712","messageId":"1713","endLine":14,"endColumn":17},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1787","line":4,"column":18,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":31},{"ruleId":"1710","severity":1,"message":"1724","line":4,"column":33,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":41},{"ruleId":"1710","severity":1,"message":"1745","line":5,"column":10,"nodeType":"1712","messageId":"1713","endLine":5,"endColumn":14},{"ruleId":"1710","severity":1,"message":"1994","line":7,"column":8,"nodeType":"1712","messageId":"1713","endLine":7,"endColumn":14},{"ruleId":"1729","severity":1,"message":"1730","line":99,"column":19,"nodeType":"1731","messageId":"1732","endLine":99,"endColumn":21},{"ruleId":"1729","severity":1,"message":"1730","line":99,"column":51,"nodeType":"1731","messageId":"1732","endLine":99,"endColumn":53},{"ruleId":"1729","severity":1,"message":"1730","line":146,"column":19,"nodeType":"1731","messageId":"1732","endLine":146,"endColumn":21},{"ruleId":"1729","severity":1,"message":"1730","line":146,"column":46,"nodeType":"1731","messageId":"1732","endLine":146,"endColumn":48},{"ruleId":"1729","severity":1,"message":"1730","line":173,"column":26,"nodeType":"1731","messageId":"1732","endLine":173,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1730","line":187,"column":49,"nodeType":"1731","messageId":"1732","endLine":187,"endColumn":51},{"ruleId":"1729","severity":1,"message":"1730","line":188,"column":30,"nodeType":"1731","messageId":"1732","endLine":188,"endColumn":32},{"ruleId":"1729","severity":1,"message":"1730","line":189,"column":57,"nodeType":"1731","messageId":"1732","endLine":189,"endColumn":59},{"ruleId":"1729","severity":1,"message":"1730","line":206,"column":46,"nodeType":"1731","messageId":"1732","endLine":206,"endColumn":48},{"ruleId":"1729","severity":1,"message":"1730","line":207,"column":30,"nodeType":"1731","messageId":"1732","endLine":207,"endColumn":32},{"ruleId":"1729","severity":1,"message":"1730","line":208,"column":57,"nodeType":"1731","messageId":"1732","endLine":208,"endColumn":59},{"ruleId":"1729","severity":1,"message":"1730","line":225,"column":26,"nodeType":"1731","messageId":"1732","endLine":225,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1730","line":241,"column":26,"nodeType":"1731","messageId":"1732","endLine":241,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1730","line":256,"column":26,"nodeType":"1731","messageId":"1732","endLine":256,"endColumn":28},{"ruleId":"1729","severity":1,"message":"1730","line":288,"column":27,"nodeType":"1731","messageId":"1732","endLine":288,"endColumn":29},{"ruleId":"1729","severity":1,"message":"1730","line":313,"column":27,"nodeType":"1731","messageId":"1732","endLine":313,"endColumn":29},{"ruleId":"1729","severity":1,"message":"1730","line":334,"column":27,"nodeType":"1731","messageId":"1732","endLine":334,"endColumn":29},{"ruleId":"1729","severity":1,"message":"1730","line":353,"column":27,"nodeType":"1731","messageId":"1732","endLine":353,"endColumn":29},{"ruleId":"1729","severity":1,"message":"1730","line":376,"column":27,"nodeType":"1731","messageId":"1732","endLine":376,"endColumn":29},{"ruleId":"1729","severity":1,"message":"1730","line":451,"column":45,"nodeType":"1731","messageId":"1732","endLine":451,"endColumn":47},{"ruleId":"1710","severity":1,"message":"1995","line":463,"column":13,"nodeType":"1712","messageId":"1713","endLine":463,"endColumn":30},{"ruleId":"1710","severity":1,"message":"1996","line":464,"column":13,"nodeType":"1712","messageId":"1713","endLine":464,"endColumn":33},{"ruleId":"1710","severity":1,"message":"1997","line":465,"column":13,"nodeType":"1712","messageId":"1713","endLine":465,"endColumn":19},{"ruleId":"1710","severity":1,"message":"1998","line":465,"column":21,"nodeType":"1712","messageId":"1713","endLine":465,"endColumn":32},{"ruleId":"1710","severity":1,"message":"1999","line":465,"column":34,"nodeType":"1712","messageId":"1713","endLine":465,"endColumn":43},{"ruleId":"1710","severity":1,"message":"2000","line":465,"column":45,"nodeType":"1712","messageId":"1713","endLine":465,"endColumn":54},{"ruleId":"1710","severity":1,"message":"2001","line":465,"column":56,"nodeType":"1712","messageId":"1713","endLine":465,"endColumn":65},{"ruleId":"1710","severity":1,"message":"2002","line":465,"column":67,"nodeType":"1712","messageId":"1713","endLine":465,"endColumn":72},{"ruleId":"1710","severity":1,"message":"2003","line":465,"column":74,"nodeType":"1712","messageId":"1713","endLine":465,"endColumn":90},{"ruleId":"1710","severity":1,"message":"2004","line":465,"column":92,"nodeType":"1712","messageId":"1713","endLine":465,"endColumn":105},{"ruleId":"1729","severity":1,"message":"1730","line":479,"column":71,"nodeType":"1731","messageId":"1732","endLine":479,"endColumn":73},{"ruleId":"1729","severity":1,"message":"1730","line":490,"column":69,"nodeType":"1731","messageId":"1732","endLine":490,"endColumn":71},{"ruleId":"1729","severity":1,"message":"1730","line":503,"column":35,"nodeType":"1731","messageId":"1732","endLine":503,"endColumn":37},{"ruleId":"1729","severity":1,"message":"1730","line":508,"column":37,"nodeType":"1731","messageId":"1732","endLine":508,"endColumn":39},{"ruleId":"1729","severity":1,"message":"1730","line":534,"column":48,"nodeType":"1731","messageId":"1732","endLine":534,"endColumn":50},{"ruleId":"1729","severity":1,"message":"1730","line":553,"column":47,"nodeType":"1731","messageId":"1732","endLine":553,"endColumn":49},{"ruleId":"1729","severity":1,"message":"1730","line":600,"column":47,"nodeType":"1731","messageId":"1732","endLine":600,"endColumn":49},{"ruleId":"1729","severity":1,"message":"1730","line":622,"column":48,"nodeType":"1731","messageId":"1732","endLine":622,"endColumn":50},{"ruleId":"1729","severity":1,"message":"1730","line":641,"column":50,"nodeType":"1731","messageId":"1732","endLine":641,"endColumn":52},{"ruleId":"1729","severity":1,"message":"1730","line":675,"column":51,"nodeType":"1731","messageId":"1732","endLine":675,"endColumn":53},{"ruleId":"1729","severity":1,"message":"1730","line":693,"column":50,"nodeType":"1731","messageId":"1732","endLine":693,"endColumn":52},{"ruleId":"1729","severity":1,"message":"1730","line":754,"column":59,"nodeType":"1731","messageId":"1732","endLine":754,"endColumn":61},{"ruleId":"1729","severity":1,"message":"1730","line":754,"column":98,"nodeType":"1731","messageId":"1732","endLine":754,"endColumn":100},{"ruleId":"1729","severity":1,"message":"1730","line":754,"column":137,"nodeType":"1731","messageId":"1732","endLine":754,"endColumn":139},{"ruleId":"1729","severity":1,"message":"1730","line":754,"column":179,"nodeType":"1731","messageId":"1732","endLine":754,"endColumn":181},{"ruleId":"1729","severity":1,"message":"1730","line":754,"column":221,"nodeType":"1731","messageId":"1732","endLine":754,"endColumn":223},{"ruleId":"1729","severity":1,"message":"1730","line":754,"column":260,"nodeType":"1731","messageId":"1732","endLine":754,"endColumn":262},{"ruleId":"1771","severity":1,"message":"2005","line":778,"column":11,"nodeType":"2006","messageId":"2007","endLine":778,"endColumn":18},{"ruleId":"1726","severity":1,"message":"1727","line":784,"column":9,"nodeType":"1728","endLine":784,"endColumn":103},{"ruleId":"1729","severity":1,"message":"1730","line":866,"column":43,"nodeType":"1731","messageId":"1732","endLine":866,"endColumn":45},{"ruleId":"1729","severity":1,"message":"1730","line":889,"column":42,"nodeType":"1731","messageId":"1732","endLine":889,"endColumn":44},{"ruleId":"1771","severity":1,"message":"2005","line":912,"column":11,"nodeType":"2006","messageId":"2007","endLine":912,"endColumn":18},{"ruleId":"1726","severity":1,"message":"1727","line":919,"column":9,"nodeType":"1728","endLine":919,"endColumn":105},{"ruleId":"1729","severity":1,"message":"1730","line":1003,"column":42,"nodeType":"1731","messageId":"1732","endLine":1003,"endColumn":44},{"ruleId":"1729","severity":1,"message":"1730","line":1025,"column":41,"nodeType":"1731","messageId":"1732","endLine":1025,"endColumn":43},{"ruleId":"1710","severity":1,"message":"2008","line":1050,"column":11,"nodeType":"1712","messageId":"1713","endLine":1050,"endColumn":30},{"ruleId":"1710","severity":1,"message":"2009","line":1186,"column":9,"nodeType":"1712","messageId":"1713","endLine":1186,"endColumn":26},{"ruleId":"1710","severity":1,"message":"1760","line":4,"column":3,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":8},{"ruleId":"1710","severity":1,"message":"2010","line":18,"column":10,"nodeType":"1712","messageId":"1713","endLine":18,"endColumn":19},{"ruleId":"1729","severity":1,"message":"1737","line":42,"column":20,"nodeType":"1731","messageId":"1732","endLine":42,"endColumn":22},{"ruleId":"1729","severity":1,"message":"1737","line":62,"column":20,"nodeType":"1731","messageId":"1732","endLine":62,"endColumn":22},{"ruleId":"1807","severity":1,"message":"1808","line":79,"column":5,"nodeType":"1809","messageId":"1810","endLine":79,"endColumn":15},{"ruleId":"1807","severity":1,"message":"1808","line":82,"column":5,"nodeType":"1809","messageId":"1810","endLine":82,"endColumn":15},{"ruleId":"1807","severity":1,"message":"1808","line":85,"column":5,"nodeType":"1809","messageId":"1810","endLine":85,"endColumn":15},{"ruleId":"1807","severity":1,"message":"1808","line":89,"column":7,"nodeType":"1809","messageId":"1810","endLine":89,"endColumn":17},{"ruleId":"1807","severity":1,"message":"1808","line":90,"column":7,"nodeType":"1809","messageId":"1810","endLine":90,"endColumn":17},{"ruleId":"1807","severity":1,"message":"1808","line":98,"column":5,"nodeType":"1809","messageId":"1810","endLine":98,"endColumn":15},{"ruleId":"1807","severity":1,"message":"1808","line":101,"column":5,"nodeType":"1809","messageId":"1810","endLine":101,"endColumn":15},{"ruleId":"1729","severity":1,"message":"1737","line":112,"column":40,"nodeType":"1731","messageId":"1732","endLine":112,"endColumn":42},{"ruleId":"1729","severity":1,"message":"1730","line":206,"column":24,"nodeType":"1731","messageId":"1732","endLine":206,"endColumn":26},{"ruleId":"1729","severity":1,"message":"1737","line":292,"column":33,"nodeType":"1731","messageId":"1732","endLine":292,"endColumn":35},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1757","line":3,"column":10,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":20},{"ruleId":"1710","severity":1,"message":"1758","line":3,"column":22,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":36},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1745","line":4,"column":10,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":14},{"ruleId":"1710","severity":1,"message":"1711","line":4,"column":10,"nodeType":"1712","messageId":"1713","endLine":4,"endColumn":20},{"ruleId":"1729","severity":1,"message":"1730","line":69,"column":37,"nodeType":"1731","messageId":"1732","endLine":69,"endColumn":39},{"ruleId":"1729","severity":1,"message":"1730","line":106,"column":31,"nodeType":"1731","messageId":"1732","endLine":106,"endColumn":33},{"ruleId":"1807","severity":1,"message":"1808","line":145,"column":5,"nodeType":"1809","messageId":"1810","endLine":145,"endColumn":15},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1710","severity":1,"message":"1715","line":3,"column":38,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1787","line":3,"column":45,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":58},{"ruleId":"1710","severity":1,"message":"1724","line":3,"column":60,"nodeType":"1712","messageId":"1713","endLine":3,"endColumn":68},{"ruleId":"1710","severity":1,"message":"1714","line":2,"column":8,"nodeType":"1712","messageId":"1713","endLine":2,"endColumn":16},{"ruleId":"1729","severity":1,"message":"1730","line":96,"column":41,"nodeType":"1731","messageId":"1732","endLine":96,"endColumn":43},{"ruleId":"1710","severity":1,"message":"2011","line":122,"column":15,"nodeType":"1712","messageId":"1713","endLine":122,"endColumn":25},{"ruleId":"1729","severity":1,"message":"1737","line":132,"column":35,"nodeType":"1731","messageId":"1732","endLine":132,"endColumn":37},{"ruleId":"1726","severity":1,"message":"1727","line":144,"column":33,"nodeType":"1728","endLine":144,"endColumn":177},{"ruleId":"1729","severity":1,"message":"1730","line":111,"column":28,"nodeType":"1731","messageId":"1732","endLine":111,"endColumn":30},{"ruleId":"1729","severity":1,"message":"1730","line":193,"column":46,"nodeType":"1731","messageId":"1732","endLine":193,"endColumn":48},{"ruleId":"1729","severity":1,"message":"1730","line":229,"column":46,"nodeType":"1731","messageId":"1732","endLine":229,"endColumn":48},{"ruleId":"1729","severity":1,"message":"1730","line":76,"column":31,"nodeType":"1731","messageId":"1732","endLine":76,"endColumn":33},{"ruleId":"1729","severity":1,"message":"1730","line":50,"column":31,"nodeType":"1731","messageId":"1732","endLine":50,"endColumn":33},{"ruleId":"1710","severity":1,"message":"2012","line":92,"column":32,"nodeType":"1712","messageId":"1713","endLine":92,"endColumn":46},"no-unused-vars","'withRouter' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","'Button' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'GeneralInfo' is defined but never used.","'ConfigForm' is defined but never used.","'AdditionalInfoForm' is defined but never used.","'OrderedList' is defined but never used.","'ListItem' is defined but never used.","'Form' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'SelectItem' is defined but never used.","'FormGroup' is defined but never used.","'RadioButton' is defined but never used.","'RadioButtonGroup' is defined but never used.","Expected '!==' and instead saw '!='.","'ownerName' is defined but never used.","'accessMgmt' is defined but never used.","'workSpaceName' is assigned a value but never used.","'email' is assigned a value but never used.","'workspaceNames' is assigned a value but never used.","'TextInput' is defined but never used.","'TooltipDefinition' is defined but never used.","'Link' is defined but never used.","'trackPromise' is defined but never used.","'Checkbox' is defined but never used.","'Column' is defined but never used.","'ComposedModal' is defined but never used.","'ModalBody' is defined but never used.","'Row' is defined but never used.","'Tag' is defined but never used.","'allowApi' is assigned a value but never used.","'APIKeyForm' is defined but never used.","'EventStreamApiKey' is defined but never used.","'navigate' is assigned a value but never used.","'Breadcrumb' is defined but never used.","'BreadcrumbItem' is defined but never used.","'throws' is defined but never used.","'Modal' is defined but never used.","'Select' is defined but never used.","'ModalWrapper' is defined but never used.","'Close32' is defined but never used.","'isEdit' is assigned a value but never used.","'params' is assigned a value but never used.","no-redeclare","'retrievedData' is already defined.","redeclared","'paramsData' is already defined.","'paramsDataSequence' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'defaultParamData' is assigned a value but never used.","'paramitem' is assigned a value but never used.","'paramItem' is assigned a value but never used.","'count' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'seq_id'.","unsafeRefs","'keyValue' is assigned a value but never used.","'paramsData' is assigned a value but never used.","'accData' is already defined.","'itemsParam' is assigned a value but never used.","'dataFromFb' is already defined.","'UnorderedList' is defined but never used.","'BrowserRouter' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'workspaceName' is assigned a value but never used.","'signingSecret' is assigned a value but never used.","'xoxb' is assigned a value but never used.","'xoxp' is assigned a value but never used.","'Filter32' is defined but never used.","'redirect_url' is assigned a value but never used.","'accName' is assigned a value but never used.","'accId' is assigned a value but never used.","'i' is already defined.","'uniqueNames' is assigned a value but never used.","Function declared in a loop contains unsafe references to variable(s) 'paramitem', 'paramToPush', 'paramitem'.","Function declared in a loop contains unsafe references to variable(s) 'paramitem', 'groupToPush', 'paramitem'.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","'ModalHeader' is defined but never used.","'Reset32' is defined but never used.","'TrashCan32' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["2013"],"no-useless-computed-key","Unnecessarily computed property [\"specialCharacterPresent\"] found.","Property","unnecessarilyComputedProperty",{"range":"2014","text":"2015"},"'validateFields' is already defined.","'message' is already defined.","'element' is already defined.","'Settings16' is defined but never used.","'ComboBox' is defined but never used.","React Hook useEffect has a missing dependency: 'getServiceManagerSettings'. Either include it or remove the dependency array.",["2016"],"'loaderFlag' is assigned a value but never used.","'element' is assigned a value but never used.","'user' is assigned a value but never used.","'eventStreamConfigElement' is assigned a value but never used.","'assistantsNameElement' is assigned a value but never used.","'merge' is defined but never used.","'Widgets' is defined but never used.","'Settings' is defined but never used.","'MaterialConfig' is defined but never used.","no-dupe-keys","Duplicate key 'rule'.","ObjectExpression","'settings' is assigned a value but never used.","'channelTOEdit' is assigned a value but never used.","'jsonTree' is assigned a value but never used.","'ruleToSave' is defined but never used.","'queryString' is assigned a value but never used.","'mongodbFormat' is assigned a value but never used.","'JsonLogic' is assigned a value but never used.","'stateObj' is assigned a value but never used.","'itemsWorkspace' is assigned a value but never used.","'formOptionWorkspace' is assigned a value but never used.","'workspaceItems' is assigned a value but never used.","'workspaceNameFromDB' is already defined.","'workspaceNameFromDB' is assigned a value but never used.","'rule' is assigned a value but never used.","no-self-assign","'rules' is assigned to itself.","selfAssignment","'Dropdown' is defined but never used.","'featureNameElement' is assigned a value but never used.","'disabledLabel' is assigned a value but never used.","'diabledLabelForAllAcc' is assigned a value but never used.","'dataToFEtch' is assigned a value but never used.","'publish' is assigned a value but never used.","'publishToAllAccount' is assigned a value but never used.","'publishToAcount' is assigned a value but never used.","'category' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'hidden' is assigned a value but never used.","'event_stream' is assigned a value but never used.","'pushToEventStream' is assigned a value but never used.","'addChatopsAsAdmin' is assigned a value but never used.","'TableCell' is defined but never used.","'Search' is defined but never used.","'searchIcon' is defined but never used.","'feedStatus' is assigned a value but never used.","'feedAccCode' is assigned a value but never used.","'rowDataArr' is assigned a value but never used.","'formSubmitted' is defined but never used.","'accID' is assigned a value but never used.","'stateData' is assigned a value but never used.","'redirectAPIUrl' is assigned a value but never used.","'FormLabel' is defined but never used.","'submitted' is assigned a value but never used.","'geoSelected' is assigned a value but never used.","'showComponent' is assigned a value but never used.","'continueFlag' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'AddWorkspace' is defined but never used.","'Add32' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'checkboxChecked' is assigned a value but never used.","'workspaceModal' is assigned a value but never used.","'enterprise' is assigned a value but never used.","'editFlag' is assigned a value but never used.","Duplicate key 'dedicatedDropletInstance'.","'step' is assigned a value but never used.","'rulesArr' is assigned a value but never used.","'bgRulesArr' is assigned a value but never used.","'bgRuleTitle' is assigned a value but never used.","'ruleValue' is assigned a value but never used.","'indexChannelWorkspaceObj' is already defined.","'toCHeck' is already defined.","'eventSource' is assigned a value but never used.","'values' is assigned a value but never used.","'styles' is assigned a value but never used.","'cacfAnsibleInstanceItems' is assigned a value but never used.","'ansibleInstanceItems' is assigned a value but never used.","'snowDefault' is assigned a value but never used.","'snowDroplet' is assigned a value but never used.","'snowCsm' is assigned a value but never used.","'icdDefault' is assigned a value but never used.","'snowDefaultInput' is assigned a value but never used.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-useless-escape","Unnecessary escape character: \\=.","Literal","unnecessaryEscape",["2017","2018"],"Unnecessary escape character: \\?.",["2019","2020"],"Unnecessary escape character: \\;.",["2021","2022"],["2023","2024"],["2025","2026"],["2027","2028"],"Unnecessary escape character: \\[.",["2029","2030"],["2031","2032"],["2033","2034"],["2035","2036"],["2037","2038"],["2039","2040"],["2041","2042"],["2043","2044"],["2045","2046"],["2047","2048"],["2049","2050"],["2051","2052"],["2053","2054"],"no-empty-character-class","Empty class.",["2055","2056"],["2057","2058"],["2059","2060"],"'status' is assigned a value but never used.","'wrapper' is assigned a value but never used.","'AddAlt32' is defined but never used.","'additionalPropArr' is assigned a value but never used.","'addPropKey' is defined but never used.","'addPropVal' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'currentDateNew' is assigned a value but never used.","'resourceState' is assigned a value but never used.","'geoMarketObj' is assigned a value but never used.","'key' is already defined.","'resourceDiv' is assigned a value but never used.","'colonVal' is assigned a value but never used.","'skillsToEdit' is assigned a value but never used.","'disableMarket' is assigned a value but never used.","'skillCheck' is assigned a value but never used.","'editPlatform' is assigned a value but never used.","Function declared in a loop contains unsafe references to variable(s) 'skills'.","'clear' is defined but never used.","'TextArea' is defined but never used.","'Datetime' is defined but never used.",["2061","2062"],["2063","2064"],"Unnecessary escape character: \\/.",["2065","2066"],"'geoMarket' is assigned a value but never used.","'serviceLine' is assigned a value but never used.","'featureIdToDelete' is assigned a value but never used.","'featureNameToDelete' is assigned a value but never used.","'redirectUrl' is assigned a value but never used.","'deleteItem' is assigned a value but never used.","'test' is assigned a value but never used.","'ModalFooter' is defined but never used.","'isModalOpen' is assigned a value but never used.","'RowDelete32' is defined but never used.","'error' is assigned a value but never used.","'DRForm' is defined but never used.","'showMajorIncident' is defined but never used.","'showsignificantEvent' is defined but never used.","'miFlow' is defined but never used.","'ksatHelpDiv' is defined but never used.","'moreMIDiv' is defined but never used.","'hideMiDiv' is defined but never used.","'showCEDiv' is defined but never used.","'ceDiv' is defined but never used.","'showSignicantDiv' is defined but never used.","'ksatHelpDivSE' is defined but never used.","Array.prototype.map() expects a return value from function.","ReturnStatement","expectedReturnValue","'EditableCellEmptyCE' is defined but never used.","'EditableCellEmpty' is defined but never used.","'useParams' is defined but never used.","'itemsBreak' is assigned a value but never used.","'allowPlainAuth' is assigned a value but never used.",{"desc":"2067","fix":"2068"},[4984,5011],"\"specialCharacterPresent\"",{"desc":"2069","fix":"2070"},{"messageId":"2071","fix":"2072","desc":"2073"},{"messageId":"2074","fix":"2075","desc":"2076"},{"messageId":"2071","fix":"2077","desc":"2073"},{"messageId":"2074","fix":"2078","desc":"2076"},{"messageId":"2071","fix":"2079","desc":"2073"},{"messageId":"2074","fix":"2080","desc":"2076"},{"messageId":"2071","fix":"2081","desc":"2073"},{"messageId":"2074","fix":"2082","desc":"2076"},{"messageId":"2071","fix":"2083","desc":"2073"},{"messageId":"2074","fix":"2084","desc":"2076"},{"messageId":"2071","fix":"2085","desc":"2073"},{"messageId":"2074","fix":"2086","desc":"2076"},{"messageId":"2071","fix":"2087","desc":"2073"},{"messageId":"2074","fix":"2088","desc":"2076"},{"messageId":"2071","fix":"2089","desc":"2073"},{"messageId":"2074","fix":"2090","desc":"2076"},{"messageId":"2071","fix":"2091","desc":"2073"},{"messageId":"2074","fix":"2092","desc":"2076"},{"messageId":"2071","fix":"2093","desc":"2073"},{"messageId":"2074","fix":"2094","desc":"2076"},{"messageId":"2071","fix":"2095","desc":"2073"},{"messageId":"2074","fix":"2096","desc":"2076"},{"messageId":"2071","fix":"2097","desc":"2073"},{"messageId":"2074","fix":"2098","desc":"2076"},{"messageId":"2071","fix":"2099","desc":"2073"},{"messageId":"2074","fix":"2100","desc":"2076"},{"messageId":"2071","fix":"2101","desc":"2073"},{"messageId":"2074","fix":"2102","desc":"2076"},{"messageId":"2071","fix":"2103","desc":"2073"},{"messageId":"2074","fix":"2104","desc":"2076"},{"messageId":"2071","fix":"2105","desc":"2073"},{"messageId":"2074","fix":"2106","desc":"2076"},{"messageId":"2071","fix":"2107","desc":"2073"},{"messageId":"2074","fix":"2108","desc":"2076"},{"messageId":"2071","fix":"2109","desc":"2073"},{"messageId":"2074","fix":"2110","desc":"2076"},{"messageId":"2071","fix":"2111","desc":"2073"},{"messageId":"2074","fix":"2112","desc":"2076"},{"messageId":"2071","fix":"2113","desc":"2073"},{"messageId":"2074","fix":"2114","desc":"2076"},{"messageId":"2071","fix":"2115","desc":"2073"},{"messageId":"2074","fix":"2116","desc":"2076"},{"messageId":"2071","fix":"2117","desc":"2073"},{"messageId":"2074","fix":"2118","desc":"2076"},{"messageId":"2071","fix":"2119","desc":"2073"},{"messageId":"2074","fix":"2120","desc":"2076"},{"messageId":"2071","fix":"2121","desc":"2073"},{"messageId":"2074","fix":"2122","desc":"2076"},{"messageId":"2071","fix":"2123","desc":"2073"},{"messageId":"2074","fix":"2124","desc":"2076"},"Update the dependencies array to be: [id]",{"range":"2125","text":"2126"},"Update the dependencies array to be: [getServiceManagerSettings]",{"range":"2127","text":"2128"},"removeEscape",{"range":"2129","text":"2130"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"2131","text":"2132"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"2133","text":"2130"},{"range":"2134","text":"2132"},{"range":"2135","text":"2130"},{"range":"2136","text":"2132"},{"range":"2137","text":"2130"},{"range":"2138","text":"2132"},{"range":"2139","text":"2130"},{"range":"2140","text":"2132"},{"range":"2141","text":"2130"},{"range":"2142","text":"2132"},{"range":"2143","text":"2130"},{"range":"2144","text":"2132"},{"range":"2145","text":"2130"},{"range":"2146","text":"2132"},{"range":"2147","text":"2130"},{"range":"2148","text":"2132"},{"range":"2149","text":"2130"},{"range":"2150","text":"2132"},{"range":"2151","text":"2130"},{"range":"2152","text":"2132"},{"range":"2153","text":"2130"},{"range":"2154","text":"2132"},{"range":"2155","text":"2130"},{"range":"2156","text":"2132"},{"range":"2157","text":"2130"},{"range":"2158","text":"2132"},{"range":"2159","text":"2130"},{"range":"2160","text":"2132"},{"range":"2161","text":"2130"},{"range":"2162","text":"2132"},{"range":"2163","text":"2130"},{"range":"2164","text":"2132"},{"range":"2165","text":"2130"},{"range":"2166","text":"2132"},{"range":"2167","text":"2130"},{"range":"2168","text":"2132"},{"range":"2169","text":"2130"},{"range":"2170","text":"2132"},{"range":"2171","text":"2130"},{"range":"2172","text":"2132"},{"range":"2173","text":"2130"},{"range":"2174","text":"2132"},{"range":"2175","text":"2130"},{"range":"2176","text":"2132"},{"range":"2177","text":"2130"},{"range":"2178","text":"2132"},{"range":"2179","text":"2130"},{"range":"2180","text":"2132"},[1701,1703],"[id]",[2037,2039],"[getServiceManagerSettings]",[599,600],"",[599,599],"\\",[614,615],[614,614],[1209,1210],[1209,1209],[1962,1963],[1962,1962],[1970,1971],[1970,1970],[2885,2886],[2885,2885],[2989,2990],[2989,2989],[3298,3299],[3298,3298],[3408,3409],[3408,3408],[3410,3411],[3410,3410],[3611,3612],[3611,3611],[4296,4297],[4296,4296],[4307,4308],[4307,4307],[4410,4411],[4410,4410],[4423,4424],[4423,4423],[4524,4525],[4524,4524],[4538,4539],[4538,4538],[4845,4846],[4845,4845],[4856,4857],[4856,4856],[5227,5228],[5227,5227],[5582,5583],[5582,5582],[5595,5596],[5595,5595],[9143,9144],[9143,9143],[9145,9146],[9145,9145],[9162,9163],[9162,9162]]